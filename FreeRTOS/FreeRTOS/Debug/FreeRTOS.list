
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006714  08006714  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006714  08006714  00008084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006714  08006714  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006718  08006718  00007718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800671c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002300  20000084  080067a0  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002384  080067a0  00008384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ddf  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fc  00000000  00000000  0001be8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0001f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa4  00000000  00000000  000207e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bab  00000000  00000000  00021784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001671f  00000000  00000000  0003732f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e37  00000000  00000000  0004da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  000d58c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000dad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800642c 	.word	0x0800642c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	0800642c 	.word	0x0800642c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <USER_ADC_Init>:
#include "main.h"
#include "adc.h"
#include "user_tim.h"

void USER_ADC_Init(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
    // Habilitar reloj del ADC y del puerto GPIOA
    RCC->IOPENR |= (1 << 0);     // GPIOAEN
 800041e:	4b49      	ldr	r3, [pc, #292]	@ (8000544 <USER_ADC_Init+0x12c>)
 8000420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000422:	4b48      	ldr	r3, [pc, #288]	@ (8000544 <USER_ADC_Init+0x12c>)
 8000424:	2101      	movs	r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (1 << 20);   // ADCEN
 800042a:	4b46      	ldr	r3, [pc, #280]	@ (8000544 <USER_ADC_Init+0x12c>)
 800042c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800042e:	4b45      	ldr	r3, [pc, #276]	@ (8000544 <USER_ADC_Init+0x12c>)
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	0349      	lsls	r1, r1, #13
 8000434:	430a      	orrs	r2, r1
 8000436:	641a      	str	r2, [r3, #64]	@ 0x40

    // PA0 en modo analógico
    GPIOA->MODER |= (0x3 << (0*2));   // Modo analógico
 8000438:	23a0      	movs	r3, #160	@ 0xa0
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	23a0      	movs	r3, #160	@ 0xa0
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	2103      	movs	r1, #3
 8000444:	430a      	orrs	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(0x3 << (0*2));  // Sin pull-up/pull-down
 8000448:	23a0      	movs	r3, #160	@ 0xa0
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	68da      	ldr	r2, [r3, #12]
 800044e:	23a0      	movs	r3, #160	@ 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2103      	movs	r1, #3
 8000454:	438a      	bics	r2, r1
 8000456:	60da      	str	r2, [r3, #12]

    // Configurar CKMODE para reloj síncrono dividido entre 2
    ADC1->CFGR2 &= ~(0x3 << 30);        // Borrar CKMODE
 8000458:	4b3b      	ldr	r3, [pc, #236]	@ (8000548 <USER_ADC_Init+0x130>)
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	4b3a      	ldr	r3, [pc, #232]	@ (8000548 <USER_ADC_Init+0x130>)
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	0892      	lsrs	r2, r2, #2
 8000462:	611a      	str	r2, [r3, #16]
    //ADC1->CFGR2 |=  (0x1 << 30);        // CKMODE = 01: PCLK/2

    ADC1_COMMON->CCR &= ~(0xE << 18);
 8000464:	4b39      	ldr	r3, [pc, #228]	@ (800054c <USER_ADC_Init+0x134>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b38      	ldr	r3, [pc, #224]	@ (800054c <USER_ADC_Init+0x134>)
 800046a:	4939      	ldr	r1, [pc, #228]	@ (8000550 <USER_ADC_Init+0x138>)
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
    ADC1_COMMON->CCR|=  (0x1 << 18);
 8000470:	4b36      	ldr	r3, [pc, #216]	@ (800054c <USER_ADC_Init+0x134>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b35      	ldr	r3, [pc, #212]	@ (800054c <USER_ADC_Init+0x134>)
 8000476:	2180      	movs	r1, #128	@ 0x80
 8000478:	02c9      	lsls	r1, r1, #11
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]

    // Configurar resolución, alineación, modo de conversión
    ADC1->CFGR1 &= ~(0x1 << 13); // Single conversion mode
 800047e:	4b32      	ldr	r3, [pc, #200]	@ (8000548 <USER_ADC_Init+0x130>)
 8000480:	68da      	ldr	r2, [r3, #12]
 8000482:	4b31      	ldr	r3, [pc, #196]	@ (8000548 <USER_ADC_Init+0x130>)
 8000484:	4933      	ldr	r1, [pc, #204]	@ (8000554 <USER_ADC_Init+0x13c>)
 8000486:	400a      	ands	r2, r1
 8000488:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~(0x1 << 5);  // Right alignment
 800048a:	4b2f      	ldr	r3, [pc, #188]	@ (8000548 <USER_ADC_Init+0x130>)
 800048c:	68da      	ldr	r2, [r3, #12]
 800048e:	4b2e      	ldr	r3, [pc, #184]	@ (8000548 <USER_ADC_Init+0x130>)
 8000490:	2120      	movs	r1, #32
 8000492:	438a      	bics	r2, r1
 8000494:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~(0x3 << 3);  // 12-bit resolution
 8000496:	4b2c      	ldr	r3, [pc, #176]	@ (8000548 <USER_ADC_Init+0x130>)
 8000498:	68da      	ldr	r2, [r3, #12]
 800049a:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <USER_ADC_Init+0x130>)
 800049c:	2118      	movs	r1, #24
 800049e:	438a      	bics	r2, r1
 80004a0:	60da      	str	r2, [r3, #12]

    // Tiempo de muestreo
    ADC1->SMPR &= ~(0x7 << 0);  // Limpia los bits
 80004a2:	4b29      	ldr	r3, [pc, #164]	@ (8000548 <USER_ADC_Init+0x130>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b28      	ldr	r3, [pc, #160]	@ (8000548 <USER_ADC_Init+0x130>)
 80004a8:	2107      	movs	r1, #7
 80004aa:	438a      	bics	r2, r1
 80004ac:	615a      	str	r2, [r3, #20]
    ADC1->SMPR |=  (0x4 << 0);  // Sampling time medio (~7.5 ADC cycles)
 80004ae:	4b26      	ldr	r3, [pc, #152]	@ (8000548 <USER_ADC_Init+0x130>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b25      	ldr	r3, [pc, #148]	@ (8000548 <USER_ADC_Init+0x130>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]

    ADC1->ISR &= ~( 0x1UL << 13U );
 80004ba:	4b23      	ldr	r3, [pc, #140]	@ (8000548 <USER_ADC_Init+0x130>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	4b22      	ldr	r3, [pc, #136]	@ (8000548 <USER_ADC_Init+0x130>)
 80004c0:	4924      	ldr	r1, [pc, #144]	@ (8000554 <USER_ADC_Init+0x13c>)
 80004c2:	400a      	ands	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]
    ADC1->CFGR1 &= ~( 0x1UL << 21U ) & ~( 0x1UL << 2U );
 80004c6:	4b20      	ldr	r3, [pc, #128]	@ (8000548 <USER_ADC_Init+0x130>)
 80004c8:	68da      	ldr	r2, [r3, #12]
 80004ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <USER_ADC_Init+0x130>)
 80004cc:	4922      	ldr	r1, [pc, #136]	@ (8000558 <USER_ADC_Init+0x140>)
 80004ce:	400a      	ands	r2, r1
 80004d0:	60da      	str	r2, [r3, #12]

    // Seleccionar canal 0 (PA0)
    ADC1->CHSELR |= (1 << 0);
 80004d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <USER_ADC_Init+0x130>)
 80004d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <USER_ADC_Init+0x130>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	629a      	str	r2, [r3, #40]	@ 0x28

    while( !(ADC1->ISR & (0x1UL << 13U)));
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	4b19      	ldr	r3, [pc, #100]	@ (8000548 <USER_ADC_Init+0x130>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	4013      	ands	r3, r2
 80004ea:	d0f9      	beq.n	80004e0 <USER_ADC_Init+0xc8>

    // Habilitar regulador interno

    ADC1->CR |= (1 << 28);       // ADVREGEN
 80004ec:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <USER_ADC_Init+0x130>)
 80004ee:	689a      	ldr	r2, [r3, #8]
 80004f0:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <USER_ADC_Init+0x130>)
 80004f2:	2180      	movs	r1, #128	@ 0x80
 80004f4:	0549      	lsls	r1, r1, #21
 80004f6:	430a      	orrs	r2, r1
 80004f8:	609a      	str	r2, [r3, #8]
    USER_TIM14_Delay(1);            // Delay > 1 ms
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 f882 	bl	8001604 <USER_TIM14_Delay>

    // Calibración
    while (!USER_ADC_Calibration());
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	f000 f82b 	bl	800055c <USER_ADC_Calibration>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d0fb      	beq.n	8000502 <USER_ADC_Init+0xea>

    // Habilitar ADC
    ADC1->CR |= (1 << 0);         // ADEN
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <USER_ADC_Init+0x130>)
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <USER_ADC_Init+0x130>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	609a      	str	r2, [r3, #8]
    for (uint32_t i = 0; i < 10 && !(ADC1->ISR & (1 << 0)); i++) USER_TIM14_Delay(1); // Wait up to 1ms
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	e005      	b.n	8000528 <USER_ADC_Init+0x110>
 800051c:	2001      	movs	r0, #1
 800051e:	f001 f871 	bl	8001604 <USER_TIM14_Delay>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b09      	cmp	r3, #9
 800052c:	d804      	bhi.n	8000538 <USER_ADC_Init+0x120>
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <USER_ADC_Init+0x130>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	d0f1      	beq.n	800051c <USER_ADC_Init+0x104>
    if (!(ADC1->ISR & (1 << 0))) return;  // Fail if ADRDY not set
 8000538:	4b03      	ldr	r3, [pc, #12]	@ (8000548 <USER_ADC_Init+0x130>)
 800053a:	681b      	ldr	r3, [r3, #0]
}
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	40021000 	.word	0x40021000
 8000548:	40012400 	.word	0x40012400
 800054c:	40012708 	.word	0x40012708
 8000550:	ffc7ffff 	.word	0xffc7ffff
 8000554:	ffffdfff 	.word	0xffffdfff
 8000558:	ffdffffb 	.word	0xffdffffb

0800055c <USER_ADC_Calibration>:

uint8_t USER_ADC_Calibration(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    ADC1->CR |= (1 << 31);                   // ADCAL
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <USER_ADC_Calibration+0x38>)
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <USER_ADC_Calibration+0x38>)
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	0609      	lsls	r1, r1, #24
 800056a:	430a      	orrs	r2, r1
 800056c:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & (1 << 31));            // Esperar fin de calibración
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <USER_ADC_Calibration+0x38>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dbfb      	blt.n	8000570 <USER_ADC_Calibration+0x14>

    // (Opcional) Ajustar factor de calibración
    if (ADC1->CALFACT > 0x7F) {
 8000578:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <USER_ADC_Calibration+0x38>)
 800057a:	23b4      	movs	r3, #180	@ 0xb4
 800057c:	58d3      	ldr	r3, [r2, r3]
 800057e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000580:	d903      	bls.n	800058a <USER_ADC_Calibration+0x2e>
        ADC1->CALFACT = 0x7F;
 8000582:	4a04      	ldr	r2, [pc, #16]	@ (8000594 <USER_ADC_Calibration+0x38>)
 8000584:	23b4      	movs	r3, #180	@ 0xb4
 8000586:	217f      	movs	r1, #127	@ 0x7f
 8000588:	50d1      	str	r1, [r2, r3]
    }
    return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	40012400 	.word	0x40012400

08000598 <USER_ADC_Read>:

uint16_t USER_ADC_Read(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
    ADC1->CR |= (1 << 2);  // ADSTART
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <USER_ADC_Read+0x28>)
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <USER_ADC_Read+0x28>)
 80005a2:	2104      	movs	r1, #4
 80005a4:	430a      	orrs	r2, r1
 80005a6:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & (1 << 2)));  // Esperar EOC
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <USER_ADC_Read+0x28>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2204      	movs	r2, #4
 80005b0:	4013      	ands	r3, r2
 80005b2:	d0fa      	beq.n	80005aa <USER_ADC_Read+0x12>
    return (uint16_t)(ADC1->DR);
 80005b4:	4b02      	ldr	r3, [pc, #8]	@ (80005c0 <USER_ADC_Read+0x28>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	b29b      	uxth	r3, r3
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40012400 	.word	0x40012400

080005c4 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Habilitamos las señales de reloj para los puertos I/O
	*/
	RCC->IOPENR		|=	( 0x1UL <<  1U );
 80005ca:	4bad      	ldr	r3, [pc, #692]	@ (8000880 <LCD_Init+0x2bc>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ce:	4bac      	ldr	r3, [pc, #688]	@ (8000880 <LCD_Init+0x2bc>)
 80005d0:	2102      	movs	r1, #2
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34

/**
  * Configuración de los pines de control (RS, RW, EN) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 18U );
 80005d6:	4bab      	ldr	r3, [pc, #684]	@ (8000884 <LCD_Init+0x2c0>)
 80005d8:	68da      	ldr	r2, [r3, #12]
 80005da:	4baa      	ldr	r3, [pc, #680]	@ (8000884 <LCD_Init+0x2c0>)
 80005dc:	49aa      	ldr	r1, [pc, #680]	@ (8000888 <LCD_Init+0x2c4>)
 80005de:	400a      	ands	r2, r1
 80005e0:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL <<  9U );
 80005e2:	4ba8      	ldr	r3, [pc, #672]	@ (8000884 <LCD_Init+0x2c0>)
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	4ba7      	ldr	r3, [pc, #668]	@ (8000884 <LCD_Init+0x2c0>)
 80005e8:	49a8      	ldr	r1, [pc, #672]	@ (800088c <LCD_Init+0x2c8>)
 80005ea:	400a      	ands	r2, r1
 80005ec:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 18U );
 80005ee:	4ba5      	ldr	r3, [pc, #660]	@ (8000884 <LCD_Init+0x2c0>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4ba4      	ldr	r3, [pc, #656]	@ (8000884 <LCD_Init+0x2c0>)
 80005f4:	49a6      	ldr	r1, [pc, #664]	@ (8000890 <LCD_Init+0x2cc>)
 80005f6:	400a      	ands	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 18U );
 80005fa:	4ba2      	ldr	r3, [pc, #648]	@ (8000884 <LCD_Init+0x2c0>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4ba1      	ldr	r3, [pc, #644]	@ (8000884 <LCD_Init+0x2c0>)
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	02c9      	lsls	r1, r1, #11
 8000604:	430a      	orrs	r2, r1
 8000606:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 20U );
 8000608:	4b9e      	ldr	r3, [pc, #632]	@ (8000884 <LCD_Init+0x2c0>)
 800060a:	68da      	ldr	r2, [r3, #12]
 800060c:	4b9d      	ldr	r3, [pc, #628]	@ (8000884 <LCD_Init+0x2c0>)
 800060e:	49a1      	ldr	r1, [pc, #644]	@ (8000894 <LCD_Init+0x2d0>)
 8000610:	400a      	ands	r2, r1
 8000612:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 10U );
 8000614:	4b9b      	ldr	r3, [pc, #620]	@ (8000884 <LCD_Init+0x2c0>)
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	4b9a      	ldr	r3, [pc, #616]	@ (8000884 <LCD_Init+0x2c0>)
 800061a:	499f      	ldr	r1, [pc, #636]	@ (8000898 <LCD_Init+0x2d4>)
 800061c:	400a      	ands	r2, r1
 800061e:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 20U );
 8000620:	4b98      	ldr	r3, [pc, #608]	@ (8000884 <LCD_Init+0x2c0>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b97      	ldr	r3, [pc, #604]	@ (8000884 <LCD_Init+0x2c0>)
 8000626:	499d      	ldr	r1, [pc, #628]	@ (800089c <LCD_Init+0x2d8>)
 8000628:	400a      	ands	r2, r1
 800062a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 20U );
 800062c:	4b95      	ldr	r3, [pc, #596]	@ (8000884 <LCD_Init+0x2c0>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b94      	ldr	r3, [pc, #592]	@ (8000884 <LCD_Init+0x2c0>)
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	0349      	lsls	r1, r1, #13
 8000636:	430a      	orrs	r2, r1
 8000638:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 22U );
 800063a:	4b92      	ldr	r3, [pc, #584]	@ (8000884 <LCD_Init+0x2c0>)
 800063c:	68da      	ldr	r2, [r3, #12]
 800063e:	4b91      	ldr	r3, [pc, #580]	@ (8000884 <LCD_Init+0x2c0>)
 8000640:	4997      	ldr	r1, [pc, #604]	@ (80008a0 <LCD_Init+0x2dc>)
 8000642:	400a      	ands	r2, r1
 8000644:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 11U );
 8000646:	4b8f      	ldr	r3, [pc, #572]	@ (8000884 <LCD_Init+0x2c0>)
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	4b8e      	ldr	r3, [pc, #568]	@ (8000884 <LCD_Init+0x2c0>)
 800064c:	4995      	ldr	r1, [pc, #596]	@ (80008a4 <LCD_Init+0x2e0>)
 800064e:	400a      	ands	r2, r1
 8000650:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 22U );
 8000652:	4b8c      	ldr	r3, [pc, #560]	@ (8000884 <LCD_Init+0x2c0>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b8b      	ldr	r3, [pc, #556]	@ (8000884 <LCD_Init+0x2c0>)
 8000658:	4993      	ldr	r1, [pc, #588]	@ (80008a8 <LCD_Init+0x2e4>)
 800065a:	400a      	ands	r2, r1
 800065c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 22U );
 800065e:	4b89      	ldr	r3, [pc, #548]	@ (8000884 <LCD_Init+0x2c0>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b88      	ldr	r3, [pc, #544]	@ (8000884 <LCD_Init+0x2c0>)
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	03c9      	lsls	r1, r1, #15
 8000668:	430a      	orrs	r2, r1
 800066a:	601a      	str	r2, [r3, #0]

/**
  * Configuración de los pines de datos (D4-D7) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 24U );
 800066c:	4b85      	ldr	r3, [pc, #532]	@ (8000884 <LCD_Init+0x2c0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	4b84      	ldr	r3, [pc, #528]	@ (8000884 <LCD_Init+0x2c0>)
 8000672:	498e      	ldr	r1, [pc, #568]	@ (80008ac <LCD_Init+0x2e8>)
 8000674:	400a      	ands	r2, r1
 8000676:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 12U );
 8000678:	4b82      	ldr	r3, [pc, #520]	@ (8000884 <LCD_Init+0x2c0>)
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	4b81      	ldr	r3, [pc, #516]	@ (8000884 <LCD_Init+0x2c0>)
 800067e:	498c      	ldr	r1, [pc, #560]	@ (80008b0 <LCD_Init+0x2ec>)
 8000680:	400a      	ands	r2, r1
 8000682:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 24U );
 8000684:	4b7f      	ldr	r3, [pc, #508]	@ (8000884 <LCD_Init+0x2c0>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b7e      	ldr	r3, [pc, #504]	@ (8000884 <LCD_Init+0x2c0>)
 800068a:	498a      	ldr	r1, [pc, #552]	@ (80008b4 <LCD_Init+0x2f0>)
 800068c:	400a      	ands	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 24U );
 8000690:	4b7c      	ldr	r3, [pc, #496]	@ (8000884 <LCD_Init+0x2c0>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b7b      	ldr	r3, [pc, #492]	@ (8000884 <LCD_Init+0x2c0>)
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	0449      	lsls	r1, r1, #17
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 26U );
 800069e:	4b79      	ldr	r3, [pc, #484]	@ (8000884 <LCD_Init+0x2c0>)
 80006a0:	68da      	ldr	r2, [r3, #12]
 80006a2:	4b78      	ldr	r3, [pc, #480]	@ (8000884 <LCD_Init+0x2c0>)
 80006a4:	4984      	ldr	r1, [pc, #528]	@ (80008b8 <LCD_Init+0x2f4>)
 80006a6:	400a      	ands	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 13U );
 80006aa:	4b76      	ldr	r3, [pc, #472]	@ (8000884 <LCD_Init+0x2c0>)
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	4b75      	ldr	r3, [pc, #468]	@ (8000884 <LCD_Init+0x2c0>)
 80006b0:	4982      	ldr	r1, [pc, #520]	@ (80008bc <LCD_Init+0x2f8>)
 80006b2:	400a      	ands	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 26U );
 80006b6:	4b73      	ldr	r3, [pc, #460]	@ (8000884 <LCD_Init+0x2c0>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b72      	ldr	r3, [pc, #456]	@ (8000884 <LCD_Init+0x2c0>)
 80006bc:	4980      	ldr	r1, [pc, #512]	@ (80008c0 <LCD_Init+0x2fc>)
 80006be:	400a      	ands	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 26U );
 80006c2:	4b70      	ldr	r3, [pc, #448]	@ (8000884 <LCD_Init+0x2c0>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b6f      	ldr	r3, [pc, #444]	@ (8000884 <LCD_Init+0x2c0>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	04c9      	lsls	r1, r1, #19
 80006cc:	430a      	orrs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 28U );
 80006d0:	4b6c      	ldr	r3, [pc, #432]	@ (8000884 <LCD_Init+0x2c0>)
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	4b6b      	ldr	r3, [pc, #428]	@ (8000884 <LCD_Init+0x2c0>)
 80006d6:	497b      	ldr	r1, [pc, #492]	@ (80008c4 <LCD_Init+0x300>)
 80006d8:	400a      	ands	r2, r1
 80006da:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 14U );
 80006dc:	4b69      	ldr	r3, [pc, #420]	@ (8000884 <LCD_Init+0x2c0>)
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	4b68      	ldr	r3, [pc, #416]	@ (8000884 <LCD_Init+0x2c0>)
 80006e2:	4979      	ldr	r1, [pc, #484]	@ (80008c8 <LCD_Init+0x304>)
 80006e4:	400a      	ands	r2, r1
 80006e6:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 28U );
 80006e8:	4b66      	ldr	r3, [pc, #408]	@ (8000884 <LCD_Init+0x2c0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b65      	ldr	r3, [pc, #404]	@ (8000884 <LCD_Init+0x2c0>)
 80006ee:	4977      	ldr	r1, [pc, #476]	@ (80008cc <LCD_Init+0x308>)
 80006f0:	400a      	ands	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 28U );
 80006f4:	4b63      	ldr	r3, [pc, #396]	@ (8000884 <LCD_Init+0x2c0>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b62      	ldr	r3, [pc, #392]	@ (8000884 <LCD_Init+0x2c0>)
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	0549      	lsls	r1, r1, #21
 80006fe:	430a      	orrs	r2, r1
 8000700:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8000702:	4b60      	ldr	r3, [pc, #384]	@ (8000884 <LCD_Init+0x2c0>)
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	4b5f      	ldr	r3, [pc, #380]	@ (8000884 <LCD_Init+0x2c0>)
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	0892      	lsrs	r2, r2, #2
 800070c:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 800070e:	4b5d      	ldr	r3, [pc, #372]	@ (8000884 <LCD_Init+0x2c0>)
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	4b5c      	ldr	r3, [pc, #368]	@ (8000884 <LCD_Init+0x2c0>)
 8000714:	496e      	ldr	r1, [pc, #440]	@ (80008d0 <LCD_Init+0x30c>)
 8000716:	400a      	ands	r2, r1
 8000718:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 30U );
 800071a:	4b5a      	ldr	r3, [pc, #360]	@ (8000884 <LCD_Init+0x2c0>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b59      	ldr	r3, [pc, #356]	@ (8000884 <LCD_Init+0x2c0>)
 8000720:	0052      	lsls	r2, r2, #1
 8000722:	0852      	lsrs	r2, r2, #1
 8000724:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8000726:	4b57      	ldr	r3, [pc, #348]	@ (8000884 <LCD_Init+0x2c0>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b56      	ldr	r3, [pc, #344]	@ (8000884 <LCD_Init+0x2c0>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	05c9      	lsls	r1, r1, #23
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOB->BSRR	 =	 LCD_RS_PIN_LOW;
 8000734:	4b53      	ldr	r3, [pc, #332]	@ (8000884 <LCD_Init+0x2c0>)
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0492      	lsls	r2, r2, #18
 800073a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_RW_PIN_LOW;
 800073c:	4b51      	ldr	r3, [pc, #324]	@ (8000884 <LCD_Init+0x2c0>)
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	04d2      	lsls	r2, r2, #19
 8000742:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_EN_PIN_LOW;
 8000744:	4b4f      	ldr	r3, [pc, #316]	@ (8000884 <LCD_Init+0x2c0>)
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	0512      	lsls	r2, r2, #20
 800074a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 800074c:	4b4d      	ldr	r3, [pc, #308]	@ (8000884 <LCD_Init+0x2c0>)
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	0552      	lsls	r2, r2, #21
 8000752:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_LOW;
 8000754:	4b4b      	ldr	r3, [pc, #300]	@ (8000884 <LCD_Init+0x2c0>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	0592      	lsls	r2, r2, #22
 800075a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 800075c:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <LCD_Init+0x2c0>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	05d2      	lsls	r2, r2, #23
 8000762:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000764:	4b47      	ldr	r3, [pc, #284]	@ (8000884 <LCD_Init+0x2c0>)
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	0612      	lsls	r2, r2, #24
 800076a:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 40ms
	USER_TIM14_Delay(50);
 800076c:	2032      	movs	r0, #50	@ 0x32
 800076e:	f000 ff49 	bl	8001604 <USER_TIM14_Delay>

	/* Special case of 'Function Set'	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8000772:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <LCD_Init+0x2c0>)
 8000774:	2280      	movs	r2, #128	@ 0x80
 8000776:	0152      	lsls	r2, r2, #5
 8000778:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 800077a:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <LCD_Init+0x2c0>)
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000782:	4b40      	ldr	r3, [pc, #256]	@ (8000884 <LCD_Init+0x2c0>)
 8000784:	2280      	movs	r2, #128	@ 0x80
 8000786:	05d2      	lsls	r2, r2, #23
 8000788:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <LCD_Init+0x2c0>)
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	0612      	lsls	r2, r2, #24
 8000790:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000792:	f000 faa3 	bl	8000cdc <LCD_Pulse_EN>
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 4.1ms
	USER_TIM14_Delay(5);
 8000796:	2005      	movs	r0, #5
 8000798:	f000 ff34 	bl	8001604 <USER_TIM14_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 800079c:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <LCD_Init+0x2c0>)
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	0152      	lsls	r2, r2, #5
 80007a2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80007a4:	4b37      	ldr	r3, [pc, #220]	@ (8000884 <LCD_Init+0x2c0>)
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	0192      	lsls	r2, r2, #6
 80007aa:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <LCD_Init+0x2c0>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	05d2      	lsls	r2, r2, #23
 80007b2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 80007b4:	4b33      	ldr	r3, [pc, #204]	@ (8000884 <LCD_Init+0x2c0>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	0612      	lsls	r2, r2, #24
 80007ba:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80007bc:	f000 fa8e 	bl	8000cdc <LCD_Pulse_EN>
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 53us
	USER_TIM14_Delay_us(53);
 80007c0:	2035      	movs	r0, #53	@ 0x35
 80007c2:	f000 ff61 	bl	8001688 <USER_TIM14_Delay_us>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 80007c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <LCD_Init+0x2c0>)
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	0152      	lsls	r2, r2, #5
 80007cc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <LCD_Init+0x2c0>)
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	0192      	lsls	r2, r2, #6
 80007d4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <LCD_Init+0x2c0>)
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	05d2      	lsls	r2, r2, #23
 80007dc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <LCD_Init+0x2c0>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	0612      	lsls	r2, r2, #24
 80007e4:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80007e6:	f000 fa79 	bl	8000cdc <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	f000 fa06 	bl	8000bfc <LCD_Busy>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d1fb      	bne.n	80007ec <LCD_Init+0x228>

	/* Initial 'Function Set' to change 4-bit mode	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <LCD_Init+0x2c0>)
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	0552      	lsls	r2, r2, #21
 80007fa:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80007fc:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <LCD_Init+0x2c0>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	0192      	lsls	r2, r2, #6
 8000802:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <LCD_Init+0x2c0>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	05d2      	lsls	r2, r2, #23
 800080a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <LCD_Init+0x2c0>)
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	0612      	lsls	r2, r2, #24
 8000812:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000814:	f000 fa62 	bl	8000cdc <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	f000 f9ef 	bl	8000bfc <LCD_Busy>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d1fb      	bne.n	800081a <LCD_Init+0x256>
	/* 'Function Set' (I=1, N and F as required)	*/
	LCD_Write_Cmd( 0x28U );
 8000822:	2028      	movs	r0, #40	@ 0x28
 8000824:	f000 f8c0 	bl	80009a8 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/
	LCD_Write_Cmd( 0x08U );
 8000828:	2008      	movs	r0, #8
 800082a:	f000 f8bd 	bl	80009a8 <LCD_Write_Cmd>
	/* 'Clear Display'	*/
	LCD_Write_Cmd( 0x01U );//
 800082e:	2001      	movs	r0, #1
 8000830:	f000 f8ba 	bl	80009a8 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)	*/
	LCD_Write_Cmd( 0x06U );
 8000834:	2006      	movs	r0, #6
 8000836:	f000 f8b7 	bl	80009a8 <LCD_Write_Cmd>
	/* Initialization Ends	*/
	LCD_Write_Cmd( 0x0FU );
 800083a:	200f      	movs	r0, #15
 800083c:	f000 f8b4 	bl	80009a8 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );
 8000840:	2040      	movs	r0, #64	@ 0x40
 8000842:	f000 f8b1 	bl	80009a8 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <LCD_Init+0x310>)
 8000848:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	e00c      	b.n	800086a <LCD_Init+0x2a6>
		LCD_Put_Char( *p );
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f8bb 	bl	80009d4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b3f      	cmp	r3, #63	@ 0x3f
 800086e:	d9ef      	bls.n	8000850 <LCD_Init+0x28c>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8000870:	2080      	movs	r0, #128	@ 0x80
 8000872:	f000 f899 	bl	80009a8 <LCD_Write_Cmd>
}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	40021000 	.word	0x40021000
 8000884:	50000400 	.word	0x50000400
 8000888:	fff3ffff 	.word	0xfff3ffff
 800088c:	fffffdff 	.word	0xfffffdff
 8000890:	fff7ffff 	.word	0xfff7ffff
 8000894:	ffcfffff 	.word	0xffcfffff
 8000898:	fffffbff 	.word	0xfffffbff
 800089c:	ffdfffff 	.word	0xffdfffff
 80008a0:	ff3fffff 	.word	0xff3fffff
 80008a4:	fffff7ff 	.word	0xfffff7ff
 80008a8:	ff7fffff 	.word	0xff7fffff
 80008ac:	fcffffff 	.word	0xfcffffff
 80008b0:	ffffefff 	.word	0xffffefff
 80008b4:	fdffffff 	.word	0xfdffffff
 80008b8:	f3ffffff 	.word	0xf3ffffff
 80008bc:	ffffdfff 	.word	0xffffdfff
 80008c0:	f7ffffff 	.word	0xf7ffffff
 80008c4:	cfffffff 	.word	0xcfffffff
 80008c8:	ffffbfff 	.word	0xffffbfff
 80008cc:	dfffffff 	.word	0xdfffffff
 80008d0:	ffff7fff 	.word	0xffff7fff
 80008d4:	080064f8 	.word	0x080064f8

080008d8 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0002      	movs	r2, r0
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	701a      	strb	r2, [r3, #0]
	if( ( val & 0x01U ) == 0x01U )
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2201      	movs	r2, #1
 80008ea:	4013      	ands	r3, r2
 80008ec:	d004      	beq.n	80008f8 <LCD_Out_Data4+0x20>
		GPIOB->BSRR	=	LCD_D4_PIN_HIGH;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <LCD_Out_Data4+0x84>)
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	0152      	lsls	r2, r2, #5
 80008f4:	619a      	str	r2, [r3, #24]
 80008f6:	e003      	b.n	8000900 <LCD_Out_Data4+0x28>
	else
		GPIOB->BSRR	=	LCD_D4_PIN_LOW;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <LCD_Out_Data4+0x84>)
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	0552      	lsls	r2, r2, #21
 80008fe:	619a      	str	r2, [r3, #24]

	if( ( val & 0x02U ) == 0x02U )
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2202      	movs	r2, #2
 8000906:	4013      	ands	r3, r2
 8000908:	d004      	beq.n	8000914 <LCD_Out_Data4+0x3c>
		GPIOB->BSRR	=	LCD_D5_PIN_HIGH;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <LCD_Out_Data4+0x84>)
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	0192      	lsls	r2, r2, #6
 8000910:	619a      	str	r2, [r3, #24]
 8000912:	e003      	b.n	800091c <LCD_Out_Data4+0x44>
	else
		GPIOB->BSRR	=	LCD_D5_PIN_LOW;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <LCD_Out_Data4+0x84>)
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0592      	lsls	r2, r2, #22
 800091a:	619a      	str	r2, [r3, #24]

	if( ( val & 0x04U ) == 0x04U )
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2204      	movs	r2, #4
 8000922:	4013      	ands	r3, r2
 8000924:	d004      	beq.n	8000930 <LCD_Out_Data4+0x58>
		GPIOB->BSRR	=	LCD_D6_PIN_HIGH;
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <LCD_Out_Data4+0x84>)
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	01d2      	lsls	r2, r2, #7
 800092c:	619a      	str	r2, [r3, #24]
 800092e:	e003      	b.n	8000938 <LCD_Out_Data4+0x60>
	else
		GPIOB->BSRR	=	LCD_D6_PIN_LOW;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <LCD_Out_Data4+0x84>)
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	05d2      	lsls	r2, r2, #23
 8000936:	619a      	str	r2, [r3, #24]

	if( ( val & 0x08U ) == 0x08U )
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2208      	movs	r2, #8
 800093e:	4013      	ands	r3, r2
 8000940:	d004      	beq.n	800094c <LCD_Out_Data4+0x74>
		GPIOB->BSRR	=	LCD_D7_PIN_HIGH;
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <LCD_Out_Data4+0x84>)
 8000944:	2280      	movs	r2, #128	@ 0x80
 8000946:	0212      	lsls	r2, r2, #8
 8000948:	619a      	str	r2, [r3, #24]
	else
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
}
 800094a:	e003      	b.n	8000954 <LCD_Out_Data4+0x7c>
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <LCD_Out_Data4+0x84>)
 800094e:	2280      	movs	r2, #128	@ 0x80
 8000950:	0612      	lsls	r2, r2, #24
 8000952:	619a      	str	r2, [r3, #24]
}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}
 800095c:	50000400 	.word	0x50000400

08000960 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	0002      	movs	r2, r0
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	701a      	strb	r2, [r3, #0]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	091b      	lsrs	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ffaf 	bl	80008d8 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800097a:	f000 f9af 	bl	8000cdc <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	220f      	movs	r2, #15
 8000984:	4013      	ands	r3, r2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ffa5 	bl	80008d8 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800098e:	f000 f9a5 	bl	8000cdc <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	f000 f932 	bl	8000bfc <LCD_Busy>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d1fb      	bne.n	8000994 <LCD_Write_Byte+0x34>
}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_LOW;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <LCD_Write_Cmd+0x28>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	0492      	lsls	r2, r2, #18
 80009ba:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( val );
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffcd 	bl	8000960 <LCD_Write_Byte>
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	50000400 	.word	0x50000400

080009d4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_HIGH;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <LCD_Put_Char+0x28>)
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( c );
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ffb7 	bl	8000960 <LCD_Write_Byte>
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	50000400 	.word	0x50000400

08000a00 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	1c0a      	adds	r2, r1, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	uint8_t address;
	column--;
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
	line--;
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	3a01      	subs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
	address = ( line * 0x40U ) + column;
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	019b      	lsls	r3, r3, #6
 8000a2c:	b2d9      	uxtb	r1, r3
 8000a2e:	200f      	movs	r0, #15
 8000a30:	183b      	adds	r3, r7, r0
 8000a32:	1dba      	adds	r2, r7, #6
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	188a      	adds	r2, r1, r2
 8000a38:	701a      	strb	r2, [r3, #0]
	address = 0x80U + ( address & 0x7FU );
 8000a3a:	0001      	movs	r1, r0
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	227f      	movs	r2, #127	@ 0x7f
 8000a42:	4013      	ands	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	3a80      	subs	r2, #128	@ 0x80
 8000a4a:	701a      	strb	r2, [r3, #0]
	LCD_Write_Cmd( address );
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ffa9 	bl	80009a8 <LCD_Write_Cmd>
}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 8000a5e:	b590      	push	{r4, r7, lr}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8000a66:	230e      	movs	r3, #14
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	e012      	b.n	8000a96 <LCD_Put_Str+0x38>
		LCD_Put_Char( str[ i ] );
 8000a70:	240e      	movs	r4, #14
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	5e9b      	ldrsh	r3, [r3, r2]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ffa8 	bl	80009d4 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	5e9b      	ldrsh	r3, [r3, r2]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	801a      	strh	r2, [r3, #0]
 8000a96:	220e      	movs	r2, #14
 8000a98:	18bb      	adds	r3, r7, r2
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	5e5b      	ldrsh	r3, [r3, r1]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	dc07      	bgt.n	8000ab2 <LCD_Put_Str+0x54>
 8000aa2:	18bb      	adds	r3, r7, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	5e9b      	ldrsh	r3, [r3, r2]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1de      	bne.n	8000a70 <LCD_Put_Str+0x12>
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b005      	add	sp, #20
 8000ab8:	bd90      	pop	{r4, r7, pc}

08000aba <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b087      	sub	sp, #28
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	1dbb      	adds	r3, r7, #6
 8000ac4:	801a      	strh	r2, [r3, #0]
	int16_t p;
	int16_t f = 0;
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2200      	movs	r2, #0
 8000acc:	801a      	strh	r2, [r3, #0]
	int8_t ch[ 5 ];

	for( int16_t i = 0; i < 5; i++ ){
 8000ace:	2312      	movs	r3, #18
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
 8000ad6:	e085      	b.n	8000be4 <LCD_Put_Num+0x12a>
		p = 1;
 8000ad8:	2316      	movs	r3, #22
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2201      	movs	r2, #1
 8000ade:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	2310      	movs	r3, #16
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	801a      	strh	r2, [r3, #0]
 8000af2:	e012      	b.n	8000b1a <LCD_Put_Num+0x60>
			p = p * 10;
 8000af4:	2116      	movs	r1, #22
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	1c1a      	adds	r2, r3, #0
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	18db      	adds	r3, r3, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 8000b08:	2110      	movs	r1, #16
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	5e9b      	ldrsh	r3, [r3, r2]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	801a      	strh	r2, [r3, #0]
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2200      	movs	r2, #0
 8000b20:	5e9b      	ldrsh	r3, [r3, r2]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dce6      	bgt.n	8000af4 <LCD_Put_Num+0x3a>
		ch[ i ] = ( num / p );
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	5e9a      	ldrsh	r2, [r3, r2]
 8000b2c:	2416      	movs	r4, #22
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2100      	movs	r1, #0
 8000b32:	5e5b      	ldrsh	r3, [r3, r1]
 8000b34:	0019      	movs	r1, r3
 8000b36:	0010      	movs	r0, r2
 8000b38:	f7ff fb82 	bl	8000240 <__divsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2312      	movs	r3, #18
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	5e5b      	ldrsh	r3, [r3, r1]
 8000b48:	b251      	sxtb	r1, r2
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	54d1      	strb	r1, [r2, r3]
		if( num >= p && !f )
 8000b50:	1dba      	adds	r2, r7, #6
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2100      	movs	r1, #0
 8000b56:	5e52      	ldrsh	r2, [r2, r1]
 8000b58:	2100      	movs	r1, #0
 8000b5a:	5e5b      	ldrsh	r3, [r3, r1]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	db08      	blt.n	8000b72 <LCD_Put_Num+0xb8>
 8000b60:	2214      	movs	r2, #20
 8000b62:	18bb      	adds	r3, r7, r2
 8000b64:	2100      	movs	r1, #0
 8000b66:	5e5b      	ldrsh	r3, [r3, r1]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <LCD_Put_Num+0xb8>
			f = 1;
 8000b6c:	18bb      	adds	r3, r7, r2
 8000b6e:	2201      	movs	r2, #1
 8000b70:	801a      	strh	r2, [r3, #0]
		num = num - ch[ i ] * p;
 8000b72:	1dbb      	adds	r3, r7, #6
 8000b74:	881a      	ldrh	r2, [r3, #0]
 8000b76:	2012      	movs	r0, #18
 8000b78:	183b      	adds	r3, r7, r0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	5e5b      	ldrsh	r3, [r3, r1]
 8000b7e:	2408      	movs	r4, #8
 8000b80:	1939      	adds	r1, r7, r4
 8000b82:	56cb      	ldrsb	r3, [r1, r3]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2116      	movs	r1, #22
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	8809      	ldrh	r1, [r1, #0]
 8000b8c:	434b      	muls	r3, r1
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	1dbb      	adds	r3, r7, #6
 8000b96:	801a      	strh	r2, [r3, #0]
		ch[ i ] = ch[ i ] + 48;
 8000b98:	183b      	adds	r3, r7, r0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	5e9b      	ldrsh	r3, [r3, r2]
 8000b9e:	193a      	adds	r2, r7, r4
 8000ba0:	56d3      	ldrsb	r3, [r2, r3]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	3330      	adds	r3, #48	@ 0x30
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	183b      	adds	r3, r7, r0
 8000baa:	2100      	movs	r1, #0
 8000bac:	5e5b      	ldrsh	r3, [r3, r1]
 8000bae:	b251      	sxtb	r1, r2
 8000bb0:	193a      	adds	r2, r7, r4
 8000bb2:	54d1      	strb	r1, [r2, r3]
		if( f )
 8000bb4:	2314      	movs	r3, #20
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	5e9b      	ldrsh	r3, [r3, r2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d008      	beq.n	8000bd2 <LCD_Put_Num+0x118>
			LCD_Put_Char( ch[ i ] );
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8000bc6:	193a      	adds	r2, r7, r4
 8000bc8:	56d3      	ldrsb	r3, [r2, r3]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff01 	bl	80009d4 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 8000bd2:	2112      	movs	r1, #18
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	5e9b      	ldrsh	r3, [r3, r2]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	801a      	strh	r2, [r3, #0]
 8000be4:	2312      	movs	r3, #18
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	5e9b      	ldrsh	r3, [r3, r2]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	dc00      	bgt.n	8000bf2 <LCD_Put_Num+0x138>
 8000bf0:	e772      	b.n	8000ad8 <LCD_Put_Num+0x1e>
	}
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b007      	add	sp, #28
 8000bfa:	bd90      	pop	{r4, r7, pc}

08000bfc <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOB->PUPDR &= ~( 0x3UL << 30U );
 8000c00:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	0892      	lsrs	r2, r2, #2
 8000c0a:	60da      	str	r2, [r3, #12]
    GPIOB->MODER &= ~( 0x3UL << 30U );
 8000c0c:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	0892      	lsrs	r2, r2, #2
 8000c16:	601a      	str	r2, [r3, #0]
	GPIOB->BSRR	  =	 LCD_RS_PIN_LOW;
 8000c18:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	0492      	lsls	r2, r2, #18
 8000c1e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_RW_PIN_HIGH;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_EN_PIN_HIGH;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for 100us
	USER_TIM14_Delay_us(100);
 8000c30:	2064      	movs	r0, #100	@ 0x64
 8000c32:	f000 fd29 	bl	8001688 <USER_TIM14_Delay_us>
	if(( GPIOB->IDR	& LCD_D7_PIN_HIGH )) {
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d022      	beq.n	8000c88 <LCD_Busy+0x8c>
		 GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 8000c42:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	0512      	lsls	r2, r2, #20
 8000c48:	619a      	str	r2, [r3, #24]
		 GPIOB->BSRR	=  LCD_RW_PIN_LOW;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	04d2      	lsls	r2, r2, #19
 8000c50:	619a      	str	r2, [r3, #24]
/**
  * Configuracion de D7 as output push-pull
  */
	GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	0892      	lsrs	r2, r2, #2
 8000c5c:	60da      	str	r2, [r3, #12]
  	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c64:	491c      	ldr	r1, [pc, #112]	@ (8000cd8 <LCD_Busy+0xdc>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	605a      	str	r2, [r3, #4]
  	GPIOB->MODER  &= ~( 0x2UL << 30U );
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c70:	0052      	lsls	r2, r2, #1
 8000c72:	0852      	lsrs	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
  	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	05c9      	lsls	r1, r1, #23
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
		return 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e021      	b.n	8000ccc <LCD_Busy+0xd0>
	} else {
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	0512      	lsls	r2, r2, #20
 8000c8e:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=	 LCD_RW_PIN_LOW;
 8000c90:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	04d2      	lsls	r2, r2, #19
 8000c96:	619a      	str	r2, [r3, #24]
/**
  * Configuracion de D7 as output push-pull
  */
	GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	0892      	lsrs	r2, r2, #2
 8000ca2:	60da      	str	r2, [r3, #12]
  	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000caa:	490b      	ldr	r1, [pc, #44]	@ (8000cd8 <LCD_Busy+0xdc>)
 8000cac:	400a      	ands	r2, r1
 8000cae:	605a      	str	r2, [r3, #4]
  	GPIOB->MODER  &= ~( 0x2UL << 30U );
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	0852      	lsrs	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
  	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <LCD_Busy+0xd8>)
 8000cc2:	2180      	movs	r1, #128	@ 0x80
 8000cc4:	05c9      	lsls	r1, r1, #23
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
		return 0;
 8000cca:	2300      	movs	r3, #0
	}
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	50000400 	.word	0x50000400
 8000cd8:	ffff7fff 	.word	0xffff7fff

08000cdc <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;//
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <LCD_Pulse_EN+0x34>)
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	0512      	lsls	r2, r2, #20
 8000ce6:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	10us
	USER_TIM14_Delay_us(100);
 8000ce8:	2064      	movs	r0, #100	@ 0x64
 8000cea:	f000 fccd 	bl	8001688 <USER_TIM14_Delay_us>

	GPIOB->BSRR	=	LCD_EN_PIN_HIGH;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <LCD_Pulse_EN+0x34>)
 8000cf0:	2280      	movs	r2, #128	@ 0x80
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	10us
	USER_TIM14_Delay_us(100);
 8000cf6:	2064      	movs	r0, #100	@ 0x64
 8000cf8:	f000 fcc6 	bl	8001688 <USER_TIM14_Delay_us>

	GPIOB->BSRR	=	LCD_EN_PIN_LOW;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <LCD_Pulse_EN+0x34>)
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	0512      	lsls	r2, r2, #20
 8000d02:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	1ms
	USER_TIM14_Delay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 fc7d 	bl	8001604 <USER_TIM14_Delay>
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	50000400 	.word	0x50000400

08000d14 <main>:
#define CYCLE_TIME 16 // Total cycle duration in ms

uint8_t m[]="UART inicializando\r\n";

/*====================[ Main ]====================*/
int main(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af02      	add	r7, sp, #8
    /* Initialization of Peripherals */

	HAL_Init();
 8000d1a:	f000 ffd8 	bl	8001cce <HAL_Init>
	USER_RCC_Init();
 8000d1e:	f000 f87b 	bl	8000e18 <USER_RCC_Init>
	USER_GPIO_Init();
 8000d22:	f000 f8b9 	bl	8000e98 <USER_GPIO_Init>
	USER_TIM14_Init();
 8000d26:	f000 fc4f 	bl	80015c8 <USER_TIM14_Init>
	USER_TIM16_Init();
 8000d2a:	f000 fceb 	bl	8001704 <USER_TIM16_Init>
	USER_TIM17_Init_Timer();
 8000d2e:	f000 fd43 	bl	80017b8 <USER_TIM17_Init_Timer>
	USER_USART1_Init();
 8000d32:	f000 fdbf 	bl	80018b4 <USER_USART1_Init>
	USER_UART2_Init( );
 8000d36:	f000 fef7 	bl	8001b28 <USER_UART2_Init>

	Task_ADC_Init();  // <- esto es nuevo y necesario
 8000d3a:	f000 f9e9 	bl	8001110 <Task_ADC_Init>
	USER_TIM3_PWM_Init();
 8000d3e:	f000 fb2b 	bl	8001398 <USER_TIM3_PWM_Init>
	LCD_Init();
 8000d42:	f7ff fc3f 	bl	80005c4 <LCD_Init>


    USER_USART1_Transmit(m,sizeof(m));
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <main+0xc0>)
 8000d48:	2115      	movs	r1, #21
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fe36 	bl	80019bc <USER_USART1_Transmit>

    /* Create FreeRTOS Tasks */
	xTaskCreate(Task_PWM_Update, "PWM_Update", 256, NULL, 4, &Task3Handle);
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	005a      	lsls	r2, r3, #1
 8000d54:	4920      	ldr	r1, [pc, #128]	@ (8000dd8 <main+0xc4>)
 8000d56:	4821      	ldr	r0, [pc, #132]	@ (8000ddc <main+0xc8>)
 8000d58:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <main+0xcc>)
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2300      	movs	r3, #0
 8000d62:	f001 ff9b 	bl	8002c9c <xTaskCreate>
	xTaskCreate(Task_Transmit, "Transmit", 256, NULL, 3, &Task4Handle);
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	005a      	lsls	r2, r3, #1
 8000d6a:	491e      	ldr	r1, [pc, #120]	@ (8000de4 <main+0xd0>)
 8000d6c:	481e      	ldr	r0, [pc, #120]	@ (8000de8 <main+0xd4>)
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <main+0xd8>)
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	2303      	movs	r3, #3
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	f001 ff90 	bl	8002c9c <xTaskCreate>
	xTaskCreate(Task_Display, "Display", 128, NULL, 5, &Task5Handle);
 8000d7c:	491c      	ldr	r1, [pc, #112]	@ (8000df0 <main+0xdc>)
 8000d7e:	481d      	ldr	r0, [pc, #116]	@ (8000df4 <main+0xe0>)
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <main+0xe4>)
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	2305      	movs	r3, #5
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	f001 ff86 	bl	8002c9c <xTaskCreate>
	xTaskCreate(Task_Control, "Control", 256, NULL, 2, &Task2Handle);
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	005a      	lsls	r2, r3, #1
 8000d94:	4919      	ldr	r1, [pc, #100]	@ (8000dfc <main+0xe8>)
 8000d96:	481a      	ldr	r0, [pc, #104]	@ (8000e00 <main+0xec>)
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <main+0xf0>)
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	f001 ff7b 	bl	8002c9c <xTaskCreate>
	xTaskCreate(Task_Input, "Input", 128, NULL, 1, &Task1Handle);
 8000da6:	4918      	ldr	r1, [pc, #96]	@ (8000e08 <main+0xf4>)
 8000da8:	4818      	ldr	r0, [pc, #96]	@ (8000e0c <main+0xf8>)
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <main+0xfc>)
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	f001 ff71 	bl	8002c9c <xTaskCreate>

	printf("Heap: %u bytes\r\n", xPortGetFreeHeapSize());
 8000dba:	f003 fba9 	bl	8004510 <xPortGetFreeHeapSize>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <main+0x100>)
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f003 fd23 	bl	8004810 <iprintf>


    vTaskStartScheduler();
 8000dca:	f002 f905 	bl	8002fd8 <vTaskStartScheduler>

	/* Repetitive block */

    for(;;){
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	e7fd      	b.n	8000dce <main+0xba>
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	08006444 	.word	0x08006444
 8000ddc:	08000ff1 	.word	0x08000ff1
 8000de0:	200000a8 	.word	0x200000a8
 8000de4:	08006450 	.word	0x08006450
 8000de8:	080010bd 	.word	0x080010bd
 8000dec:	200000ac 	.word	0x200000ac
 8000df0:	0800645c 	.word	0x0800645c
 8000df4:	08001029 	.word	0x08001029
 8000df8:	200000b0 	.word	0x200000b0
 8000dfc:	08006464 	.word	0x08006464
 8000e00:	08000f81 	.word	0x08000f81
 8000e04:	200000a4 	.word	0x200000a4
 8000e08:	0800646c 	.word	0x0800646c
 8000e0c:	08000f39 	.word	0x08000f39
 8000e10:	200000a0 	.word	0x200000a0
 8000e14:	08006474 	.word	0x08006474

08000e18 <USER_RCC_Init>:

}


/*====================[ Hardware Init Functions ]==z==================*/
void USER_RCC_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    // Flash latency y reloj a 48 MHz
	FLASH->ACR	&= ~( 0x6UL <<  0U );
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <USER_RCC_Init+0x68>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <USER_RCC_Init+0x68>)
 8000e22:	2106      	movs	r1, #6
 8000e24:	438a      	bics	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
	FLASH->ACR	|=  ( 0x1UL <<  0U );
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <USER_RCC_Init+0x68>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <USER_RCC_Init+0x68>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
	while(( FLASH->ACR & ( 0x7UL <<  0U )) != 0x001UL );
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <USER_RCC_Init+0x68>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d1f9      	bne.n	8000e36 <USER_RCC_Init+0x1e>

	RCC->CR		&= ~( 0x7UL << 11U );
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e48:	490f      	ldr	r1, [pc, #60]	@ (8000e88 <USER_RCC_Init+0x70>)
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
	while(!( RCC->CR & ( 0x1UL << 10U )));
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d0f9      	beq.n	8000e50 <USER_RCC_Init+0x38>

	RCC->CFGR	&= ~( 0x7UL <<  0U );
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	438a      	bics	r2, r1
 8000e66:	609a      	str	r2, [r3, #8]
	RCC->CFGR	&= ~( 0x1UL << 11U );
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <USER_RCC_Init+0x6c>)
 8000e6e:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <USER_RCC_Init+0x74>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	609a      	str	r2, [r3, #8]
	SystemCoreClock = 48000000;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <USER_RCC_Init+0x78>)
 8000e76:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <USER_RCC_Init+0x7c>)
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40022000 	.word	0x40022000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	ffffc7ff 	.word	0xffffc7ff
 8000e8c:	fffff7ff 	.word	0xfffff7ff
 8000e90:	2000001c 	.word	0x2000001c
 8000e94:	02dc6c00 	.word	0x02dc6c00

08000e98 <USER_GPIO_Init>:

void USER_GPIO_Init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	RCC->IOPENR = RCC->IOPENR | (0x1UL << 0U);
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <USER_GPIO_Init+0x94>)
 8000e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <USER_GPIO_Init+0x94>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	@ 0x34

	// Configurar PA1 como entrada con pull-up
	GPIOA->PUPDR &= ~(0x3UL << 2U);  // Limpiar bits PUPDR[2:3] para PA1
 8000ea8:	23a0      	movs	r3, #160	@ 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	23a0      	movs	r3, #160	@ 0xa0
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	210c      	movs	r1, #12
 8000eb4:	438a      	bics	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |=  (0x1UL << 2U);  // Activar pull-up en PA1
 8000eb8:	23a0      	movs	r3, #160	@ 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	23a0      	movs	r3, #160	@ 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	60da      	str	r2, [r3, #12]
	GPIOA->MODER &= ~(0x3UL << 2U);  // Configurar PA1 como entrada (00)
 8000ec8:	23a0      	movs	r3, #160	@ 0xa0
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	23a0      	movs	r3, #160	@ 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	210c      	movs	r1, #12
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

	// Configure PA5 as output push pull (It comes in the LCD, so JIC)
	GPIOA->BSRR   = 0x1UL << 21U; // Reset PA5 low to turn off LED
 8000ed8:	23a0      	movs	r3, #160	@ 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	0392      	lsls	r2, r2, #14
 8000ee0:	619a      	str	r2, [r3, #24]
	GPIOA->PUPDR  = GPIOA->PUPDR  & ~(0x3UL << 10U); // Clear pull-up/pull-down bits for PA5
 8000ee2:	23a0      	movs	r3, #160	@ 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	23a0      	movs	r3, #160	@ 0xa0
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	4910      	ldr	r1, [pc, #64]	@ (8000f30 <USER_GPIO_Init+0x98>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL <<  5U); // Clear output type bit for PA5
 8000ef2:	23a0      	movs	r3, #160	@ 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	23a0      	movs	r3, #160	@ 0xa0
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2120      	movs	r1, #32
 8000efe:	438a      	bics	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]
	GPIOA->MODER  = GPIOA->MODER  & ~(0x2UL << 10U); // Set PA5 as output
 8000f02:	23a0      	movs	r3, #160	@ 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	23a0      	movs	r3, #160	@ 0xa0
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	4909      	ldr	r1, [pc, #36]	@ (8000f34 <USER_GPIO_Init+0x9c>)
 8000f0e:	400a      	ands	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
	GPIOA->MODER  = GPIOA->MODER  |  (0x1UL << 10U); // Set PA5 as output
 8000f12:	23a0      	movs	r3, #160	@ 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	23a0      	movs	r3, #160	@ 0xa0
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	00c9      	lsls	r1, r1, #3
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	fffff3ff 	.word	0xfffff3ff
 8000f34:	fffff7ff 	.word	0xfffff7ff

08000f38 <Task_Input>:

/*====================[ FreeRTOS Task Definitions ]====================*/
void Task_Input(void *pvParameters) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	for (;;) {
		acceleration = USER_ADC_Read();
 8000f40:	f7ff fb2a 	bl	8000598 <USER_ADC_Read>
 8000f44:	0003      	movs	r3, r0
 8000f46:	001a      	movs	r2, r3
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <Task_Input+0x3c>)
 8000f4a:	601a      	str	r2, [r3, #0]
		button_state = (GPIOA->IDR & (1UL << 1U)) ? 0 : 1;
 8000f4c:	23a0      	movs	r3, #160	@ 0xa0
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2202      	movs	r2, #2
 8000f54:	4013      	ands	r3, r2
 8000f56:	425a      	negs	r2, r3
 8000f58:	4153      	adcs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <Task_Input+0x40>)
 8000f60:	601a      	str	r2, [r3, #0]
		printf("T1\r\n");
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <Task_Input+0x44>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f003 fcb9 	bl	80048dc <puts>
		vTaskDelay(40);  // Delay for stability
 8000f6a:	2028      	movs	r0, #40	@ 0x28
 8000f6c:	f002 f80e 	bl	8002f8c <vTaskDelay>
		acceleration = USER_ADC_Read();
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	e7e5      	b.n	8000f40 <Task_Input+0x8>
 8000f74:	200000c4 	.word	0x200000c4
 8000f78:	200000c8 	.word	0x200000c8
 8000f7c:	08006488 	.word	0x08006488

08000f80 <Task_Control>:
	}
}

void Task_Control(void *pvParameters) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (!paqueteListo) {
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <Task_Control+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d119      	bne.n	8000fc6 <Task_Control+0x46>
			// Solo si no llegó dato de ESP32, actualiza desde el potenciómetro
		    vl = acceleration / 10;
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <Task_Control+0x5c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	210a      	movs	r1, #10
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff f951 	bl	8000240 <__divsi3>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <Task_Control+0x60>)
 8000fa4:	601a      	str	r2, [r3, #0]
		    rpm = vl * 50;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <Task_Control+0x60>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2232      	movs	r2, #50	@ 0x32
 8000fac:	435a      	muls	r2, r3
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <Task_Control+0x64>)
 8000fb0:	601a      	str	r2, [r3, #0]
		    gear = (vl / 20) + 1;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <Task_Control+0x60>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2114      	movs	r1, #20
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff f941 	bl	8000240 <__divsi3>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <Task_Control+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
		}
		printf("T2\r\n");
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <Task_Control+0x6c>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f003 fc87 	bl	80048dc <puts>
		vTaskDelay(60);  // Execute periodically
 8000fce:	203c      	movs	r0, #60	@ 0x3c
 8000fd0:	f001 ffdc 	bl	8002f8c <vTaskDelay>
		if (!paqueteListo) {
 8000fd4:	e7d8      	b.n	8000f88 <Task_Control+0x8>
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	200000c4 	.word	0x200000c4
 8000fe0:	200000b8 	.word	0x200000b8
 8000fe4:	200000bc 	.word	0x200000bc
 8000fe8:	200000c0 	.word	0x200000c0
 8000fec:	0800648c 	.word	0x0800648c

08000ff0 <Task_PWM_Update>:
	}
}

void Task_PWM_Update(void *pvParameters) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    for (;;) {
        Update_PWM_From_Velocity(vl);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <Task_PWM_Update+0x2c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 fc27 	bl	8001850 <Update_PWM_From_Velocity>
        paqueteListo = 0;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <Task_PWM_Update+0x30>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
        printf("T3\r\n");
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <Task_PWM_Update+0x34>)
 800100a:	0018      	movs	r0, r3
 800100c:	f003 fc66 	bl	80048dc <puts>
        vTaskDelay(240); // Prevent 100% CPU usage
 8001010:	20f0      	movs	r0, #240	@ 0xf0
 8001012:	f001 ffbb 	bl	8002f8c <vTaskDelay>
        Update_PWM_From_Velocity(vl);
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	e7ee      	b.n	8000ff8 <Task_PWM_Update+0x8>
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	200000b8 	.word	0x200000b8
 8001020:	20000000 	.word	0x20000000
 8001024:	08006490 	.word	0x08006490

08001028 <Task_Display>:
    }
}

void Task_Display(void *pvParameters) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    for (;;) {
        LCD_Clear();
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fcb9 	bl	80009a8 <LCD_Write_Cmd>
        LCD_Set_Cursor(1, 1);
 8001036:	2101      	movs	r1, #1
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fce1 	bl	8000a00 <LCD_Set_Cursor>
        LCD_Put_Str("Spd:");
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <Task_Display+0x78>)
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fd0c 	bl	8000a5e <LCD_Put_Str>
        LCD_Put_Num(vl);
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <Task_Display+0x7c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b21b      	sxth	r3, r3
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fd34 	bl	8000aba <LCD_Put_Num>

        LCD_Set_Cursor(1, 9);
 8001052:	2109      	movs	r1, #9
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff fcd3 	bl	8000a00 <LCD_Set_Cursor>
        LCD_Put_Str("G:");
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <Task_Display+0x80>)
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fcfe 	bl	8000a5e <LCD_Put_Str>
        LCD_Put_Num(gear);
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <Task_Display+0x84>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b21b      	sxth	r3, r3
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff fd26 	bl	8000aba <LCD_Put_Num>

        LCD_Set_Cursor(2, 1);
 800106e:	2101      	movs	r1, #1
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff fcc5 	bl	8000a00 <LCD_Set_Cursor>
        LCD_Put_Str("RPM:");
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <Task_Display+0x88>)
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fcf0 	bl	8000a5e <LCD_Put_Str>
        LCD_Put_Num(rpm);
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <Task_Display+0x8c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b21b      	sxth	r3, r3
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fd18 	bl	8000aba <LCD_Put_Num>
        printf("T5\r\n");
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <Task_Display+0x90>)
 800108c:	0018      	movs	r0, r3
 800108e:	f003 fc25 	bl	80048dc <puts>
        vTaskDelay(320);
 8001092:	23a0      	movs	r3, #160	@ 0xa0
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	0018      	movs	r0, r3
 8001098:	f001 ff78 	bl	8002f8c <vTaskDelay>
        LCD_Clear();
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	e7c7      	b.n	8001030 <Task_Display+0x8>
 80010a0:	08006494 	.word	0x08006494
 80010a4:	200000b8 	.word	0x200000b8
 80010a8:	0800649c 	.word	0x0800649c
 80010ac:	200000c0 	.word	0x200000c0
 80010b0:	080064a0 	.word	0x080064a0
 80010b4:	200000bc 	.word	0x200000bc
 80010b8:	080064a8 	.word	0x080064a8

080010bc <Task_Transmit>:
    }
}


void Task_Transmit(void *pvParameters) {
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b08b      	sub	sp, #44	@ 0x2c
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    for (;;) {
        uint8_t tx_buffer[32];
        sprintf((char*)tx_buffer, "ADC:%d BTN:%d\r\n", acceleration, button_state);
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <Task_Transmit+0x44>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <Task_Transmit+0x48>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	490e      	ldr	r1, [pc, #56]	@ (8001108 <Task_Transmit+0x4c>)
 80010ce:	2408      	movs	r4, #8
 80010d0:	1938      	adds	r0, r7, r4
 80010d2:	f003 fc0d 	bl	80048f0 <siprintf>
        USER_USART1_Transmit(tx_buffer, strlen((char*)tx_buffer));
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff f815 	bl	8000108 <strlen>
 80010de:	0003      	movs	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 fc68 	bl	80019bc <USER_USART1_Transmit>
        printf("T4\r\n");
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <Task_Transmit+0x50>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f003 fbf4 	bl	80048dc <puts>
        vTaskDelay(120);
 80010f4:	2078      	movs	r0, #120	@ 0x78
 80010f6:	f001 ff49 	bl	8002f8c <vTaskDelay>
    for (;;) {
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	e7e2      	b.n	80010c4 <Task_Transmit+0x8>
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	200000c4 	.word	0x200000c4
 8001104:	200000c8 	.word	0x200000c8
 8001108:	080064ac 	.word	0x080064ac
 800110c:	080064bc 	.word	0x080064bc

08001110 <Task_ADC_Init>:
    }
}

void Task_ADC_Init(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	USER_ADC_Init();          // ADC
 8001114:	f7ff f980 	bl	8000418 <USER_ADC_Init>
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_MspInit+0x50>)
 8001128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <HAL_MspInit+0x50>)
 800112c:	2101      	movs	r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	641a      	str	r2, [r3, #64]	@ 0x40
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_MspInit+0x50>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	2201      	movs	r2, #1
 8001138:	4013      	ands	r3, r2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x50>)
 8001140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_MspInit+0x50>)
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	0549      	lsls	r1, r1, #21
 8001148:	430a      	orrs	r2, r1
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_MspInit+0x50>)
 800114e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	055b      	lsls	r3, r3, #21
 8001154:	4013      	ands	r3, r2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800115a:	2302      	movs	r3, #2
 800115c:	425b      	negs	r3, r3
 800115e:	2200      	movs	r2, #0
 8001160:	2103      	movs	r1, #3
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fe52 	bl	8001e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d843      	bhi.n	8001212 <HAL_InitTick+0x9e>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	0019      	movs	r1, r3
 8001190:	2016      	movs	r0, #22
 8001192:	f000 fe3b 	bl	8001e0c <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001196:	2016      	movs	r0, #22
 8001198:	f000 fe4d 	bl	8001e36 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <HAL_InitTick+0xb8>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <HAL_InitTick+0xbc>)
 80011a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <HAL_InitTick+0xbc>)
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	02c9      	lsls	r1, r1, #11
 80011ac:	430a      	orrs	r2, r1
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <HAL_InitTick+0xbc>)
 80011b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	02db      	lsls	r3, r3, #11
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011be:	2310      	movs	r3, #16
 80011c0:	18fa      	adds	r2, r7, r3
 80011c2:	2314      	movs	r3, #20
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f000 fef9 	bl	8001fc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ce:	f000 fedf 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 80011d2:	0003      	movs	r3, r0
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d8:	4916      	ldr	r1, [pc, #88]	@ (8001234 <HAL_InitTick+0xc0>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f7fe ffa6 	bl	800012c <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	3b01      	subs	r3, #1
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_InitTick+0xc4>)
 80011e8:	4a14      	ldr	r2, [pc, #80]	@ (800123c <HAL_InitTick+0xc8>)
 80011ea:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0xc4>)
 80011ee:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <HAL_InitTick+0xcc>)
 80011f0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_InitTick+0xc4>)
 80011f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011f6:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_InitTick+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_InitTick+0xc4>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_InitTick+0xc4>)
 8001206:	0018      	movs	r0, r3
 8001208:	f000 ff08 	bl	800201c <HAL_TIM_Base_Init>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d108      	bne.n	8001222 <HAL_InitTick+0xae>
 8001210:	e001      	b.n	8001216 <HAL_InitTick+0xa2>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e006      	b.n	8001224 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_InitTick+0xc4>)
 8001218:	0018      	movs	r0, r3
 800121a:	f000 ff5f 	bl	80020dc <HAL_TIM_Base_Start_IT>
 800121e:	0003      	movs	r3, r0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0xb0>
  }

  /* Return function status */
  return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b00c      	add	sp, #48	@ 0x30
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000020 	.word	0x20000020
 8001230:	40021000 	.word	0x40021000
 8001234:	000f4240 	.word	0x000f4240
 8001238:	200000cc 	.word	0x200000cc
 800123c:	40014800 	.word	0x40014800
 8001240:	000003e7 	.word	0x000003e7

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	019b      	lsls	r3, r3, #6
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fdfb 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <TIM17_IRQHandler+0x14>)
 800126e:	0018      	movs	r0, r3
 8001270:	f000 ff82 	bl	8002178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	200000cc 	.word	0x200000cc

08001280 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001292:	e000      	b.n	8001296 <_read+0x16>
 8001294:	bf00      	nop
 8001296:	0001      	movs	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
  }

  return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b006      	add	sp, #24
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	425b      	negs	r3, r3
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	0192      	lsls	r2, r2, #6
 80012de:	605a      	str	r2, [r3, #4]
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_isatty>:

int _isatty(int file)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f003 fcce 	bl	8004ce4 <__errno>
 8001348:	0003      	movs	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	2301      	movs	r3, #1
 8001350:	425b      	negs	r3, r3
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	18d2      	adds	r2, r2, r3
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <_sbrk+0x64>)
 8001364:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b006      	add	sp, #24
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20003000 	.word	0x20003000
 8001374:	00000400 	.word	0x00000400
 8001378:	20000118 	.word	0x20000118
 800137c:	20002388 	.word	0x20002388

08001380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <SystemInit+0x14>)
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	0512      	lsls	r2, r2, #20
 800138a:	609a      	str	r2, [r3, #8]
#endif
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <USER_TIM3_PWM_Init>:
#include <stdint.h>
#include "user_tim.h"
#include "main.h"
#include "user_uart.h"

void USER_TIM3_PWM_Init( void ){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/* STEP 0 Enable the clock signal for the TIM3 and GPIOB peripherals */
	RCC->IOPENR  |= (0x1UL << 1);
 800139c:	4b7b      	ldr	r3, [pc, #492]	@ (800158c <USER_TIM3_PWM_Init+0x1f4>)
 800139e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a0:	4b7a      	ldr	r3, [pc, #488]	@ (800158c <USER_TIM3_PWM_Init+0x1f4>)
 80013a2:	2102      	movs	r1, #2
 80013a4:	430a      	orrs	r2, r1
 80013a6:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC->APBENR1 |= (0x1UL << 1);
 80013a8:	4b78      	ldr	r3, [pc, #480]	@ (800158c <USER_TIM3_PWM_Init+0x1f4>)
 80013aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ac:	4b77      	ldr	r3, [pc, #476]	@ (800158c <USER_TIM3_PWM_Init+0x1f4>)
 80013ae:	2102      	movs	r1, #2
 80013b0:	430a      	orrs	r2, r1
 80013b2:	63da      	str	r2, [r3, #60]	@ 0x3c

	// PB4 (CH1 - AF1)
	GPIOB->AFR[0] &= ~(0xEUL << 16U);
 80013b4:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013b6:	6a1a      	ldr	r2, [r3, #32]
 80013b8:	4b75      	ldr	r3, [pc, #468]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013ba:	4976      	ldr	r1, [pc, #472]	@ (8001594 <USER_TIM3_PWM_Init+0x1fc>)
 80013bc:	400a      	ands	r2, r1
 80013be:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  (0x1UL << 16U);
 80013c0:	4b73      	ldr	r3, [pc, #460]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	4b72      	ldr	r3, [pc, #456]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013c6:	2180      	movs	r1, #128	@ 0x80
 80013c8:	0249      	lsls	r1, r1, #9
 80013ca:	430a      	orrs	r2, r1
 80013cc:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR &= ~(0x3UL << 8U);
 80013ce:	4b70      	ldr	r3, [pc, #448]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013d4:	4970      	ldr	r1, [pc, #448]	@ (8001598 <USER_TIM3_PWM_Init+0x200>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~(1U << 4U);
 80013da:	4b6d      	ldr	r3, [pc, #436]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4b6c      	ldr	r3, [pc, #432]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013e0:	2110      	movs	r1, #16
 80013e2:	438a      	bics	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]
	GPIOB->MODER &= ~(0x1UL << 8U);
 80013e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b69      	ldr	r3, [pc, #420]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013ec:	496b      	ldr	r1, [pc, #428]	@ (800159c <USER_TIM3_PWM_Init+0x204>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |=  (0x2UL << 8U);
 80013f2:	4b67      	ldr	r3, [pc, #412]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b66      	ldr	r3, [pc, #408]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	0089      	lsls	r1, r1, #2
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]

	// PB5 (CH2 - AF1)
	GPIOB->AFR[0] &= ~( 0xEUL << 20U );
 8001400:	4b63      	ldr	r3, [pc, #396]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	4b62      	ldr	r3, [pc, #392]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001406:	4966      	ldr	r1, [pc, #408]	@ (80015a0 <USER_TIM3_PWM_Init+0x208>)
 8001408:	400a      	ands	r2, r1
 800140a:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  ( 0x1UL << 20U );
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	4b5f      	ldr	r3, [pc, #380]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	0349      	lsls	r1, r1, #13
 8001416:	430a      	orrs	r2, r1
 8001418:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~( 0x3UL <<  10U );
 800141a:	4b5d      	ldr	r3, [pc, #372]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	4b5c      	ldr	r3, [pc, #368]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001420:	4960      	ldr	r1, [pc, #384]	@ (80015a4 <USER_TIM3_PWM_Init+0x20c>)
 8001422:	400a      	ands	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~( 0x1UL <<  5U );
 8001426:	4b5a      	ldr	r3, [pc, #360]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800142c:	2120      	movs	r1, #32
 800142e:	438a      	bics	r2, r1
 8001430:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x1UL <<  10U );
 8001432:	4b57      	ldr	r3, [pc, #348]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b56      	ldr	r3, [pc, #344]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001438:	495b      	ldr	r1, [pc, #364]	@ (80015a8 <USER_TIM3_PWM_Init+0x210>)
 800143a:	400a      	ands	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x2UL <<  10U );
 800143e:	4b54      	ldr	r3, [pc, #336]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	0109      	lsls	r1, r1, #4
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

	// PB0 (CH3 - AF3)
	GPIOB->AFR[0] &= ~( 0xEUL << 0U );
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800144e:	6a1a      	ldr	r2, [r3, #32]
 8001450:	4b4f      	ldr	r3, [pc, #316]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001452:	210e      	movs	r1, #14
 8001454:	438a      	bics	r2, r1
 8001456:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  ( 0x1UL << 0U);
 8001458:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	4b4c      	ldr	r3, [pc, #304]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~( 0x3UL << 0U);
 8001464:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800146a:	2103      	movs	r1, #3
 800146c:	438a      	bics	r2, r1
 800146e:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~( 0x1UL << 0U);
 8001470:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x1UL << 0U);
 800147c:	4b44      	ldr	r3, [pc, #272]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001482:	2101      	movs	r1, #1
 8001484:	438a      	bics	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x2UL << 0U);
 8001488:	4b41      	ldr	r3, [pc, #260]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800148e:	2102      	movs	r1, #2
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

	// PB1 (CH4 - AF3)
	GPIOB->AFR[0] &= ~(0xEUL << 4U);
 8001494:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 800149a:	21e0      	movs	r1, #224	@ 0xe0
 800149c:	438a      	bics	r2, r1
 800149e:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  (0x1UL << 4U);
 80014a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014a2:	6a1a      	ldr	r2, [r3, #32]
 80014a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014a6:	2110      	movs	r1, #16
 80014a8:	430a      	orrs	r2, r1
 80014aa:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~(0x3UL << 2U);
 80014ac:	4b38      	ldr	r3, [pc, #224]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014b2:	210c      	movs	r1, #12
 80014b4:	438a      	bics	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~(0x1UL << 1U);
 80014b8:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014be:	2102      	movs	r1, #2
 80014c0:	438a      	bics	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~(0x1UL << 2U);
 80014c4:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014ca:	2104      	movs	r1, #4
 80014cc:	438a      	bics	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  (0x2UL << 2U);
 80014d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <USER_TIM3_PWM_Init+0x1f8>)
 80014d6:	2108      	movs	r1, #8
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

	/* STEP 1. Configure the clock source (internal) */
	TIM3->SMCR	&= ~(0x1UL << 16U) &  ~(0x7UL <<  0U);
 80014dc:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 80014e2:	4933      	ldr	r1, [pc, #204]	@ (80015b0 <USER_TIM3_PWM_Init+0x218>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]

	/* STEP 2. Configure the counter mode, the auto-reload and the overflow UEV-event  */
	TIM3->CR1 &= ~(0x3UL << 5U)
 80014e8:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 80014ee:	2176      	movs	r1, #118	@ 0x76
 80014f0:	438a      	bics	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
			  &  ~(0x1UL << 4U)
			  &  ~(0x1UL << 2U)
			  &  ~(0x1UL << 1U);
	TIM3->CR1 |=  (0x1UL << 7U);
 80014f4:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

	/* STEP 3. Configure the prescaler, the period and the duty cycle register values */
	TIM3->PSC = 0U;
 8001500:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 47999U;
 8001506:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001508:	4a2a      	ldr	r2, [pc, #168]	@ (80015b4 <USER_TIM3_PWM_Init+0x21c>)
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR1 = 0U;
 800150c:	4b27      	ldr	r3, [pc, #156]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800150e:	2200      	movs	r2, #0
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0U;
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001514:	2200      	movs	r2, #0
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = 0U;
 8001518:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0U;
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001520:	2200      	movs	r2, #0
 8001522:	641a      	str	r2, [r3, #64]	@ 0x40

	/* STEP 4. Configure the PWM mode, the compare register load and channel direction */
	TIM3->CCMR1		&= ~( 0x1UL << 24U )
 8001524:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800152a:	4923      	ldr	r1, [pc, #140]	@ (80015b8 <USER_TIM3_PWM_Init+0x220>)
 800152c:	400a      	ands	r2, r1
 800152e:	619a      	str	r2, [r3, #24]
					&  ~( 0x1UL << 12U ) //		Selects PWM 1 mode for CH2
					&  ~( 0x1UL << 16U )
					&  ~( 0x1UL <<  4U ) //		Selects PWM 1 mode for CH1
					&  ~( 0x3UL <<  8U ) //		Selects CH2 as output
					&  ~( 0x3UL <<  0U );//		Selects CH1 as output
	TIM3->CCMR1		|=  ( 0x6UL << 12U ) //		Selects PWM 1 mode for CH2
 8001530:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001536:	4921      	ldr	r1, [pc, #132]	@ (80015bc <USER_TIM3_PWM_Init+0x224>)
 8001538:	430a      	orrs	r2, r1
 800153a:	619a      	str	r2, [r3, #24]
					|   ( 0x1UL << 11U ) //		CCR2 loads on the UEV event
					|   ( 0x6UL <<  4U ) //		Selects PWM 1 mode for CH1
					|   ( 0x1UL <<  3U );//		CCR1 loads on the UEV event
	TIM3->CCMR2		&= ~( 0x1UL << 24U )
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001542:	491d      	ldr	r1, [pc, #116]	@ (80015b8 <USER_TIM3_PWM_Init+0x220>)
 8001544:	400a      	ands	r2, r1
 8001546:	61da      	str	r2, [r3, #28]
					&  ~( 0x1UL << 12U ) //		Selects PWM 1 mode for CH4
					&  ~( 0x1UL << 16U )
					&  ~( 0x1UL <<  4U ) //		Selects PWM 1 mode for CH3
					&  ~( 0x3UL <<  8U ) //		Selects CH4 as output
					&  ~( 0x3UL <<  0U );//		Selects CH3 as output
	TIM3->CCMR2		|=  ( 0x6UL << 12U ) //		Selects PWM 1 mode for CH4
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800154e:	491b      	ldr	r1, [pc, #108]	@ (80015bc <USER_TIM3_PWM_Init+0x224>)
 8001550:	430a      	orrs	r2, r1
 8001552:	61da      	str	r2, [r3, #28]
					|   ( 0x1UL << 11U ) //		CCR4 loads on the UEV event
					|   ( 0x6UL <<  4U ) //		Selects PWM 1 mode for CH3
					|   ( 0x1UL <<  3U );//		CCR3 loads on the UEV event

	/* STEP 5. Generate the UEV-event to load the registers */
	TIM3->EGR |=  ( 0x1UL <<  0U );
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	615a      	str	r2, [r3, #20]

	/* STEP 6. Enable the PWM signal output and set the polarity */
	TIM3->CCER		&= ~( 0x1UL << 15U ) //		for CH4 output mode, this bit must be cleared
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001566:	4916      	ldr	r1, [pc, #88]	@ (80015c0 <USER_TIM3_PWM_Init+0x228>)
 8001568:	400a      	ands	r2, r1
 800156a:	621a      	str	r2, [r3, #32]
					&  ~( 0x1UL <<  9U ) //		OC3 active high
					&  ~( 0x1UL <<  7U ) //		for CH2 output mode, this bit must be cleared
					&  ~( 0x1UL <<  5U ) //		OC2 active high
					&  ~( 0x1UL <<  3U ) //		for CH1 output mode, this bit must be cleared
					&  ~( 0x1UL <<  1U );//		OC1 active high
	TIM3->CCER		|=  ( 0x1UL << 12U ) //		OC4 signal is output on the corresponding pin
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 8001572:	4914      	ldr	r1, [pc, #80]	@ (80015c4 <USER_TIM3_PWM_Init+0x22c>)
 8001574:	430a      	orrs	r2, r1
 8001576:	621a      	str	r2, [r3, #32]
					|   ( 0x1UL <<  8U )//		OC3 signal is output on the corresponding pin
					|   ( 0x1UL <<  4U )//		OC2 signal is output on the corresponding pin
					|   ( 0x1UL <<  0U );//		OC1 signal is output on the corresponding pin

	/* STEP 7. Enable the Timer to start counting */
	TIM3->CR1 |=  ( 0x1UL <<  0U );
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <USER_TIM3_PWM_Init+0x214>)
 800157e:	2101      	movs	r1, #1
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	40021000 	.word	0x40021000
 8001590:	50000400 	.word	0x50000400
 8001594:	fff1ffff 	.word	0xfff1ffff
 8001598:	fffffcff 	.word	0xfffffcff
 800159c:	fffffeff 	.word	0xfffffeff
 80015a0:	ff1fffff 	.word	0xff1fffff
 80015a4:	fffff3ff 	.word	0xfffff3ff
 80015a8:	fffffbff 	.word	0xfffffbff
 80015ac:	40000400 	.word	0x40000400
 80015b0:	fffefff8 	.word	0xfffefff8
 80015b4:	0000bb7f 	.word	0x0000bb7f
 80015b8:	fefeecec 	.word	0xfefeecec
 80015bc:	00006868 	.word	0x00006868
 80015c0:	ffff5555 	.word	0xffff5555
 80015c4:	00001111 	.word	0x00001111

080015c8 <USER_TIM14_Init>:

void USER_TIM14_Init(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	RCC->APBENR2 |=  (0x1UL <<  15U);
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <USER_TIM14_Init+0x30>)
 80015ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <USER_TIM14_Init+0x30>)
 80015d2:	2180      	movs	r1, #128	@ 0x80
 80015d4:	0209      	lsls	r1, r1, #8
 80015d6:	430a      	orrs	r2, r1
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM14->SMCR	 &= ~( 0x1UL << 16U)
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <USER_TIM14_Init+0x34>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <USER_TIM14_Init+0x34>)
 80015e0:	4907      	ldr	r1, [pc, #28]	@ (8001600 <USER_TIM14_Init+0x38>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
				 &  ~( 0x7UL << 0U);
	TIM14->CR1	 &= ~( 0x1UL << 7U)
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <USER_TIM14_Init+0x34>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <USER_TIM14_Init+0x34>)
 80015ec:	21f2      	movs	r1, #242	@ 0xf2
 80015ee:	438a      	bics	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
				 &  ~( 0x3UL << 5U)
				 &  ~( 0x1UL << 4U)
				 &  ~( 0x1UL << 1U);
}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40002000 	.word	0x40002000
 8001600:	fffefff8 	.word	0xfffefff8

08001604 <USER_TIM14_Delay>:

void USER_TIM14_Delay(uint16_t ms) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	1dbb      	adds	r3, r7, #6
 800160e:	801a      	strh	r2, [r3, #0]
	TIM14->CR1 &= ~(1UL << 0);
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

	TIM14->PSC = 4799;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <USER_TIM14_Delay+0x80>)
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM14->ARR = ms * 100;
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	2264      	movs	r2, #100	@ 0x64
 8001628:	435a      	muls	r2, r3
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 800162c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->EGR |= (1UL << 0);
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	615a      	str	r2, [r3, #20]

	TIM14->SR &= ~(1UL << 0);
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001640:	2101      	movs	r1, #1
 8001642:	438a      	bics	r2, r1
 8001644:	611a      	str	r2, [r3, #16]

	TIM14->CR1 |= (1UL << 0);
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

	while (!(TIM14->SR & (1UL << 0)));
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d0fa      	beq.n	8001654 <USER_TIM14_Delay+0x50>

	TIM14->CR1 &= ~(1UL << 0);
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001664:	2101      	movs	r1, #1
 8001666:	438a      	bics	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
	TIM14->SR &= ~(1UL << 0);
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <USER_TIM14_Delay+0x7c>)
 8001670:	2101      	movs	r1, #1
 8001672:	438a      	bics	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	40002000 	.word	0x40002000
 8001684:	000012bf 	.word	0x000012bf

08001688 <USER_TIM14_Delay_us>:

void USER_TIM14_Delay_us(uint16_t us) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	0002      	movs	r2, r0
 8001690:	1dbb      	adds	r3, r7, #6
 8001692:	801a      	strh	r2, [r3, #0]
    TIM14->CR1 &= ~(1UL << 0);           // Deshabilita el timer
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 800169a:	2101      	movs	r1, #1
 800169c:	438a      	bics	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

    TIM14->PSC = 47;                     // Prescaler: (48 MHz / (47+1)) = 1 MHz → 1 tick = 1 µs
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016a2:	222f      	movs	r2, #47	@ 0x2f
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM14->ARR = us;                     // Número de microsegundos a esperar
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016a8:	1dba      	adds	r2, r7, #6
 80016aa:	8812      	ldrh	r2, [r2, #0]
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM14->EGR |= (1UL << 0);            // Generar evento de actualización
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	615a      	str	r2, [r3, #20]
    TIM14->SR &= ~(1UL << 0);            // Limpia bandera de actualización
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	611a      	str	r2, [r3, #16]
    TIM14->CR1 |= (1UL << 0);            // Habilita el timer
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016cc:	2101      	movs	r1, #1
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

    while (!(TIM14->SR & (1UL << 0)));   // Espera a que llegue el overflow
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2201      	movs	r2, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	d0fa      	beq.n	80016d4 <USER_TIM14_Delay_us+0x4c>

    TIM14->CR1 &= ~(1UL << 0);           // Deshabilita el timer
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	438a      	bics	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
    TIM14->SR &= ~(1UL << 0);            // Limpia bandera nuevamente
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <USER_TIM14_Delay_us+0x78>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	438a      	bics	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]
}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b002      	add	sp, #8
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	40002000 	.word	0x40002000

08001704 <USER_TIM16_Init>:

void USER_TIM16_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    // 1. Habilitar el reloj de TIM16 (APBENR2 bit 17)
    RCC->APBENR2 |= (0x1UL << 17U);
 8001708:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <USER_TIM16_Init+0xa0>)
 800170a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <USER_TIM16_Init+0xa0>)
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	0289      	lsls	r1, r1, #10
 8001712:	430a      	orrs	r2, r1
 8001714:	641a      	str	r2, [r3, #64]	@ 0x40

    // 2. Configuración básica del timer
    TIM16->SMCR &= ~(0x1UL << 16U);
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 800171c:	4923      	ldr	r1, [pc, #140]	@ (80017ac <USER_TIM16_Init+0xa8>)
 800171e:	400a      	ands	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
    TIM16->SMCR &= ~(0x7UL << 0U);
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001728:	2107      	movs	r1, #7
 800172a:	438a      	bics	r2, r1
 800172c:	609a      	str	r2, [r3, #8]

    TIM16->CR1 &= ~(0x1UL << 7U);
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001734:	2180      	movs	r1, #128	@ 0x80
 8001736:	438a      	bics	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
    TIM16->CR1 &= ~(0x3UL << 5U);
 800173a:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001740:	2160      	movs	r1, #96	@ 0x60
 8001742:	438a      	bics	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
    TIM16->CR1 &= ~(0x1UL << 4U);
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 800174c:	2110      	movs	r1, #16
 800174e:	438a      	bics	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
    TIM16->CR1 &= ~(0x1UL << 1U);
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001758:	2102      	movs	r1, #2
 800175a:	438a      	bics	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

    // 3. Configurar prescaler y periodo para el intervalo deseado
    TIM16->PSC = 4799;
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001760:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <USER_TIM16_Init+0xac>)
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM16->ARR = 99;
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001766:	2263      	movs	r2, #99	@ 0x63
 8001768:	62da      	str	r2, [r3, #44]	@ 0x2c

    // 4. Limpiar la bandera UIF antes de habilitar interrupción
	TIM16->SR &= ~(1UL << 0);
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001770:	2101      	movs	r1, #1
 8001772:	438a      	bics	r2, r1
 8001774:	611a      	str	r2, [r3, #16]

	// 5. Habilitar la interrupción de "update" (UIE)
	TIM16->DIER |= (1UL << 0);
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	60da      	str	r2, [r3, #12]

	NVIC->ISER[0] |= (1UL << 21);
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <USER_TIM16_Init+0xb0>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <USER_TIM16_Init+0xb0>)
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0389      	lsls	r1, r1, #14
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

	// 7. Arrancar el timer
	TIM16->CR1 |= (1UL << 0);
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <USER_TIM16_Init+0xa4>)
 8001796:	2101      	movs	r1, #1
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40014400 	.word	0x40014400
 80017ac:	fffeffff 	.word	0xfffeffff
 80017b0:	000012bf 	.word	0x000012bf
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <USER_TIM17_Init_Timer>:

void USER_TIM17_Init_Timer(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    RCC->APBENR2 |= (1UL << 18U);   // Enable TIM17 clock
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <USER_TIM17_Init_Timer+0x54>)
 80017be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <USER_TIM17_Init_Timer+0x54>)
 80017c2:	2180      	movs	r1, #128	@ 0x80
 80017c4:	02c9      	lsls	r1, r1, #11
 80017c6:	430a      	orrs	r2, r1
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM17->CR1   &= ~(1UL << 7U);   // Auto-reload not buffered
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	438a      	bics	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
    TIM17->CR1   &= ~(1UL << 1U);   // UEV enabled
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017dc:	2102      	movs	r1, #2
 80017de:	438a      	bics	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
    TIM17->PSC    = 1499U;          // Prescaler -> 1 tick = 32 µs (approx)
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <USER_TIM17_Init_Timer+0x5c>)
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM17->ARR    = 65535U;         // Max count
 80017e8:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <USER_TIM17_Init_Timer+0x60>)
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM17->SR    &= ~(1UL << 0U);   // Clear overflow flag
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	438a      	bics	r2, r1
 80017f8:	611a      	str	r2, [r3, #16]
    TIM17->CR1   |= (1UL << 0U);    // Enable counter
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <USER_TIM17_Init_Timer+0x58>)
 8001800:	2101      	movs	r1, #1
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	40014800 	.word	0x40014800
 8001814:	000005db 	.word	0x000005db
 8001818:	0000ffff 	.word	0x0000ffff

0800181c <TIM16_IRQHandler>:
	TIM3->CCR2 = new_duty;
	TIM3->CCR3 = new_duty;
	TIM3->CCR4 = new_duty;
}

void TIM16_IRQHandler(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    if (TIM16->SR & (1UL << 0)) {
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <TIM16_IRQHandler+0x2c>)
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d00a      	beq.n	8001840 <TIM16_IRQHandler+0x24>
        TIM16->SR &= ~(1UL << 0);
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <TIM16_IRQHandler+0x2c>)
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <TIM16_IRQHandler+0x2c>)
 8001830:	2101      	movs	r1, #1
 8001832:	438a      	bics	r2, r1
 8001834:	611a      	str	r2, [r3, #16]
        tim16_tick++;
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <TIM16_IRQHandler+0x30>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <TIM16_IRQHandler+0x30>)
 800183e:	601a      	str	r2, [r3, #0]
    }
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	40014400 	.word	0x40014400
 800184c:	200000b4 	.word	0x200000b4

08001850 <Update_PWM_From_Velocity>:

void Update_PWM_From_Velocity(int velocity_percent) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    if (velocity_percent < 0) velocity_percent = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	da01      	bge.n	8001862 <Update_PWM_From_Velocity+0x12>
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
    if (velocity_percent > 100) velocity_percent = 100;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b64      	cmp	r3, #100	@ 0x64
 8001866:	dd01      	ble.n	800186c <Update_PWM_From_Velocity+0x1c>
 8001868:	2364      	movs	r3, #100	@ 0x64
 800186a:	607b      	str	r3, [r7, #4]

    uint16_t duty = (velocity_percent * (TIM3->ARR + 1)) / 100;
 800186c:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <Update_PWM_From_Velocity+0x60>)
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	3301      	adds	r3, #1
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4353      	muls	r3, r2
 8001876:	2164      	movs	r1, #100	@ 0x64
 8001878:	0018      	movs	r0, r3
 800187a:	f7fe fc57 	bl	800012c <__udivsi3>
 800187e:	0003      	movs	r3, r0
 8001880:	001a      	movs	r2, r3
 8001882:	210e      	movs	r1, #14
 8001884:	187b      	adds	r3, r7, r1
 8001886:	801a      	strh	r2, [r3, #0]

    TIM3->CCR1 = duty;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <Update_PWM_From_Velocity+0x60>)
 800188a:	187a      	adds	r2, r7, r1
 800188c:	8812      	ldrh	r2, [r2, #0]
 800188e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = duty;
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <Update_PWM_From_Velocity+0x60>)
 8001892:	187a      	adds	r2, r7, r1
 8001894:	8812      	ldrh	r2, [r2, #0]
 8001896:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = duty;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <Update_PWM_From_Velocity+0x60>)
 800189a:	187a      	adds	r2, r7, r1
 800189c:	8812      	ldrh	r2, [r2, #0]
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = duty;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <Update_PWM_From_Velocity+0x60>)
 80018a2:	187a      	adds	r2, r7, r1
 80018a4:	8812      	ldrh	r2, [r2, #0]
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b004      	add	sp, #16
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40000400 	.word	0x40000400

080018b4 <USER_USART1_Init>:

void USART1_SendByte(uint8_t byte);
volatile char uart_rx_buffer[UART_RX_BUFFER_SIZE];
volatile uint8_t uart_rx_index = 0;

void USER_USART1_Init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    // Activar reloj de GPIOA y USART1
    RCC->IOPENR  |= (1 << 0);   // GPIOAEN
 80018b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <USER_USART1_Init+0xbc>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <USER_USART1_Init+0xbc>)
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (1 << 14);  // USART1EN
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <USER_USART1_Init+0xbc>)
 80018c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c8:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <USER_USART1_Init+0xbc>)
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	01c9      	lsls	r1, r1, #7
 80018ce:	430a      	orrs	r2, r1
 80018d0:	641a      	str	r2, [r3, #64]	@ 0x40

    // Configurar PA9 (TX) y PA10 (RX) en modo alterno AF1
    GPIOA->AFR[1] &= ~((0xF << 4) | (0xF << 8));
 80018d2:	23a0      	movs	r3, #160	@ 0xa0
 80018d4:	05db      	lsls	r3, r3, #23
 80018d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d8:	23a0      	movs	r3, #160	@ 0xa0
 80018da:	05db      	lsls	r3, r3, #23
 80018dc:	4925      	ldr	r1, [pc, #148]	@ (8001974 <USER_USART1_Init+0xc0>)
 80018de:	400a      	ands	r2, r1
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFR[1] |=  (0x1 << 4) | (0x1 << 8);
 80018e2:	23a0      	movs	r3, #160	@ 0xa0
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e8:	23a0      	movs	r3, #160	@ 0xa0
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	2188      	movs	r1, #136	@ 0x88
 80018ee:	0049      	lsls	r1, r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24

    GPIOA->PUPDR &= ~((0x3 << 18) | (0x3 << 20));
 80018f4:	23a0      	movs	r3, #160	@ 0xa0
 80018f6:	05db      	lsls	r3, r3, #23
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	23a0      	movs	r3, #160	@ 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	491e      	ldr	r1, [pc, #120]	@ (8001978 <USER_USART1_Init+0xc4>)
 8001900:	400a      	ands	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
    GPIOA->OTYPER &= ~((1 << 9) | (1 << 10));
 8001904:	23a0      	movs	r3, #160	@ 0xa0
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	23a0      	movs	r3, #160	@ 0xa0
 800190c:	05db      	lsls	r3, r3, #23
 800190e:	491b      	ldr	r1, [pc, #108]	@ (800197c <USER_USART1_Init+0xc8>)
 8001910:	400a      	ands	r2, r1
 8001912:	605a      	str	r2, [r3, #4]

    GPIOA->MODER &= ~((0x3 << 18) | (0x3 << 20));
 8001914:	23a0      	movs	r3, #160	@ 0xa0
 8001916:	05db      	lsls	r3, r3, #23
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	23a0      	movs	r3, #160	@ 0xa0
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	4916      	ldr	r1, [pc, #88]	@ (8001978 <USER_USART1_Init+0xc4>)
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  (0x2 << 18) | (0x2 << 20);
 8001924:	23a0      	movs	r3, #160	@ 0xa0
 8001926:	05db      	lsls	r3, r3, #23
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	23a0      	movs	r3, #160	@ 0xa0
 800192c:	05db      	lsls	r3, r3, #23
 800192e:	21a0      	movs	r1, #160	@ 0xa0
 8001930:	0389      	lsls	r1, r1, #14
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    // Configuración USART1: 8 bits, 1 stop bit, baudrate
    USART1->CR1 &= ~((1 << 28) | (1 << 12));
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <USER_USART1_Init+0xcc>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <USER_USART1_Init+0xcc>)
 800193c:	4911      	ldr	r1, [pc, #68]	@ (8001984 <USER_USART1_Init+0xd0>)
 800193e:	400a      	ands	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
    USART1->CR2 &= ~(0x3 << 12);
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <USER_USART1_Init+0xcc>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <USER_USART1_Init+0xcc>)
 8001948:	490f      	ldr	r1, [pc, #60]	@ (8001988 <USER_USART1_Init+0xd4>)
 800194a:	400a      	ands	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
    USART1->BRR  = 417;  // Para 115200 baudios @ 48 MHz
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <USER_USART1_Init+0xcc>)
 8001950:	22a2      	movs	r2, #162	@ 0xa2
 8001952:	32ff      	adds	r2, #255	@ 0xff
 8001954:	60da      	str	r2, [r3, #12]

    // Habilitar USART, transmisión y recepción
    USART1->CR1 |= (1 << 0) | (1 << 2) | (1 << 3) | (1 << 5);
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <USER_USART1_Init+0xcc>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <USER_USART1_Init+0xcc>)
 800195c:	212d      	movs	r1, #45	@ 0x2d
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

    NVIC->ISER[0] = (1UL << 27);
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <USER_USART1_Init+0xd8>)
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0512      	lsls	r2, r2, #20
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	fffff00f 	.word	0xfffff00f
 8001978:	ffc3ffff 	.word	0xffc3ffff
 800197c:	fffff9ff 	.word	0xfffff9ff
 8001980:	40013800 	.word	0x40013800
 8001984:	efffefff 	.word	0xefffefff
 8001988:	ffffcfff 	.word	0xffffcfff
 800198c:	e000e100 	.word	0xe000e100

08001990 <USER_USART1_Send_8bit>:

void USER_USART1_Send_8bit(uint8_t Data) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	0002      	movs	r2, r0
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	701a      	strb	r2, [r3, #0]
	while (!( USART1->ISR & (0x1UL << 7U)))
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <USER_USART1_Send_8bit+0x28>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	4013      	ands	r3, r2
 80019a6:	d0fa      	beq.n	800199e <USER_USART1_Send_8bit+0xe>
		; // wait until next data can be written
	USART1->TDR = Data; // Data to send
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <USER_USART1_Send_8bit+0x28>)
 80019aa:	1dfa      	adds	r2, r7, #7
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40013800 	.word	0x40013800

080019bc <USER_USART1_Transmit>:

void USER_USART1_Transmit(uint8_t *pData, uint16_t size) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	000a      	movs	r2, r1
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e009      	b.n	80019e4 <USER_USART1_Transmit+0x28>
		USER_USART1_Send_8bit(*pData++);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff ffd9 	bl	8001990 <USER_USART1_Send_8bit>
	for (int i = 0; i < size; i++) {
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	1cbb      	adds	r3, r7, #2
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <USER_USART1_Transmit+0x14>
	}
}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b004      	add	sp, #16
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <USART1_IRQHandler>:
	while (!( USART1->ISR & (1UL << 5U)))
		; // Espera hasta que RXNE esté en 1 (dato recibido)
	return (uint8_t) (USART1->RDR & 0xFF); // Lee el dato recibido
}

void USART1_IRQHandler(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {  // Dato recibido
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <USART1_IRQHandler+0x68>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2220      	movs	r2, #32
 8001a04:	4013      	ands	r3, r2
 8001a06:	d027      	beq.n	8001a58 <USART1_IRQHandler+0x60>
        char c = USART1->RDR & 0xFF;
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <USART1_IRQHandler+0x68>)
 8001a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	701a      	strb	r2, [r3, #0]

        if (c == '\n' || uart_rx_index >= UART_RX_BUFFER_SIZE - 1) {
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b0a      	cmp	r3, #10
 8001a16:	d004      	beq.n	8001a22 <USART1_IRQHandler+0x2a>
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <USART1_IRQHandler+0x6c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a20:	d90e      	bls.n	8001a40 <USART1_IRQHandler+0x48>
            uart_rx_buffer[uart_rx_index] = '\0';  // Finalizar string
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <USART1_IRQHandler+0x6c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	001a      	movs	r2, r3
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <USART1_IRQHandler+0x70>)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	5499      	strb	r1, [r3, r2]
            parse_and_display((const char*)uart_rx_buffer);  // Procesar
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <USART1_IRQHandler+0x70>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f83e 	bl	8001ab4 <parse_and_display>
            uart_rx_index = 0;  // Reiniciar índice
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <USART1_IRQHandler+0x6c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
        } else {
            uart_rx_buffer[uart_rx_index++] = c;
        }
    }
}
 8001a3e:	e00b      	b.n	8001a58 <USART1_IRQHandler+0x60>
            uart_rx_buffer[uart_rx_index++] = c;
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <USART1_IRQHandler+0x6c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	b2d1      	uxtb	r1, r2
 8001a4a:	4a06      	ldr	r2, [pc, #24]	@ (8001a64 <USART1_IRQHandler+0x6c>)
 8001a4c:	7011      	strb	r1, [r2, #0]
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <USART1_IRQHandler+0x70>)
 8001a52:	1dfa      	adds	r2, r7, #7
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	545a      	strb	r2, [r3, r1]
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013800 	.word	0x40013800
 8001a64:	2000015c 	.word	0x2000015c
 8001a68:	2000011c 	.word	0x2000011c

08001a6c <_write>:

int _write(int file, char *ptr, int len) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e00e      	b.n	8001a9c <_write+0x30>
		while (!( USART2->ISR & (0x1UL << 7U)))
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <_write+0x44>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2280      	movs	r2, #128	@ 0x80
 8001a86:	4013      	ands	r3, r2
 8001a88:	d0fa      	beq.n	8001a80 <_write+0x14>
			;
		USART2->TDR = *ptr++;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	60ba      	str	r2, [r7, #8]
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <_write+0x44>)
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbec      	blt.n	8001a7e <_write+0x12>
	}
	return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b006      	add	sp, #24
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <parse_and_display>:

void parse_and_display(const char *line) {
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	6078      	str	r0, [r7, #4]
    int spd_entero = 0, rpm_entero = 0, gear_entero = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

    if (sscanf(line, "SPD:%d RPM:%d G:%d", &spd_entero, &rpm_entero, &gear_entero) == 3) {
 8001ac8:	2310      	movs	r3, #16
 8001aca:	18fc      	adds	r4, r7, r3
 8001acc:	2314      	movs	r3, #20
 8001ace:	18fa      	adds	r2, r7, r3
 8001ad0:	4910      	ldr	r1, [pc, #64]	@ (8001b14 <parse_and_display+0x60>)
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	0023      	movs	r3, r4
 8001adc:	f002 ff2a 	bl	8004934 <siscanf>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d111      	bne.n	8001b0a <parse_and_display+0x56>
        vl = spd_entero / 10;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	210a      	movs	r1, #10
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7fe fba8 	bl	8000240 <__divsi3>
 8001af0:	0003      	movs	r3, r0
 8001af2:	001a      	movs	r2, r3
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <parse_and_display+0x64>)
 8001af6:	601a      	str	r2, [r3, #0]
        rpm = rpm_entero;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <parse_and_display+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
        gear = gear_entero;
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <parse_and_display+0x6c>)
 8001b02:	601a      	str	r2, [r3, #0]
        paqueteListo = 1;
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <parse_and_display+0x70>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
    }
}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b007      	add	sp, #28
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	080064c0 	.word	0x080064c0
 8001b18:	200000b8 	.word	0x200000b8
 8001b1c:	200000bc 	.word	0x200000bc
 8001b20:	200000c0 	.word	0x200000c0
 8001b24:	20000000 	.word	0x20000000

08001b28 <USER_UART2_Init>:

void USER_UART2_Init( void ){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  RCC->IOPENR   |=  ( 0x1UL <<  0U ); // GPIOA clock enabled
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c60 <USER_UART2_Init+0x138>)
 8001b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b30:	4b4b      	ldr	r3, [pc, #300]	@ (8001c60 <USER_UART2_Init+0x138>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->APBENR1  |=  ( 0x1UL << 17U ); // USART2 clock enabled
 8001b38:	4b49      	ldr	r3, [pc, #292]	@ (8001c60 <USER_UART2_Init+0x138>)
 8001b3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b3c:	4b48      	ldr	r3, [pc, #288]	@ (8001c60 <USER_UART2_Init+0x138>)
 8001b3e:	2180      	movs	r1, #128	@ 0x80
 8001b40:	0289      	lsls	r1, r1, #10
 8001b42:	430a      	orrs	r2, r1
 8001b44:	63da      	str	r2, [r3, #60]	@ 0x3c
  GPIOA->AFR[0]   &= ~( 0xEUL <<  8U );
 8001b46:	23a0      	movs	r3, #160	@ 0xa0
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	23a0      	movs	r3, #160	@ 0xa0
 8001b4e:	05db      	lsls	r3, r3, #23
 8001b50:	4944      	ldr	r1, [pc, #272]	@ (8001c64 <USER_UART2_Init+0x13c>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	621a      	str	r2, [r3, #32]
  GPIOA->AFR[0]   |=  ( 0x1UL <<  8U ); // Select the AF1 for the PA2
 8001b56:	23a0      	movs	r3, #160	@ 0xa0
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	23a0      	movs	r3, #160	@ 0xa0
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	0049      	lsls	r1, r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	621a      	str	r2, [r3, #32]
  GPIOA->PUPDR  &= ~( 0x3UL <<  4U ); // Clear pull-up/pull-down bits for PA2
 8001b68:	23a0      	movs	r3, #160	@ 0xa0
 8001b6a:	05db      	lsls	r3, r3, #23
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	23a0      	movs	r3, #160	@ 0xa0
 8001b70:	05db      	lsls	r3, r3, #23
 8001b72:	2130      	movs	r1, #48	@ 0x30
 8001b74:	438a      	bics	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~( 0x1UL <<  2U ); // Clear output type bit for PA2
 8001b78:	23a0      	movs	r3, #160	@ 0xa0
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	23a0      	movs	r3, #160	@ 0xa0
 8001b80:	05db      	lsls	r3, r3, #23
 8001b82:	2104      	movs	r1, #4
 8001b84:	438a      	bics	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
  GPIOA->MODER  &= ~( 0x1UL <<  4U );
 8001b88:	23a0      	movs	r3, #160	@ 0xa0
 8001b8a:	05db      	lsls	r3, r3, #23
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	23a0      	movs	r3, #160	@ 0xa0
 8001b90:	05db      	lsls	r3, r3, #23
 8001b92:	2110      	movs	r1, #16
 8001b94:	438a      	bics	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
  GPIOA->MODER  |=  ( 0x2UL <<  4U ); // Set PA2 as AF
 8001b98:	23a0      	movs	r3, #160	@ 0xa0
 8001b9a:	05db      	lsls	r3, r3, #23
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	23a0      	movs	r3, #160	@ 0xa0
 8001ba0:	05db      	lsls	r3, r3, #23
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0]   &= ~( 0xEUL << 12U );
 8001ba8:	23a0      	movs	r3, #160	@ 0xa0
 8001baa:	05db      	lsls	r3, r3, #23
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	23a0      	movs	r3, #160	@ 0xa0
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	492d      	ldr	r1, [pc, #180]	@ (8001c68 <USER_UART2_Init+0x140>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	621a      	str	r2, [r3, #32]
  GPIOA->AFR[0]   |=  ( 0x1UL << 12U ); // Select the AF1 for the PA3
 8001bb8:	23a0      	movs	r3, #160	@ 0xa0
 8001bba:	05db      	lsls	r3, r3, #23
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	23a0      	movs	r3, #160	@ 0xa0
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	0149      	lsls	r1, r1, #5
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	621a      	str	r2, [r3, #32]
  GPIOA->PUPDR  &= ~( 0x3UL <<  6U ); // Clear pull-up/pull-down bits for PA3
 8001bca:	23a0      	movs	r3, #160	@ 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	23a0      	movs	r3, #160	@ 0xa0
 8001bd2:	05db      	lsls	r3, r3, #23
 8001bd4:	21c0      	movs	r1, #192	@ 0xc0
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER &= ~( 0x1UL <<  3U ); // Clear output type bit for PA3
 8001bda:	23a0      	movs	r3, #160	@ 0xa0
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	23a0      	movs	r3, #160	@ 0xa0
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	2108      	movs	r1, #8
 8001be6:	438a      	bics	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
  GPIOA->MODER  &= ~( 0x1UL <<  6U );
 8001bea:	23a0      	movs	r3, #160	@ 0xa0
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	23a0      	movs	r3, #160	@ 0xa0
 8001bf2:	05db      	lsls	r3, r3, #23
 8001bf4:	2140      	movs	r1, #64	@ 0x40
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
  GPIOA->MODER  |=  ( 0x2UL <<  6U ); // Set PA3 as AF
 8001bfa:	23a0      	movs	r3, #160	@ 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	23a0      	movs	r3, #160	@ 0xa0
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
  USART2->CR1   &= ~( 0x1UL << 28U ); // 8-bit word length
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c10:	4917      	ldr	r1, [pc, #92]	@ (8001c70 <USER_UART2_Init+0x148>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
  USART2->CR1   &= ~( 0x1UL << 12U ); // 8-bit word length
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c1c:	4915      	ldr	r1, [pc, #84]	@ (8001c74 <USER_UART2_Init+0x14c>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
  USART2->BRR   =   ( 48000000 / 115200 ); // Desired baud rate
 8001c22:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c24:	22d0      	movs	r2, #208	@ 0xd0
 8001c26:	0052      	lsls	r2, r2, #1
 8001c28:	60da      	str	r2, [r3, #12]
  USART2->CR2   &= ~( 0x3UL << 12U ); // 1 stop bit
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c30:	4911      	ldr	r1, [pc, #68]	@ (8001c78 <USER_UART2_Init+0x150>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
  USART2->CR1   |=  ( 0x1UL <<  0U ); // USART is enabled
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
  USART2->CR1   |=  ( 0x1UL <<  3U ); // Transmitter is enabled
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c48:	2108      	movs	r1, #8
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
  USART2->CR1   |=  ( 0x1UL <<  2U ); // Receiver is enabled
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <USER_UART2_Init+0x144>)
 8001c54:	2104      	movs	r1, #4
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	fffff1ff 	.word	0xfffff1ff
 8001c68:	ffff1fff 	.word	0xffff1fff
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	efffffff 	.word	0xefffffff
 8001c74:	ffffefff 	.word	0xffffefff
 8001c78:	ffffcfff 	.word	0xffffcfff

08001c7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c7c:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c80:	f7ff fb7e 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c86:	e003      	b.n	8001c90 <LoopCopyDataInit>

08001c88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001c8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c8e:	3104      	adds	r1, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c90:	480a      	ldr	r0, [pc, #40]	@ (8001cbc <LoopForever+0xa>)
  ldr r3, =_edata
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <LoopForever+0xe>)
  adds r2, r0, r1
 8001c94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c98:	d3f6      	bcc.n	8001c88 <CopyDataInit>
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <LoopForever+0x12>)
  b LoopFillZerobss
 8001c9c:	e002      	b.n	8001ca4 <LoopFillZerobss>

08001c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ca0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca2:	3204      	adds	r2, #4

08001ca4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <LoopForever+0x16>)
  cmp r2, r3
 8001ca6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ca8:	d3f9      	bcc.n	8001c9e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001caa:	f003 f821 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cae:	f7ff f831 	bl	8000d14 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   r0, =_estack
 8001cb4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001cb8:	0800671c 	.word	0x0800671c
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cc0:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8001cc4:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8001cc8:	20002384 	.word	0x20002384

08001ccc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_IRQHandler>

08001cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f7ff fa4a 	bl	8001174 <HAL_InitTick>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e001      	b.n	8001cf0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cec:	f7ff fa18 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	781b      	ldrb	r3, [r3, #0]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	0002      	movs	r2, r0
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d0e:	d809      	bhi.n	8001d24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	001a      	movs	r2, r3
 8001d16:	231f      	movs	r3, #31
 8001d18:	401a      	ands	r2, r3
 8001d1a:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <__NVIC_EnableIRQ+0x30>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4091      	lsls	r1, r2
 8001d20:	000a      	movs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	0002      	movs	r2, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d44:	d828      	bhi.n	8001d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d46:	4a2f      	ldr	r2, [pc, #188]	@ (8001e04 <__NVIC_SetPriority+0xd4>)
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	33c0      	adds	r3, #192	@ 0xc0
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	589b      	ldr	r3, [r3, r2]
 8001d56:	1dfa      	adds	r2, r7, #7
 8001d58:	7812      	ldrb	r2, [r2, #0]
 8001d5a:	0011      	movs	r1, r2
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	400a      	ands	r2, r1
 8001d60:	00d2      	lsls	r2, r2, #3
 8001d62:	21ff      	movs	r1, #255	@ 0xff
 8001d64:	4091      	lsls	r1, r2
 8001d66:	000a      	movs	r2, r1
 8001d68:	43d2      	mvns	r2, r2
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	019b      	lsls	r3, r3, #6
 8001d72:	22ff      	movs	r2, #255	@ 0xff
 8001d74:	401a      	ands	r2, r3
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	4003      	ands	r3, r0
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d84:	481f      	ldr	r0, [pc, #124]	@ (8001e04 <__NVIC_SetPriority+0xd4>)
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	33c0      	adds	r3, #192	@ 0xc0
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d96:	e031      	b.n	8001dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d98:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <__NVIC_SetPriority+0xd8>)
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	0019      	movs	r1, r3
 8001da0:	230f      	movs	r3, #15
 8001da2:	400b      	ands	r3, r1
 8001da4:	3b08      	subs	r3, #8
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3306      	adds	r3, #6
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	18d3      	adds	r3, r2, r3
 8001dae:	3304      	adds	r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1dfa      	adds	r2, r7, #7
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	0011      	movs	r1, r2
 8001db8:	2203      	movs	r2, #3
 8001dba:	400a      	ands	r2, r1
 8001dbc:	00d2      	lsls	r2, r2, #3
 8001dbe:	21ff      	movs	r1, #255	@ 0xff
 8001dc0:	4091      	lsls	r1, r2
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	43d2      	mvns	r2, r2
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	019b      	lsls	r3, r3, #6
 8001dce:	22ff      	movs	r2, #255	@ 0xff
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2303      	movs	r3, #3
 8001dda:	4003      	ands	r3, r0
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de0:	4809      	ldr	r0, [pc, #36]	@ (8001e08 <__NVIC_SetPriority+0xd8>)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	001c      	movs	r4, r3
 8001de8:	230f      	movs	r3, #15
 8001dea:	4023      	ands	r3, r4
 8001dec:	3b08      	subs	r3, #8
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	430a      	orrs	r2, r1
 8001df2:	3306      	adds	r3, #6
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	18c3      	adds	r3, r0, r3
 8001df8:	3304      	adds	r3, #4
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	46c0      	nop			@ (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b003      	add	sp, #12
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	210f      	movs	r1, #15
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	0011      	movs	r1, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff ff81 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff ff57 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	0002      	movs	r2, r0
 8001e60:	1dbb      	adds	r3, r7, #6
 8001e62:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	1dba      	adds	r2, r7, #6
 8001e6a:	8812      	ldrh	r2, [r2, #0]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d008      	beq.n	8001e82 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e72:	1dba      	adds	r2, r7, #6
 8001e74:	8812      	ldrh	r2, [r2, #0]
 8001e76:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e78:	1dbb      	adds	r3, r7, #6
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f815 	bl	8001eac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	1dba      	adds	r2, r7, #6
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d008      	beq.n	8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e90:	1dba      	adds	r2, r7, #6
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f810 	bl	8001ec0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001ea0:	46c0      	nop			@ (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021800 	.word	0x40021800

08001eac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	1dbb      	adds	r3, r7, #6
 8001eca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x78>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2238      	movs	r2, #56	@ 0x38
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d10f      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x78>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0adb      	lsrs	r3, r3, #11
 8001eea:	2207      	movs	r2, #7
 8001eec:	4013      	ands	r3, r2
 8001eee:	2201      	movs	r2, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	4815      	ldr	r0, [pc, #84]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001efa:	f7fe f917 	bl	800012c <__udivsi3>
 8001efe:	0003      	movs	r3, r0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	e01e      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x78>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2238      	movs	r2, #56	@ 0x38
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d102      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x78>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2238      	movs	r2, #56	@ 0x38
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d103      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x78>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	@ 0x38
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	d103      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f36:	23fa      	movs	r3, #250	@ 0xfa
 8001f38:	01db      	lsls	r3, r3, #7
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	e001      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001f42:	687b      	ldr	r3, [r7, #4]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	02dc6c00 	.word	0x02dc6c00

08001f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f58:	f7ff ffbc 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001f5c:	0001      	movs	r1, r0
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f60:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	220f      	movs	r2, #15
 8001f66:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f6e:	221f      	movs	r2, #31
 8001f70:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f72:	000a      	movs	r2, r1
 8001f74:	40da      	lsrs	r2, r3
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x38>)
 8001f78:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x38>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08006538 	.word	0x08006538
 8001f8c:	2000001c 	.word	0x2000001c

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f98:	0001      	movs	r1, r0
 8001f9a:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0b1b      	lsrs	r3, r3, #12
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	58d3      	ldr	r3, [r2, r3]
 8001faa:	221f      	movs	r2, #31
 8001fac:	4013      	ands	r3, r2
 8001fae:	40d9      	lsrs	r1, r3
 8001fb0:	000b      	movs	r3, r1
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08006578 	.word	0x08006578

08001fc0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fd0:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_RCC_GetClockConfig+0x54>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	605a      	str	r2, [r3, #4]

#if defined(RCC_CR_SYSDIV)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CR & RCC_CR_SYSDIV);
#else
  RCC_ClkInitStruct->SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
#endif /* RCC_CR_SYSDIV */

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCC_GetClockConfig+0x54>)
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	23f0      	movs	r3, #240	@ 0xf0
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	401a      	ands	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_RCC_GetClockConfig+0x54>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	23e0      	movs	r3, #224	@ 0xe0
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_RCC_GetClockConfig+0x58>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2207      	movs	r2, #7
 8002004:	401a      	ands	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e04a      	b.n	80020c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	223d      	movs	r2, #61	@ 0x3d
 8002032:	5c9b      	ldrb	r3, [r3, r2]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223c      	movs	r2, #60	@ 0x3c
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f841 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	223d      	movs	r2, #61	@ 0x3d
 800204e:	2102      	movs	r1, #2
 8002050:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	0019      	movs	r1, r3
 800205c:	0010      	movs	r0, r2
 800205e:	f000 f9bb 	bl	80023d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2248      	movs	r2, #72	@ 0x48
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	223e      	movs	r2, #62	@ 0x3e
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223f      	movs	r2, #63	@ 0x3f
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	@ 0x40
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2241      	movs	r2, #65	@ 0x41
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2242      	movs	r2, #66	@ 0x42
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2243      	movs	r2, #67	@ 0x43
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2244      	movs	r2, #68	@ 0x44
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2245      	movs	r2, #69	@ 0x45
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2246      	movs	r2, #70	@ 0x46
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2247      	movs	r2, #71	@ 0x47
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223d      	movs	r2, #61	@ 0x3d
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	223d      	movs	r2, #61	@ 0x3d
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e037      	b.n	8002164 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	223d      	movs	r2, #61	@ 0x3d
 80020f8:	2102      	movs	r1, #2
 80020fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a16      	ldr	r2, [pc, #88]	@ (800216c <HAL_TIM_Base_Start_IT+0x90>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x44>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <HAL_TIM_Base_Start_IT+0x94>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d116      	bne.n	800214e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <HAL_TIM_Base_Start_IT+0x98>)
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d016      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x84>
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	429a      	cmp	r2, r3
 800213a:	d011      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	e008      	b.n	8002160 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e000      	b.n	8002162 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002160:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40000400 	.word	0x40000400
 8002174:	00010007 	.word	0x00010007

08002178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2202      	movs	r2, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d021      	beq.n	80021dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2202      	movs	r2, #2
 800219c:	4013      	ands	r3, r2
 800219e:	d01d      	beq.n	80021dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2203      	movs	r2, #3
 80021a6:	4252      	negs	r2, r2
 80021a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2203      	movs	r2, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f8f2 	bl	80023a8 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e007      	b.n	80021d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f8e5 	bl	8002398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f8f1 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2204      	movs	r2, #4
 80021e0:	4013      	ands	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2204      	movs	r2, #4
 80021e8:	4013      	ands	r3, r2
 80021ea:	d01e      	beq.n	800222a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2205      	movs	r2, #5
 80021f2:	4252      	negs	r2, r2
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	23c0      	movs	r3, #192	@ 0xc0
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 f8cb 	bl	80023a8 <HAL_TIM_IC_CaptureCallback>
 8002212:	e007      	b.n	8002224 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 f8be 	bl	8002398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f000 f8ca 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2208      	movs	r2, #8
 800222e:	4013      	ands	r3, r2
 8002230:	d021      	beq.n	8002276 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2208      	movs	r2, #8
 8002236:	4013      	ands	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2209      	movs	r2, #9
 8002240:	4252      	negs	r2, r2
 8002242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2204      	movs	r2, #4
 8002248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2203      	movs	r2, #3
 8002252:	4013      	ands	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f8a5 	bl	80023a8 <HAL_TIM_IC_CaptureCallback>
 800225e:	e007      	b.n	8002270 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 f898 	bl	8002398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f8a4 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2210      	movs	r2, #16
 800227a:	4013      	ands	r3, r2
 800227c:	d022      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2210      	movs	r2, #16
 8002282:	4013      	ands	r3, r2
 8002284:	d01e      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2211      	movs	r2, #17
 800228c:	4252      	negs	r2, r2
 800228e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2208      	movs	r2, #8
 8002294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	23c0      	movs	r3, #192	@ 0xc0
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f87e 	bl	80023a8 <HAL_TIM_IC_CaptureCallback>
 80022ac:	e007      	b.n	80022be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 f871 	bl	8002398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f87d 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d00c      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d008      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4252      	negs	r2, r2
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f851 	bl	8002388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2280      	movs	r2, #128	@ 0x80
 80022ea:	4013      	ands	r3, r2
 80022ec:	d104      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	019b      	lsls	r3, r3, #6
 80022f4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80022f6:	d00b      	beq.n	8002310 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2280      	movs	r2, #128	@ 0x80
 80022fc:	4013      	ands	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_TIM_IRQHandler+0x208>)
 8002306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f8de 	bl	80024cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	2380      	movs	r3, #128	@ 0x80
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d00b      	beq.n	8002332 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	4013      	ands	r3, r2
 8002320:	d007      	beq.n	8002332 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_TIM_IRQHandler+0x20c>)
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 f8d5 	bl	80024dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2240      	movs	r2, #64	@ 0x40
 8002336:	4013      	ands	r3, r2
 8002338:	d00c      	beq.n	8002354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2240      	movs	r2, #64	@ 0x40
 800233e:	4013      	ands	r3, r2
 8002340:	d008      	beq.n	8002354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2241      	movs	r2, #65	@ 0x41
 8002348:	4252      	negs	r2, r2
 800234a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f83a 	bl	80023c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2220      	movs	r2, #32
 8002358:	4013      	ands	r3, r2
 800235a:	d00c      	beq.n	8002376 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	4013      	ands	r3, r2
 8002362:	d008      	beq.n	8002376 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2221      	movs	r2, #33	@ 0x21
 800236a:	4252      	negs	r2, r2
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f8a3 	bl	80024bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	ffffdf7f 	.word	0xffffdf7f
 8002384:	fffffeff 	.word	0xfffffeff

08002388 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002390:	46c0      	nop			@ (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <TIM_Base_SetConfig+0xcc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d003      	beq.n	80023f8 <TIM_Base_SetConfig+0x20>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <TIM_Base_SetConfig+0xd0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d108      	bne.n	800240a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2270      	movs	r2, #112	@ 0x70
 80023fc:	4393      	bics	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a25      	ldr	r2, [pc, #148]	@ (80024a4 <TIM_Base_SetConfig+0xcc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <TIM_Base_SetConfig+0x5a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a24      	ldr	r2, [pc, #144]	@ (80024a8 <TIM_Base_SetConfig+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0x5a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a23      	ldr	r2, [pc, #140]	@ (80024ac <TIM_Base_SetConfig+0xd4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0x5a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <TIM_Base_SetConfig+0xd8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0x5a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a21      	ldr	r2, [pc, #132]	@ (80024b4 <TIM_Base_SetConfig+0xdc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <TIM_Base_SetConfig+0xe0>)
 8002436:	4013      	ands	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	4393      	bics	r3, r2
 800244a:	001a      	movs	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0f      	ldr	r2, [pc, #60]	@ (80024a4 <TIM_Base_SetConfig+0xcc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <TIM_Base_SetConfig+0xa4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <TIM_Base_SetConfig+0xd8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0xa4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0f      	ldr	r2, [pc, #60]	@ (80024b4 <TIM_Base_SetConfig+0xdc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2204      	movs	r2, #4
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40002000 	.word	0x40002000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800
 80024b8:	fffffcff 	.word	0xfffffcff

080024bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024e4:	46c0      	nop			@ (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Handler+0x1c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80024f4:	f001 faac 	bl	8003a50 <xTaskGetSchedulerState>
 80024f8:	0003      	movs	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024fe:	f001 fecb 	bl	8004298 <xPortSysTickHandler>
  }
}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	e000e010 	.word	0xe000e010

0800250c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a06      	ldr	r2, [pc, #24]	@ (8002534 <vApplicationGetIdleTaskMemory+0x28>)
 800251c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <vApplicationGetIdleTaskMemory+0x2c>)
 8002522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2280      	movs	r2, #128	@ 0x80
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b004      	add	sp, #16
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	20000160 	.word	0x20000160
 8002538:	20000208 	.word	0x20000208

0800253c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a06      	ldr	r2, [pc, #24]	@ (8002564 <vApplicationGetTimerTaskMemory+0x28>)
 800254c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <vApplicationGetTimerTaskMemory+0x2c>)
 8002552:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	@ 0x80
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	20000408 	.word	0x20000408
 8002568:	200004b0 	.word	0x200004b0

0800256c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3308      	adds	r3, #8
 8002578:	001a      	movs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	4252      	negs	r2, r2
 8002584:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3308      	adds	r3, #8
 800258a:	001a      	movs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3308      	adds	r3, #8
 8002594:	001a      	movs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}

080025be <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	d103      	bne.n	80025dc <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e00c      	b.n	80025f6 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3308      	adds	r3, #8
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e002      	b.n	80025ea <vListInsert+0x2c>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d2f6      	bcs.n	80025e4 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}

0800262a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6852      	ldr	r2, [r2, #4]
 800264a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d103      	bne.n	800265e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}

0800267a <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800267a:	b5b0      	push	{r4, r5, r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002684:	2301      	movs	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <xQueueGenericReset+0x1e>
 8002692:	b672      	cpsid	i
 8002694:	46c0      	nop			@ (mov r8, r8)
 8002696:	e7fd      	b.n	8002694 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d100      	bne.n	80026a0 <xQueueGenericReset+0x26>
 800269e:	e06a      	b.n	8002776 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d066      	beq.n	8002776 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	2400      	movs	r4, #0
 80026b2:	0c15      	lsrs	r5, r2, #16
 80026b4:	0c19      	lsrs	r1, r3, #16
 80026b6:	b2a8      	uxth	r0, r5
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d104      	bne.n	80026c6 <xQueueGenericReset+0x4c>
 80026bc:	b288      	uxth	r0, r1
 80026be:	2800      	cmp	r0, #0
 80026c0:	d013      	beq.n	80026ea <xQueueGenericReset+0x70>
 80026c2:	1c10      	adds	r0, r2, #0
 80026c4:	e004      	b.n	80026d0 <xQueueGenericReset+0x56>
 80026c6:	b289      	uxth	r1, r1
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d10d      	bne.n	80026e8 <xQueueGenericReset+0x6e>
 80026cc:	1c29      	adds	r1, r5, #0
 80026ce:	1c18      	adds	r0, r3, #0
 80026d0:	b292      	uxth	r2, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	435a      	muls	r2, r3
 80026d6:	b283      	uxth	r3, r0
 80026d8:	b289      	uxth	r1, r1
 80026da:	434b      	muls	r3, r1
 80026dc:	0c12      	lsrs	r2, r2, #16
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	141b      	asrs	r3, r3, #16
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d000      	beq.n	80026ea <xQueueGenericReset+0x70>
 80026e8:	2401      	movs	r4, #1
 80026ea:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80026ec:	d143      	bne.n	8002776 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80026ee:	f001 fd77 	bl	80041e0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	434b      	muls	r3, r1
 8002700:	18d2      	adds	r2, r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2200      	movs	r2, #0
 800270a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271c:	1e59      	subs	r1, r3, #1
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	434b      	muls	r3, r1
 8002724:	18d2      	adds	r2, r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2244      	movs	r2, #68	@ 0x44
 800272e:	21ff      	movs	r1, #255	@ 0xff
 8002730:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2245      	movs	r2, #69	@ 0x45
 8002736:	21ff      	movs	r1, #255	@ 0xff
 8002738:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10d      	bne.n	800275c <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	3310      	adds	r3, #16
 800274c:	0018      	movs	r0, r3
 800274e:	f000 ff71 	bl	8003634 <xTaskRemoveFromEventList>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d00c      	beq.n	8002770 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002756:	f001 fd33 	bl	80041c0 <vPortYield>
 800275a:	e009      	b.n	8002770 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	3310      	adds	r3, #16
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ff03 	bl	800256c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3324      	adds	r3, #36	@ 0x24
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fefe 	bl	800256c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002770:	f001 fd48 	bl	8004204 <vPortExitCritical>
 8002774:	e001      	b.n	800277a <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <xQueueGenericReset+0x10c>
 8002780:	b672      	cpsid	i
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	e7fd      	b.n	8002782 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bdb0      	pop	{r4, r5, r7, pc}

08002790 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <xQueueGenericCreateStatic+0x1e>
 80027a8:	b672      	cpsid	i
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	e7fd      	b.n	80027aa <xQueueGenericCreateStatic+0x1a>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d029      	beq.n	8002808 <xQueueGenericCreateStatic+0x78>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d026      	beq.n	8002808 <xQueueGenericCreateStatic+0x78>
            ( pxStaticQueue != NULL ) &&
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <xQueueGenericCreateStatic+0x78>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11a      	bne.n	8002808 <xQueueGenericCreateStatic+0x78>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80027d2:	2350      	movs	r3, #80	@ 0x50
 80027d4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b50      	cmp	r3, #80	@ 0x50
 80027da:	d002      	beq.n	80027e2 <xQueueGenericCreateStatic+0x52>
 80027dc:	b672      	cpsid	i
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	e7fd      	b.n	80027de <xQueueGenericCreateStatic+0x4e>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80027e2:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2246      	movs	r2, #70	@ 0x46
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027f0:	2328      	movs	r3, #40	@ 0x28
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781c      	ldrb	r4, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	0023      	movs	r3, r4
 8002802:	f000 f80c 	bl	800281e <prvInitialiseNewQueue>
 8002806:	e005      	b.n	8002814 <xQueueGenericCreateStatic+0x84>
        }
        else
        {
            configASSERT( pxNewQueue );
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <xQueueGenericCreateStatic+0x84>
 800280e:	b672      	cpsid	i
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	e7fd      	b.n	8002810 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002814:	697b      	ldr	r3, [r7, #20]
    }
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b007      	add	sp, #28
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	001a      	movs	r2, r3
 800282c:	1cfb      	adds	r3, r7, #3
 800282e:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e002      	b.n	8002844 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2101      	movs	r1, #1
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff10 	bl	800267a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1cfa      	adds	r2, r7, #3
 800285e:	214c      	movs	r1, #76	@ 0x4c
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}

0800286c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	@ 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <xQueueReceive+0x20>
 8002886:	b672      	cpsid	i
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	e7fd      	b.n	8002888 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <xQueueReceive+0x2e>
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <xQueueReceive+0x32>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <xQueueReceive+0x34>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <xQueueReceive+0x3e>
 80028a4:	b672      	cpsid	i
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	e7fd      	b.n	80028a6 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028aa:	f001 f8d1 	bl	8003a50 <xTaskGetSchedulerState>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d102      	bne.n	80028b8 <xQueueReceive+0x4c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <xQueueReceive+0x50>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <xQueueReceive+0x52>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <xQueueReceive+0x5c>
 80028c2:	b672      	cpsid	i
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	e7fd      	b.n	80028c4 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028c8:	f001 fc8a 	bl	80041e0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01a      	beq.n	800290e <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	0011      	movs	r1, r2
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f87c 	bl	80029dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	3310      	adds	r3, #16
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 fe9b 	bl	8003634 <xTaskRemoveFromEventList>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002902:	f001 fc5d 	bl	80041c0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002906:	f001 fc7d 	bl	8004204 <vPortExitCritical>
                return pdPASS;
 800290a:	2301      	movs	r3, #1
 800290c:	e062      	b.n	80029d4 <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002914:	f001 fc76 	bl	8004204 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002918:	2300      	movs	r3, #0
 800291a:	e05b      	b.n	80029d4 <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002922:	2314      	movs	r3, #20
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	0018      	movs	r0, r3
 8002928:	f000 ff50 	bl	80037cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002930:	f001 fc68 	bl	8004204 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002934:	f000 fbb4 	bl	80030a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002938:	f001 fc52 	bl	80041e0 <vPortEnterCritical>
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2244      	movs	r2, #68	@ 0x44
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	b25b      	sxtb	r3, r3
 8002944:	3301      	adds	r3, #1
 8002946:	d103      	bne.n	8002950 <xQueueReceive+0xe4>
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2244      	movs	r2, #68	@ 0x44
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2245      	movs	r2, #69	@ 0x45
 8002954:	5c9b      	ldrb	r3, [r3, r2]
 8002956:	b25b      	sxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	d103      	bne.n	8002964 <xQueueReceive+0xf8>
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2245      	movs	r2, #69	@ 0x45
 8002960:	2100      	movs	r1, #0
 8002962:	5499      	strb	r1, [r3, r2]
 8002964:	f001 fc4e 	bl	8004204 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002968:	1d3a      	adds	r2, r7, #4
 800296a:	2314      	movs	r3, #20
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f000 ff3f 	bl	80037f4 <xTaskCheckForTimeOut>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d11e      	bne.n	80029b8 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f8b1 	bl	8002ae4 <prvIsQueueEmpty>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d011      	beq.n	80029aa <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	3324      	adds	r3, #36	@ 0x24
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	0011      	movs	r1, r2
 800298e:	0018      	movs	r0, r3
 8002990:	f000 fdf0 	bl	8003574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f846 	bl	8002a28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800299c:	f000 fb8c 	bl	80030b8 <xTaskResumeAll>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d191      	bne.n	80028c8 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 80029a4:	f001 fc0c 	bl	80041c0 <vPortYield>
 80029a8:	e78e      	b.n	80028c8 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 f83b 	bl	8002a28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029b2:	f000 fb81 	bl	80030b8 <xTaskResumeAll>
 80029b6:	e787      	b.n	80028c8 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f834 	bl	8002a28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029c0:	f000 fb7a 	bl	80030b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f88c 	bl	8002ae4 <prvIsQueueEmpty>
 80029cc:	1e03      	subs	r3, r0, #0
 80029ce:	d100      	bne.n	80029d2 <xQueueReceive+0x166>
 80029d0:	e77a      	b.n	80028c8 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80029d2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b00a      	add	sp, #40	@ 0x28
 80029da:	bd80      	pop	{r7, pc}

080029dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	18d2      	adds	r2, r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d303      	bcc.n	8002a10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68d9      	ldr	r1, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f002 f98f 	bl	8004d3e <memcpy>
    }
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a30:	f001 fbd6 	bl	80041e0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a34:	230f      	movs	r3, #15
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	2145      	movs	r1, #69	@ 0x45
 8002a3c:	5c52      	ldrb	r2, [r2, r1]
 8002a3e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a40:	e013      	b.n	8002a6a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3324      	adds	r3, #36	@ 0x24
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fdf0 	bl	8003634 <xTaskRemoveFromEventList>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d001      	beq.n	8002a5c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a58:	f000 ff22 	bl	80038a0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	dce5      	bgt.n	8002a42 <prvUnlockQueue+0x1a>
 8002a76:	e000      	b.n	8002a7a <prvUnlockQueue+0x52>
                    break;
 8002a78:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2245      	movs	r2, #69	@ 0x45
 8002a7e:	21ff      	movs	r1, #255	@ 0xff
 8002a80:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002a82:	f001 fbbf 	bl	8004204 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a86:	f001 fbab 	bl	80041e0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a8a:	230e      	movs	r3, #14
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	2144      	movs	r1, #68	@ 0x44
 8002a92:	5c52      	ldrb	r2, [r2, r1]
 8002a94:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a96:	e013      	b.n	8002ac0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d016      	beq.n	8002ace <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3310      	adds	r3, #16
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 fdc5 	bl	8003634 <xTaskRemoveFromEventList>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d001      	beq.n	8002ab2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8002aae:	f000 fef7 	bl	80038a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ab2:	210e      	movs	r1, #14
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac0:	230e      	movs	r3, #14
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	dce5      	bgt.n	8002a98 <prvUnlockQueue+0x70>
 8002acc:	e000      	b.n	8002ad0 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8002ace:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2244      	movs	r2, #68	@ 0x44
 8002ad4:	21ff      	movs	r1, #255	@ 0xff
 8002ad6:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002ad8:	f001 fb94 	bl	8004204 <vPortExitCritical>
}
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002aec:	f001 fb78 	bl	80041e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e001      	b.n	8002b02 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b02:	f001 fb7f 	bl	8004204 <vPortExitCritical>

    return xReturn;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b004      	add	sp, #16
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <vQueueAddToRegistry+0x1a>
 8002b24:	b672      	cpsid	i
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	e7fd      	b.n	8002b26 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d025      	beq.n	8002b7c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e01f      	b.n	8002b76 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b36:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <vQueueAddToRegistry+0x88>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	18d3      	adds	r3, r2, r3
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d105      	bne.n	8002b54 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	00da      	lsls	r2, r3, #3
 8002b4c:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <vQueueAddToRegistry+0x88>)
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	60bb      	str	r3, [r7, #8]
                    break;
 8002b52:	e013      	b.n	8002b7c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <vQueueAddToRegistry+0x60>
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <vQueueAddToRegistry+0x88>)
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	00d2      	lsls	r2, r2, #3
 8002b60:	58d3      	ldr	r3, [r2, r3]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	00da      	lsls	r2, r3, #3
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <vQueueAddToRegistry+0x88>)
 8002b6c:	18d3      	adds	r3, r2, r3
 8002b6e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d9dc      	bls.n	8002b36 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	200006b0 	.word	0x200006b0

08002b9c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bac:	f001 fb18 	bl	80041e0 <vPortEnterCritical>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2244      	movs	r2, #68	@ 0x44
 8002bb4:	5c9b      	ldrb	r3, [r3, r2]
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	d103      	bne.n	8002bc4 <vQueueWaitForMessageRestricted+0x28>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2244      	movs	r2, #68	@ 0x44
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2245      	movs	r2, #69	@ 0x45
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	d103      	bne.n	8002bd8 <vQueueWaitForMessageRestricted+0x3c>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2245      	movs	r2, #69	@ 0x45
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	5499      	strb	r1, [r3, r2]
 8002bd8:	f001 fb14 	bl	8004204 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3324      	adds	r3, #36	@ 0x24
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fce1 	bl	80035b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff ff17 	bl	8002a28 <prvUnlockQueue>
    }
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b006      	add	sp, #24
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002c02:	b590      	push	{r4, r7, lr}
 8002c04:	b08d      	sub	sp, #52	@ 0x34
 8002c06:	af04      	add	r7, sp, #16
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <xTaskCreateStatic+0x1a>
 8002c16:	b672      	cpsid	i
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	e7fd      	b.n	8002c18 <xTaskCreateStatic+0x16>
        configASSERT( pxTaskBuffer != NULL );
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <xTaskCreateStatic+0x26>
 8002c22:	b672      	cpsid	i
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	e7fd      	b.n	8002c24 <xTaskCreateStatic+0x22>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002c28:	23a8      	movs	r3, #168	@ 0xa8
 8002c2a:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2ba8      	cmp	r3, #168	@ 0xa8
 8002c30:	d002      	beq.n	8002c38 <xTaskCreateStatic+0x36>
 8002c32:	b672      	cpsid	i
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	e7fd      	b.n	8002c34 <xTaskCreateStatic+0x32>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c38:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d026      	beq.n	8002c8e <xTaskCreateStatic+0x8c>
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d023      	beq.n	8002c8e <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	22a8      	movs	r2, #168	@ 0xa8
 8002c4e:	2100      	movs	r1, #0
 8002c50:	0018      	movs	r0, r3
 8002c52:	f001 ff87 	bl	8004b64 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	22a5      	movs	r2, #165	@ 0xa5
 8002c60:	2102      	movs	r1, #2
 8002c62:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c64:	683c      	ldr	r4, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2318      	movs	r3, #24
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	0023      	movs	r3, r4
 8002c80:	f000 f85e 	bl	8002d40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f8f2 	bl	8002e70 <prvAddNewTaskToReadyList>
 8002c8c:	e001      	b.n	8002c92 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c92:	69bb      	ldr	r3, [r7, #24]
    }
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b009      	add	sp, #36	@ 0x24
 8002c9a:	bd90      	pop	{r4, r7, pc}

08002c9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b08d      	sub	sp, #52	@ 0x34
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	1dbb      	adds	r3, r7, #6
 8002caa:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cac:	1dbb      	adds	r3, r7, #6
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f001 fb2c 	bl	8004310 <pvPortMalloc>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cc2:	20a8      	movs	r0, #168	@ 0xa8
 8002cc4:	f001 fb24 	bl	8004310 <pvPortMalloc>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	22a8      	movs	r2, #168	@ 0xa8
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f001 ff43 	bl	8004b64 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ce4:	e006      	b.n	8002cf4 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f001 fbc9 	bl	8004480 <vPortFree>
 8002cee:	e001      	b.n	8002cf4 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01a      	beq.n	8002d30 <xTaskCreate+0x94>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	22a5      	movs	r2, #165	@ 0xa5
 8002cfe:	2100      	movs	r1, #0
 8002d00:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d02:	1dbb      	adds	r3, r7, #6
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	683c      	ldr	r4, [r7, #0]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9303      	str	r3, [sp, #12]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	9302      	str	r3, [sp, #8]
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	0023      	movs	r3, r4
 8002d1e:	f000 f80f 	bl	8002d40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f8a3 	bl	8002e70 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e002      	b.n	8002d36 <xTaskCreate+0x9a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d30:	2301      	movs	r3, #1
 8002d32:	425b      	negs	r3, r3
 8002d34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d36:	69bb      	ldr	r3, [r7, #24]
    }
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b009      	add	sp, #36	@ 0x24
 8002d3e:	bd90      	pop	{r4, r7, pc}

08002d40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	001a      	movs	r2, r3
 8002d58:	21a5      	movs	r1, #165	@ 0xa5
 8002d5a:	f001 ff03 	bl	8004b64 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	493e      	ldr	r1, [pc, #248]	@ (8002e60 <prvInitialiseNewTask+0x120>)
 8002d66:	468c      	mov	ip, r1
 8002d68:	4463      	add	r3, ip
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4393      	bics	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d002      	beq.n	8002d86 <prvInitialiseNewTask+0x46>
 8002d80:	b672      	cpsid	i
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	e7fd      	b.n	8002d82 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01f      	beq.n	8002dcc <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e013      	b.n	8002dba <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	18d3      	adds	r3, r2, r3
 8002d98:	7818      	ldrb	r0, [r3, #0]
 8002d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d9c:	2134      	movs	r1, #52	@ 0x34
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	185b      	adds	r3, r3, r1
 8002da4:	1c02      	adds	r2, r0, #0
 8002da6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3301      	adds	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d9e8      	bls.n	8002d92 <prvInitialiseNewTask+0x52>
 8002dc0:	e000      	b.n	8002dc4 <prvInitialiseNewTask+0x84>
            {
                break;
 8002dc2:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc6:	2243      	movs	r2, #67	@ 0x43
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b37      	cmp	r3, #55	@ 0x37
 8002dd0:	d902      	bls.n	8002dd8 <prvInitialiseNewTask+0x98>
 8002dd2:	b672      	cpsid	i
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	e7fd      	b.n	8002dd4 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2b37      	cmp	r3, #55	@ 0x37
 8002ddc:	d901      	bls.n	8002de2 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dde:	2337      	movs	r3, #55	@ 0x37
 8002de0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	3304      	adds	r3, #4
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7ff fbd8 	bl	80025a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff fbd3 	bl	80025a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e06:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2238      	movs	r2, #56	@ 0x38
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	3354      	adds	r3, #84	@ 0x54
 8002e1c:	224c      	movs	r2, #76	@ 0x4c
 8002e1e:	2100      	movs	r1, #0
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 fe9f 	bl	8004b64 <memset>
 8002e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e28:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <prvInitialiseNewTask+0x124>)
 8002e2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e68 <prvInitialiseNewTask+0x128>)
 8002e30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <prvInitialiseNewTask+0x12c>)
 8002e36:	661a      	str	r2, [r3, #96]	@ 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f001 f936 	bl	80040b0 <pxPortInitialiseStack>
 8002e44:	0002      	movs	r2, r0
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <prvInitialiseNewTask+0x116>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e54:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b006      	add	sp, #24
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	3fffffff 	.word	0x3fffffff
 8002e64:	20002238 	.word	0x20002238
 8002e68:	200022a0 	.word	0x200022a0
 8002e6c:	20002308 	.word	0x20002308

08002e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e78:	f001 f9b2 	bl	80041e0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f74 <prvAddNewTaskToReadyList+0x104>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <prvAddNewTaskToReadyList+0x104>)
 8002e84:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8002e86:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <prvAddNewTaskToReadyList+0x108>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f78 <prvAddNewTaskToReadyList+0x108>)
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e94:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <prvAddNewTaskToReadyList+0x104>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d110      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e9c:	f000 fd1a 	bl	80038d4 <prvInitialiseTaskLists>
 8002ea0:	e00d      	b.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ea2:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <prvAddNewTaskToReadyList+0x10c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eaa:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <prvAddNewTaskToReadyList+0x108>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d802      	bhi.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <prvAddNewTaskToReadyList+0x108>)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ebe:	4b30      	ldr	r3, [pc, #192]	@ (8002f80 <prvAddNewTaskToReadyList+0x110>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f80 <prvAddNewTaskToReadyList+0x110>)
 8002ec6:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f80 <prvAddNewTaskToReadyList+0x110>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f84 <prvAddNewTaskToReadyList+0x114>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d903      	bls.n	8002ee4 <prvAddNewTaskToReadyList+0x74>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee0:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <prvAddNewTaskToReadyList+0x114>)
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee8:	4927      	ldr	r1, [pc, #156]	@ (8002f88 <prvAddNewTaskToReadyList+0x118>)
 8002eea:	0013      	movs	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18cb      	adds	r3, r1, r3
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	3204      	adds	r2, #4
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	0013      	movs	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4a18      	ldr	r2, [pc, #96]	@ (8002f88 <prvAddNewTaskToReadyList+0x118>)
 8002f28:	189a      	adds	r2, r3, r2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	615a      	str	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f32:	4915      	ldr	r1, [pc, #84]	@ (8002f88 <prvAddNewTaskToReadyList+0x118>)
 8002f34:	0013      	movs	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	585b      	ldr	r3, [r3, r1]
 8002f3e:	1c58      	adds	r0, r3, #1
 8002f40:	4911      	ldr	r1, [pc, #68]	@ (8002f88 <prvAddNewTaskToReadyList+0x118>)
 8002f42:	0013      	movs	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f4c:	f001 f95a 	bl	8004204 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <prvAddNewTaskToReadyList+0x10c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f58:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <prvAddNewTaskToReadyList+0x108>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d201      	bcs.n	8002f6a <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f66:	f001 f92b 	bl	80041c0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b004      	add	sp, #16
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	20000bc4 	.word	0x20000bc4
 8002f78:	200006f0 	.word	0x200006f0
 8002f7c:	20000bd0 	.word	0x20000bd0
 8002f80:	20000be0 	.word	0x20000be0
 8002f84:	20000bcc 	.word	0x20000bcc
 8002f88:	200006f4 	.word	0x200006f4

08002f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d011      	beq.n	8002fc2 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <vTaskDelay+0x48>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <vTaskDelay+0x20>
 8002fa6:	b672      	cpsid	i
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	e7fd      	b.n	8002fa8 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8002fac:	f000 f878 	bl	80030a0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fd67 	bl	8003a88 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002fba:	f000 f87d 	bl	80030b8 <xTaskResumeAll>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <vTaskDelay+0x40>
        {
            portYIELD_WITHIN_API();
 8002fc8:	f001 f8fa 	bl	80041c0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000bec 	.word	0x20000bec

08002fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fe6:	003a      	movs	r2, r7
 8002fe8:	1d39      	adds	r1, r7, #4
 8002fea:	2308      	movs	r3, #8
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff fa8c 	bl	800250c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8002ff4:	683c      	ldr	r4, [r7, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	4920      	ldr	r1, [pc, #128]	@ (800307c <vTaskStartScheduler+0xa4>)
 8002ffc:	4820      	ldr	r0, [pc, #128]	@ (8003080 <vTaskStartScheduler+0xa8>)
 8002ffe:	9202      	str	r2, [sp, #8]
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	0022      	movs	r2, r4
 800300a:	f7ff fdfa 	bl	8002c02 <xTaskCreateStatic>
 800300e:	0002      	movs	r2, r0
 8003010:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <vTaskStartScheduler+0xac>)
 8003012:	601a      	str	r2, [r3, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8003014:	4b1b      	ldr	r3, [pc, #108]	@ (8003084 <vTaskStartScheduler+0xac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e001      	b.n	8003026 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d103      	bne.n	8003034 <vTaskStartScheduler+0x5c>
        {
            xReturn = xTimerCreateTimerTask();
 800302c:	f000 fd9a 	bl	8003b64 <xTimerCreateTimerTask>
 8003030:	0003      	movs	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d113      	bne.n	8003062 <vTaskStartScheduler+0x8a>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800303a:	b672      	cpsid	i

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <vTaskStartScheduler+0xb0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3354      	adds	r3, #84	@ 0x54
 8003042:	001a      	movs	r2, r3
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <vTaskStartScheduler+0xb4>)
 8003046:	601a      	str	r2, [r3, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <vTaskStartScheduler+0xb8>)
 800304a:	2201      	movs	r2, #1
 800304c:	4252      	negs	r2, r2
 800304e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003050:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <vTaskStartScheduler+0xbc>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <vTaskStartScheduler+0xc0>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800305c:	f001 f88c 	bl	8004178 <xPortStartScheduler>
 8003060:	e005      	b.n	800306e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3301      	adds	r3, #1
 8003066:	d102      	bne.n	800306e <vTaskStartScheduler+0x96>
 8003068:	b672      	cpsid	i
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	e7fd      	b.n	800306a <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <vTaskStartScheduler+0xc4>)
 8003070:	681b      	ldr	r3, [r3, #0]
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b005      	add	sp, #20
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	080064d4 	.word	0x080064d4
 8003080:	080038b5 	.word	0x080038b5
 8003084:	20000be8 	.word	0x20000be8
 8003088:	200006f0 	.word	0x200006f0
 800308c:	20000034 	.word	0x20000034
 8003090:	20000be4 	.word	0x20000be4
 8003094:	20000bd0 	.word	0x20000bd0
 8003098:	20000bc8 	.word	0x20000bc8
 800309c:	08006598 	.word	0x08006598

080030a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <vTaskSuspendAll+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	4b02      	ldr	r3, [pc, #8]	@ (80030b4 <vTaskSuspendAll+0x14>)
 80030ac:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000bec 	.word	0x20000bec

080030b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80030c6:	4b69      	ldr	r3, [pc, #420]	@ (800326c <xTaskResumeAll+0x1b4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <xTaskResumeAll+0x1c>
 80030ce:	b672      	cpsid	i
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	e7fd      	b.n	80030d0 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030d4:	f001 f884 	bl	80041e0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030d8:	4b64      	ldr	r3, [pc, #400]	@ (800326c <xTaskResumeAll+0x1b4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	4b63      	ldr	r3, [pc, #396]	@ (800326c <xTaskResumeAll+0x1b4>)
 80030e0:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80030e2:	4b62      	ldr	r3, [pc, #392]	@ (800326c <xTaskResumeAll+0x1b4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d000      	beq.n	80030ec <xTaskResumeAll+0x34>
 80030ea:	e0b7      	b.n	800325c <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030ec:	4b60      	ldr	r3, [pc, #384]	@ (8003270 <xTaskResumeAll+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d100      	bne.n	80030f6 <xTaskResumeAll+0x3e>
 80030f4:	e0b2      	b.n	800325c <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f6:	e089      	b.n	800320c <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003274 <xTaskResumeAll+0x1bc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6a12      	ldr	r2, [r2, #32]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	69d2      	ldr	r2, [r2, #28]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3318      	adds	r3, #24
 8003122:	429a      	cmp	r2, r3
 8003124:	d103      	bne.n	800312e <xTaskResumeAll+0x76>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	68d2      	ldr	r2, [r2, #12]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6892      	ldr	r2, [r2, #8]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3304      	adds	r3, #4
 8003160:	429a      	cmp	r2, r3
 8003162:	d103      	bne.n	800316c <xTaskResumeAll+0xb4>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003180:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <xTaskResumeAll+0x1c0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d903      	bls.n	8003190 <xTaskResumeAll+0xd8>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318c:	4b3a      	ldr	r3, [pc, #232]	@ (8003278 <xTaskResumeAll+0x1c0>)
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003194:	4939      	ldr	r1, [pc, #228]	@ (800327c <xTaskResumeAll+0x1c4>)
 8003196:	0013      	movs	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	189b      	adds	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	18cb      	adds	r3, r1, r3
 80031a0:	3304      	adds	r3, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	60da      	str	r2, [r3, #12]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	3204      	adds	r2, #4
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ca:	0013      	movs	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4a2a      	ldr	r2, [pc, #168]	@ (800327c <xTaskResumeAll+0x1c4>)
 80031d4:	189a      	adds	r2, r3, r2
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	615a      	str	r2, [r3, #20]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031de:	4927      	ldr	r1, [pc, #156]	@ (800327c <xTaskResumeAll+0x1c4>)
 80031e0:	0013      	movs	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	585b      	ldr	r3, [r3, r1]
 80031ea:	1c58      	adds	r0, r3, #1
 80031ec:	4923      	ldr	r1, [pc, #140]	@ (800327c <xTaskResumeAll+0x1c4>)
 80031ee:	0013      	movs	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fc:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <xTaskResumeAll+0x1c8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	429a      	cmp	r2, r3
 8003204:	d902      	bls.n	800320c <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 8003206:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <xTaskResumeAll+0x1cc>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <xTaskResumeAll+0x1bc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d000      	beq.n	8003216 <xTaskResumeAll+0x15e>
 8003214:	e770      	b.n	80030f8 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800321c:	f000 fbfe 	bl	8003a1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003220:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <xTaskResumeAll+0x1d0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00f      	beq.n	800324c <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800322c:	f000 f83c 	bl	80032a8 <xTaskIncrementTick>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d002      	beq.n	800323a <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <xTaskResumeAll+0x1cc>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3b01      	subs	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f2      	bne.n	800322c <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 8003246:	4b10      	ldr	r3, [pc, #64]	@ (8003288 <xTaskResumeAll+0x1d0>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800324c:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <xTaskResumeAll+0x1cc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003254:	2301      	movs	r3, #1
 8003256:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003258:	f000 ffb2 	bl	80041c0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800325c:	f000 ffd2 	bl	8004204 <vPortExitCritical>

    return xAlreadyYielded;
 8003260:	693b      	ldr	r3, [r7, #16]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	20000bec 	.word	0x20000bec
 8003270:	20000bc4 	.word	0x20000bc4
 8003274:	20000b84 	.word	0x20000b84
 8003278:	20000bcc 	.word	0x20000bcc
 800327c:	200006f4 	.word	0x200006f4
 8003280:	200006f0 	.word	0x200006f0
 8003284:	20000bd8 	.word	0x20000bd8
 8003288:	20000bd4 	.word	0x20000bd4

0800328c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003292:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <xTaskGetTickCount+0x18>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003298:	687b      	ldr	r3, [r7, #4]
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	20000bc8 	.word	0x20000bc8

080032a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80032b2:	4b78      	ldr	r3, [pc, #480]	@ (8003494 <xTaskIncrementTick+0x1ec>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d000      	beq.n	80032bc <xTaskIncrementTick+0x14>
 80032ba:	e0e1      	b.n	8003480 <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032bc:	4b76      	ldr	r3, [pc, #472]	@ (8003498 <xTaskIncrementTick+0x1f0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032c4:	4b74      	ldr	r3, [pc, #464]	@ (8003498 <xTaskIncrementTick+0x1f0>)
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d118      	bne.n	8003302 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032d0:	4b72      	ldr	r3, [pc, #456]	@ (800349c <xTaskIncrementTick+0x1f4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <xTaskIncrementTick+0x38>
 80032da:	b672      	cpsid	i
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	e7fd      	b.n	80032dc <xTaskIncrementTick+0x34>
 80032e0:	4b6e      	ldr	r3, [pc, #440]	@ (800349c <xTaskIncrementTick+0x1f4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	4b6e      	ldr	r3, [pc, #440]	@ (80034a0 <xTaskIncrementTick+0x1f8>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b6c      	ldr	r3, [pc, #432]	@ (800349c <xTaskIncrementTick+0x1f4>)
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	4b6c      	ldr	r3, [pc, #432]	@ (80034a0 <xTaskIncrementTick+0x1f8>)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	4b6b      	ldr	r3, [pc, #428]	@ (80034a4 <xTaskIncrementTick+0x1fc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <xTaskIncrementTick+0x1fc>)
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f000 fb8d 	bl	8003a1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003302:	4b69      	ldr	r3, [pc, #420]	@ (80034a8 <xTaskIncrementTick+0x200>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	429a      	cmp	r2, r3
 800330a:	d200      	bcs.n	800330e <xTaskIncrementTick+0x66>
 800330c:	e0a4      	b.n	8003458 <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330e:	4b63      	ldr	r3, [pc, #396]	@ (800349c <xTaskIncrementTick+0x1f4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003318:	4b63      	ldr	r3, [pc, #396]	@ (80034a8 <xTaskIncrementTick+0x200>)
 800331a:	2201      	movs	r2, #1
 800331c:	4252      	negs	r2, r2
 800331e:	601a      	str	r2, [r3, #0]
                    break;
 8003320:	e09a      	b.n	8003458 <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003322:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <xTaskIncrementTick+0x1f4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	429a      	cmp	r2, r3
 8003338:	d203      	bcs.n	8003342 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800333a:	4b5b      	ldr	r3, [pc, #364]	@ (80034a8 <xTaskIncrementTick+0x200>)
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003340:	e08a      	b.n	8003458 <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68d2      	ldr	r2, [r2, #12]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3304      	adds	r3, #4
 8003364:	429a      	cmp	r2, r3
 8003366:	d103      	bne.n	8003370 <xTaskIncrementTick+0xc8>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01e      	beq.n	80033c6 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	6a12      	ldr	r2, [r2, #32]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	69d2      	ldr	r2, [r2, #28]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3318      	adds	r3, #24
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d103      	bne.n	80033b6 <xTaskIncrementTick+0x10e>
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2200      	movs	r2, #0
 80033ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ca:	4b38      	ldr	r3, [pc, #224]	@ (80034ac <xTaskIncrementTick+0x204>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d903      	bls.n	80033da <xTaskIncrementTick+0x132>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d6:	4b35      	ldr	r3, [pc, #212]	@ (80034ac <xTaskIncrementTick+0x204>)
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033de:	4934      	ldr	r1, [pc, #208]	@ (80034b0 <xTaskIncrementTick+0x208>)
 80033e0:	0013      	movs	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	18cb      	adds	r3, r1, r3
 80033ea:	3304      	adds	r3, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	3204      	adds	r2, #4
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003414:	0013      	movs	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	189b      	adds	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <xTaskIncrementTick+0x208>)
 800341e:	189a      	adds	r2, r3, r2
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	615a      	str	r2, [r3, #20]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003428:	4921      	ldr	r1, [pc, #132]	@ (80034b0 <xTaskIncrementTick+0x208>)
 800342a:	0013      	movs	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	189b      	adds	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	585b      	ldr	r3, [r3, r1]
 8003434:	1c58      	adds	r0, r3, #1
 8003436:	491e      	ldr	r1, [pc, #120]	@ (80034b0 <xTaskIncrementTick+0x208>)
 8003438:	0013      	movs	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	189b      	adds	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003446:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <xTaskIncrementTick+0x20c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	429a      	cmp	r2, r3
 800344e:	d800      	bhi.n	8003452 <xTaskIncrementTick+0x1aa>
 8003450:	e75d      	b.n	800330e <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003456:	e75a      	b.n	800330e <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003458:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <xTaskIncrementTick+0x20c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345e:	4914      	ldr	r1, [pc, #80]	@ (80034b0 <xTaskIncrementTick+0x208>)
 8003460:	0013      	movs	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	189b      	adds	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	585b      	ldr	r3, [r3, r1]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d901      	bls.n	8003472 <xTaskIncrementTick+0x1ca>
            {
                xSwitchRequired = pdTRUE;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <xTaskIncrementTick+0x210>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e004      	b.n	800348a <xTaskIncrementTick+0x1e2>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003480:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <xTaskIncrementTick+0x214>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <xTaskIncrementTick+0x214>)
 8003488:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800348a:	69fb      	ldr	r3, [r7, #28]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b008      	add	sp, #32
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000bec 	.word	0x20000bec
 8003498:	20000bc8 	.word	0x20000bc8
 800349c:	20000b7c 	.word	0x20000b7c
 80034a0:	20000b80 	.word	0x20000b80
 80034a4:	20000bdc 	.word	0x20000bdc
 80034a8:	20000be4 	.word	0x20000be4
 80034ac:	20000bcc 	.word	0x20000bcc
 80034b0:	200006f4 	.word	0x200006f4
 80034b4:	200006f0 	.word	0x200006f0
 80034b8:	20000bd8 	.word	0x20000bd8
 80034bc:	20000bd4 	.word	0x20000bd4

080034c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80034c6:	4b25      	ldr	r3, [pc, #148]	@ (800355c <vTaskSwitchContext+0x9c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034ce:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <vTaskSwitchContext+0xa0>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80034d4:	e03d      	b.n	8003552 <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 80034d6:	4b22      	ldr	r3, [pc, #136]	@ (8003560 <vTaskSwitchContext+0xa0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034dc:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <vTaskSwitchContext+0xa4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	e008      	b.n	80034f6 <vTaskSwitchContext+0x36>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <vTaskSwitchContext+0x30>
 80034ea:	b672      	cpsid	i
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	e7fd      	b.n	80034ec <vTaskSwitchContext+0x2c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	491c      	ldr	r1, [pc, #112]	@ (8003568 <vTaskSwitchContext+0xa8>)
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	0013      	movs	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	585b      	ldr	r3, [r3, r1]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ed      	beq.n	80034e4 <vTaskSwitchContext+0x24>
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	0013      	movs	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	189b      	adds	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <vTaskSwitchContext+0xa8>)
 8003514:	189b      	adds	r3, r3, r2
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	429a      	cmp	r2, r3
 800352c:	d103      	bne.n	8003536 <vTaskSwitchContext+0x76>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <vTaskSwitchContext+0xac>)
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <vTaskSwitchContext+0xa4>)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <vTaskSwitchContext+0xac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3354      	adds	r3, #84	@ 0x54
 800354c:	001a      	movs	r2, r3
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <vTaskSwitchContext+0xb0>)
 8003550:	601a      	str	r2, [r3, #0]
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	20000bec 	.word	0x20000bec
 8003560:	20000bd8 	.word	0x20000bd8
 8003564:	20000bcc 	.word	0x20000bcc
 8003568:	200006f4 	.word	0x200006f4
 800356c:	200006f0 	.word	0x200006f0
 8003570:	20000034 	.word	0x20000034

08003574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <vTaskPlaceOnEventList+0x16>
 8003584:	b672      	cpsid	i
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	e7fd      	b.n	8003586 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800358a:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <vTaskPlaceOnEventList+0x3c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3318      	adds	r3, #24
 8003590:	001a      	movs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff f811 	bl	80025be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fa71 	bl	8003a88 <prvAddCurrentTaskToDelayedList>
}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b002      	add	sp, #8
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	200006f0 	.word	0x200006f0

080035b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <vTaskPlaceOnEventListRestricted+0x18>
 80035c6:	b672      	cpsid	i
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	e7fd      	b.n	80035c8 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	4b17      	ldr	r3, [pc, #92]	@ (8003630 <vTaskPlaceOnEventListRestricted+0x7c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	61da      	str	r2, [r3, #28]
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <vTaskPlaceOnEventListRestricted+0x7c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <vTaskPlaceOnEventListRestricted+0x7c>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	3218      	adds	r2, #24
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <vTaskPlaceOnEventListRestricted+0x7c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3318      	adds	r3, #24
 80035f6:	001a      	movs	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <vTaskPlaceOnEventListRestricted+0x7c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8003614:	2301      	movs	r3, #1
 8003616:	425b      	negs	r3, r3
 8003618:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f000 fa31 	bl	8003a88 <prvAddCurrentTaskToDelayedList>
    }
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b006      	add	sp, #24
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	200006f0 	.word	0x200006f0

08003634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <xTaskRemoveFromEventList+0x1c>
 800364a:	b672      	cpsid	i
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	e7fd      	b.n	800364c <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	6a12      	ldr	r2, [r2, #32]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	69d2      	ldr	r2, [r2, #28]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3318      	adds	r3, #24
 8003672:	429a      	cmp	r2, r3
 8003674:	d103      	bne.n	800367e <xTaskRemoveFromEventList+0x4a>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6a1a      	ldr	r2, [r3, #32]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2200      	movs	r2, #0
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800368e:	4b49      	ldr	r3, [pc, #292]	@ (80037b4 <xTaskRemoveFromEventList+0x180>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d15d      	bne.n	8003752 <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	68d2      	ldr	r2, [r2, #12]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	6892      	ldr	r2, [r2, #8]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	3304      	adds	r3, #4
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d103      	bne.n	80036c4 <xTaskRemoveFromEventList+0x90>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	4b37      	ldr	r3, [pc, #220]	@ (80037b8 <xTaskRemoveFromEventList+0x184>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d903      	bls.n	80036e8 <xTaskRemoveFromEventList+0xb4>
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e4:	4b34      	ldr	r3, [pc, #208]	@ (80037b8 <xTaskRemoveFromEventList+0x184>)
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ec:	4933      	ldr	r1, [pc, #204]	@ (80037bc <xTaskRemoveFromEventList+0x188>)
 80036ee:	0013      	movs	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	18cb      	adds	r3, r1, r3
 80036f8:	3304      	adds	r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	3204      	adds	r2, #4
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1d1a      	adds	r2, r3, #4
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003722:	0013      	movs	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	189b      	adds	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4a24      	ldr	r2, [pc, #144]	@ (80037bc <xTaskRemoveFromEventList+0x188>)
 800372c:	189a      	adds	r2, r3, r2
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	615a      	str	r2, [r3, #20]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003736:	4921      	ldr	r1, [pc, #132]	@ (80037bc <xTaskRemoveFromEventList+0x188>)
 8003738:	0013      	movs	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	189b      	adds	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	585b      	ldr	r3, [r3, r1]
 8003742:	1c58      	adds	r0, r3, #1
 8003744:	491d      	ldr	r1, [pc, #116]	@ (80037bc <xTaskRemoveFromEventList+0x188>)
 8003746:	0013      	movs	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	189b      	adds	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	5058      	str	r0, [r3, r1]
 8003750:	e01b      	b.n	800378a <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <xTaskRemoveFromEventList+0x18c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	61da      	str	r2, [r3, #28]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	3218      	adds	r2, #24
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	3318      	adds	r3, #24
 8003774:	001a      	movs	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <xTaskRemoveFromEventList+0x18c>)
 800377e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003780:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <xTaskRemoveFromEventList+0x18c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <xTaskRemoveFromEventList+0x18c>)
 8003788:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <xTaskRemoveFromEventList+0x190>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	429a      	cmp	r2, r3
 8003796:	d905      	bls.n	80037a4 <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003798:	2301      	movs	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <xTaskRemoveFromEventList+0x194>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e001      	b.n	80037a8 <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80037a8:	69fb      	ldr	r3, [r7, #28]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b008      	add	sp, #32
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	20000bec 	.word	0x20000bec
 80037b8:	20000bcc 	.word	0x20000bcc
 80037bc:	200006f4 	.word	0x200006f4
 80037c0:	20000b84 	.word	0x20000b84
 80037c4:	200006f0 	.word	0x200006f0
 80037c8:	20000bd8 	.word	0x20000bd8

080037cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <vTaskInternalSetTimeOutState+0x20>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037dc:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <vTaskInternalSetTimeOutState+0x24>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]
}
 80037e4:	46c0      	nop			@ (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b002      	add	sp, #8
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000bdc 	.word	0x20000bdc
 80037f0:	20000bc8 	.word	0x20000bc8

080037f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <xTaskCheckForTimeOut+0x16>
 8003804:	b672      	cpsid	i
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	e7fd      	b.n	8003806 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <xTaskCheckForTimeOut+0x22>
 8003810:	b672      	cpsid	i
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	e7fd      	b.n	8003812 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8003816:	f000 fce3 	bl	80041e0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800381a:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <xTaskCheckForTimeOut+0xa4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	d102      	bne.n	8003838 <xTaskCheckForTimeOut+0x44>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e027      	b.n	8003888 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b17      	ldr	r3, [pc, #92]	@ (800389c <xTaskCheckForTimeOut+0xa8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d00a      	beq.n	800385a <xTaskCheckForTimeOut+0x66>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	d305      	bcc.n	800385a <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e016      	b.n	8003888 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	429a      	cmp	r2, r3
 8003862:	d20c      	bcs.n	800387e <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff ffaa 	bl	80037cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e004      	b.n	8003888 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003888:	f000 fcbc 	bl	8004204 <vPortExitCritical>

    return xReturn;
 800388c:	697b      	ldr	r3, [r7, #20]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b006      	add	sp, #24
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	20000bc8 	.word	0x20000bc8
 800389c:	20000bdc 	.word	0x20000bdc

080038a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038a4:	4b02      	ldr	r3, [pc, #8]	@ (80038b0 <vTaskMissedYield+0x10>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000bd8 	.word	0x20000bd8

080038b4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038bc:	f000 f84e 	bl	800395c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c0:	4b03      	ldr	r3, [pc, #12]	@ (80038d0 <prvIdleTask+0x1c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d9f9      	bls.n	80038bc <prvIdleTask+0x8>
            {
                taskYIELD();
 80038c8:	f000 fc7a 	bl	80041c0 <vPortYield>
        prvCheckTasksWaitingTermination();
 80038cc:	e7f6      	b.n	80038bc <prvIdleTask+0x8>
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	200006f4 	.word	0x200006f4

080038d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	e00c      	b.n	80038fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	0013      	movs	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a14      	ldr	r2, [pc, #80]	@ (800393c <prvInitialiseTaskLists+0x68>)
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fe fe3c 	bl	800256c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3301      	adds	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b37      	cmp	r3, #55	@ 0x37
 80038fe:	d9ef      	bls.n	80038e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <prvInitialiseTaskLists+0x6c>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fe fe32 	bl	800256c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003908:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <prvInitialiseTaskLists+0x70>)
 800390a:	0018      	movs	r0, r3
 800390c:	f7fe fe2e 	bl	800256c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003910:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <prvInitialiseTaskLists+0x74>)
 8003912:	0018      	movs	r0, r3
 8003914:	f7fe fe2a 	bl	800256c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <prvInitialiseTaskLists+0x78>)
 800391a:	0018      	movs	r0, r3
 800391c:	f7fe fe26 	bl	800256c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <prvInitialiseTaskLists+0x7c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fe fe22 	bl	800256c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <prvInitialiseTaskLists+0x80>)
 800392a:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <prvInitialiseTaskLists+0x6c>)
 800392c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <prvInitialiseTaskLists+0x84>)
 8003930:	4a04      	ldr	r2, [pc, #16]	@ (8003944 <prvInitialiseTaskLists+0x70>)
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200006f4 	.word	0x200006f4
 8003940:	20000b54 	.word	0x20000b54
 8003944:	20000b68 	.word	0x20000b68
 8003948:	20000b84 	.word	0x20000b84
 800394c:	20000b98 	.word	0x20000b98
 8003950:	20000bb0 	.word	0x20000bb0
 8003954:	20000b7c 	.word	0x20000b7c
 8003958:	20000b80 	.word	0x20000b80

0800395c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003962:	e01a      	b.n	800399a <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8003964:	f000 fc3c 	bl	80041e0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003968:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <prvCheckTasksWaitingTermination+0x50>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	0018      	movs	r0, r3
 8003976:	f7fe fe58 	bl	800262a <uxListRemove>
                --uxCurrentNumberOfTasks;
 800397a:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <prvCheckTasksWaitingTermination+0x54>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <prvCheckTasksWaitingTermination+0x54>)
 8003982:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003984:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <prvCheckTasksWaitingTermination+0x58>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1e5a      	subs	r2, r3, #1
 800398a:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <prvCheckTasksWaitingTermination+0x58>)
 800398c:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 800398e:	f000 fc39 	bl	8004204 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f80f 	bl	80039b8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <prvCheckTasksWaitingTermination+0x58>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e0      	bne.n	8003964 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46c0      	nop			@ (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000b98 	.word	0x20000b98
 80039b0:	20000bc4 	.word	0x20000bc4
 80039b4:	20000bac 	.word	0x20000bac

080039b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80039c0:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <prvDeleteTCB+0x60>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3354      	adds	r3, #84	@ 0x54
 80039c6:	0018      	movs	r0, r3
 80039c8:	f001 f8e6 	bl	8004b98 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	22a5      	movs	r2, #165	@ 0xa5
 80039d0:	5c9b      	ldrb	r3, [r3, r2]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <prvDeleteTCB+0x32>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 fd50 	bl	8004480 <vPortFree>
                vPortFree( pxTCB );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 fd4c 	bl	8004480 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039e8:	e011      	b.n	8003a0e <prvDeleteTCB+0x56>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	22a5      	movs	r2, #165	@ 0xa5
 80039ee:	5c9b      	ldrb	r3, [r3, r2]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d104      	bne.n	80039fe <prvDeleteTCB+0x46>
                vPortFree( pxTCB );
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 fd42 	bl	8004480 <vPortFree>
    }
 80039fc:	e007      	b.n	8003a0e <prvDeleteTCB+0x56>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	22a5      	movs	r2, #165	@ 0xa5
 8003a02:	5c9b      	ldrb	r3, [r3, r2]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d002      	beq.n	8003a0e <prvDeleteTCB+0x56>
 8003a08:	b672      	cpsid	i
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	e7fd      	b.n	8003a0a <prvDeleteTCB+0x52>
    }
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b002      	add	sp, #8
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	200006f0 	.word	0x200006f0

08003a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <prvResetNextTaskUnblockTime+0x2c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a2a:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <prvResetNextTaskUnblockTime+0x30>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4252      	negs	r2, r2
 8003a30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a32:	e005      	b.n	8003a40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <prvResetNextTaskUnblockTime+0x2c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b03      	ldr	r3, [pc, #12]	@ (8003a4c <prvResetNextTaskUnblockTime+0x30>)
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	46c0      	nop			@ (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	20000b7c 	.word	0x20000b7c
 8003a4c:	20000be4 	.word	0x20000be4

08003a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a56:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <xTaskGetSchedulerState+0x30>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	e008      	b.n	8003a76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003a64:	4b07      	ldr	r3, [pc, #28]	@ (8003a84 <xTaskGetSchedulerState+0x34>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	e001      	b.n	8003a76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a76:	687b      	ldr	r3, [r7, #4]
    }
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000bd0 	.word	0x20000bd0
 8003a84:	20000bec 	.word	0x20000bec

08003a88 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a92:	4b2e      	ldr	r3, [pc, #184]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a98:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7fe fdc3 	bl	800262a <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	d124      	bne.n	8003af4 <prvAddCurrentTaskToDelayedList+0x6c>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d021      	beq.n	8003af4 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab0:	4b28      	ldr	r3, [pc, #160]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	4b21      	ldr	r3, [pc, #132]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	3204      	adds	r2, #4
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1d1a      	adds	r2, r3, #4
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003ae4:	615a      	str	r2, [r3, #20]
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003af2:	e026      	b.n	8003b42 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003afc:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d209      	bcs.n	8003b20 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3304      	adds	r3, #4
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f7fe fd50 	bl	80025be <vListInsert>
}
 8003b1e:	e010      	b.n	8003b42 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b20:	4b0e      	ldr	r3, [pc, #56]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	f7fe fd46 	bl	80025be <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d202      	bcs.n	8003b42 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b006      	add	sp, #24
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	20000bc8 	.word	0x20000bc8
 8003b50:	200006f0 	.word	0x200006f0
 8003b54:	20000bb0 	.word	0x20000bb0
 8003b58:	20000b80 	.word	0x20000b80
 8003b5c:	20000b7c 	.word	0x20000b7c
 8003b60:	20000be4 	.word	0x20000be4

08003b64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b089      	sub	sp, #36	@ 0x24
 8003b68:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b6e:	f000 fa5d 	bl	800402c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b72:	4b18      	ldr	r3, [pc, #96]	@ (8003bd4 <xTimerCreateTimerTask+0x70>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b82:	003a      	movs	r2, r7
 8003b84:	1d39      	adds	r1, r7, #4
 8003b86:	2308      	movs	r3, #8
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7fe fcd6 	bl	800253c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003b90:	683c      	ldr	r4, [r7, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	4910      	ldr	r1, [pc, #64]	@ (8003bd8 <xTimerCreateTimerTask+0x74>)
 8003b98:	4810      	ldr	r0, [pc, #64]	@ (8003bdc <xTimerCreateTimerTask+0x78>)
 8003b9a:	9202      	str	r2, [sp, #8]
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	0022      	movs	r2, r4
 8003ba6:	f7ff f82c 	bl	8002c02 <xTaskCreateStatic>
 8003baa:	0002      	movs	r2, r0
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <xTimerCreateTimerTask+0x7c>)
 8003bae:	601a      	str	r2, [r3, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <xTimerCreateTimerTask+0x7c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <xTimerCreateTimerTask+0x64>
 8003bc2:	b672      	cpsid	i
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	e7fd      	b.n	8003bc4 <xTimerCreateTimerTask+0x60>
        return xReturn;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    }
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b005      	add	sp, #20
 8003bd0:	bd90      	pop	{r4, r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	20000c20 	.word	0x20000c20
 8003bd8:	080064dc 	.word	0x080064dc
 8003bdc:	08003c8d 	.word	0x08003c8d
 8003be0:	20000c24 	.word	0x20000c24

08003be4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003bf0:	e009      	b.n	8003c06 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	0010      	movs	r0, r2
 8003c04:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	18d1      	adds	r1, r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8da 	bl	8003dcc <prvInsertTimerInActiveList>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d1ea      	bne.n	8003bf2 <prvReloadTimer+0xe>
        }
    }
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <prvProcessExpiredTimer+0x60>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fe fcf2 	bl	800262a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2228      	movs	r2, #40	@ 0x28
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	001a      	movs	r2, r3
 8003c4e:	2304      	movs	r3, #4
 8003c50:	4013      	ands	r3, r2
 8003c52:	d006      	beq.n	8003c62 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7ff ffc2 	bl	8003be4 <prvReloadTimer>
 8003c60:	e008      	b.n	8003c74 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2228      	movs	r2, #40	@ 0x28
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	4393      	bics	r3, r2
 8003c6c:	b2d9      	uxtb	r1, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2228      	movs	r2, #40	@ 0x28
 8003c72:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	0010      	movs	r0, r2
 8003c7c:	4798      	blx	r3
    }
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	20000c18 	.word	0x20000c18

08003c8c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c94:	2308      	movs	r3, #8
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 f855 	bl	8003d48 <prvGetNextExpireTime>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 f805 	bl	8003cb8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003cae:	f000 f8cf 	bl	8003e50 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	e7ee      	b.n	8003c94 <prvTimerTask+0x8>
	...

08003cb8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003cc2:	f7ff f9ed 	bl	80030a0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 f85e 	bl	8003d8c <prvSampleTimeNow>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d12b      	bne.n	8003d32 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10c      	bne.n	8003cfa <prvProcessTimerOrBlockTask+0x42>
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d808      	bhi.n	8003cfa <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8003ce8:	f7ff f9e6 	bl	80030b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0011      	movs	r1, r2
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7ff ff98 	bl	8003c28 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003cf8:	e01d      	b.n	8003d36 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d00:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <prvProcessTimerOrBlockTask+0x88>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <prvProcessTimerOrBlockTask+0x56>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <prvProcessTimerOrBlockTask+0x58>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <prvProcessTimerOrBlockTask+0x8c>)
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	0019      	movs	r1, r3
 8003d20:	f7fe ff3c 	bl	8002b9c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d24:	f7ff f9c8 	bl	80030b8 <xTaskResumeAll>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d104      	bne.n	8003d36 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8003d2c:	f000 fa48 	bl	80041c0 <vPortYield>
    }
 8003d30:	e001      	b.n	8003d36 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8003d32:	f7ff f9c1 	bl	80030b8 <xTaskResumeAll>
    }
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	20000c1c 	.word	0x20000c1c
 8003d44:	20000c20 	.word	0x20000c20

08003d48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d50:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <prvGetNextExpireTime+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <prvGetNextExpireTime+0x16>
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	e000      	b.n	8003d60 <prvGetNextExpireTime+0x18>
 8003d5e:	2200      	movs	r2, #0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <prvGetNextExpireTime+0x40>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e001      	b.n	8003d7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b004      	add	sp, #16
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	20000c18 	.word	0x20000c18

08003d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d94:	f7ff fa7a 	bl	800328c <xTaskGetTickCount>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <prvSampleTimeNow+0x3c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d205      	bcs.n	8003db2 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8003da6:	f000 f919 	bl	8003fdc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e002      	b.n	8003db8 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <prvSampleTimeNow+0x3c>)
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
    }
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000c28 	.word	0x20000c28

08003dcc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d812      	bhi.n	8003e18 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e01b      	b.n	8003e3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <prvInsertTimerInActiveList+0x7c>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	0019      	movs	r1, r3
 8003e10:	0010      	movs	r0, r2
 8003e12:	f7fe fbd4 	bl	80025be <vListInsert>
 8003e16:	e012      	b.n	8003e3e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d206      	bcs.n	8003e2e <prvInsertTimerInActiveList+0x62>
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e007      	b.n	8003e3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e2e:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <prvInsertTimerInActiveList+0x80>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	0019      	movs	r1, r3
 8003e38:	0010      	movs	r0, r2
 8003e3a:	f7fe fbc0 	bl	80025be <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e3e:	697b      	ldr	r3, [r7, #20]
    }
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b006      	add	sp, #24
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000c1c 	.word	0x20000c1c
 8003e4c:	20000c18 	.word	0x20000c18

08003e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e56:	e0ad      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da10      	bge.n	8003e82 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	3304      	adds	r3, #4
 8003e64:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <prvProcessReceivedCommands+0x22>
 8003e6c:	b672      	cpsid	i
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	e7fd      	b.n	8003e6e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	6858      	ldr	r0, [r3, #4]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0019      	movs	r1, r3
 8003e80:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da00      	bge.n	8003e8c <prvProcessReceivedCommands+0x3c>
 8003e8a:	e093      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fe fbc3 	bl	800262a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ea4:	003b      	movs	r3, r7
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff ff70 	bl	8003d8c <prvSampleTimeNow>
 8003eac:	0003      	movs	r3, r0
 8003eae:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d900      	bls.n	8003eba <prvProcessReceivedCommands+0x6a>
 8003eb8:	e079      	b.n	8003fae <prvProcessReceivedCommands+0x15e>
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	4b45      	ldr	r3, [pc, #276]	@ (8003fd4 <prvProcessReceivedCommands+0x184>)
 8003ebe:	18d3      	adds	r3, r2, r3
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2228      	movs	r2, #40	@ 0x28
 8003ec8:	5c9b      	ldrb	r3, [r3, r2]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b2d9      	uxtb	r1, r3
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2228      	movs	r2, #40	@ 0x28
 8003ed4:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	18d1      	adds	r1, r2, r3
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	69b8      	ldr	r0, [r7, #24]
 8003ee8:	f7ff ff70 	bl	8003dcc <prvInsertTimerInActiveList>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d060      	beq.n	8003fb2 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2228      	movs	r2, #40	@ 0x28
 8003ef4:	5c9b      	ldrb	r3, [r3, r2]
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	2304      	movs	r3, #4
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00a      	beq.n	8003f14 <prvProcessReceivedCommands+0xc4>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	18d1      	adds	r1, r2, r3
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff fe69 	bl	8003be4 <prvReloadTimer>
 8003f12:	e008      	b.n	8003f26 <prvProcessReceivedCommands+0xd6>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2228      	movs	r2, #40	@ 0x28
 8003f18:	5c9b      	ldrb	r3, [r3, r2]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	b2d9      	uxtb	r1, r3
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2228      	movs	r2, #40	@ 0x28
 8003f24:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	0010      	movs	r0, r2
 8003f2e:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f30:	e03f      	b.n	8003fb2 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2228      	movs	r2, #40	@ 0x28
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4393      	bics	r3, r2
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2228      	movs	r2, #40	@ 0x28
 8003f42:	5499      	strb	r1, [r3, r2]
                        break;
 8003f44:	e036      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2228      	movs	r2, #40	@ 0x28
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b2d9      	uxtb	r1, r3
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2228      	movs	r2, #40	@ 0x28
 8003f56:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <prvProcessReceivedCommands+0x11e>
 8003f68:	b672      	cpsid	i
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	e7fd      	b.n	8003f6a <prvProcessReceivedCommands+0x11a>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	18d1      	adds	r1, r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	69b8      	ldr	r0, [r7, #24]
 8003f7c:	f7ff ff26 	bl	8003dcc <prvInsertTimerInActiveList>
                        break;
 8003f80:	e018      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2228      	movs	r2, #40	@ 0x28
 8003f86:	5c9b      	ldrb	r3, [r3, r2]
 8003f88:	001a      	movs	r2, r3
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d104      	bne.n	8003f9a <prvProcessReceivedCommands+0x14a>
                            {
                                vPortFree( pxTimer );
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fa74 	bl	8004480 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f98:	e00c      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2228      	movs	r2, #40	@ 0x28
 8003f9e:	5c9b      	ldrb	r3, [r3, r2]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	b2d9      	uxtb	r1, r3
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2228      	movs	r2, #40	@ 0x28
 8003faa:	5499      	strb	r1, [r3, r2]
                        break;
 8003fac:	e002      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	e000      	b.n	8003fb4 <prvProcessReceivedCommands+0x164>
                        break;
 8003fb2:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fb4:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <prvProcessReceivedCommands+0x188>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	1d39      	adds	r1, r7, #4
 8003fba:	2200      	movs	r2, #0
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fe fc55 	bl	800286c <xQueueReceive>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d000      	beq.n	8003fc8 <prvProcessReceivedCommands+0x178>
 8003fc6:	e747      	b.n	8003e58 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b008      	add	sp, #32
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	0800659c 	.word	0x0800659c
 8003fd8:	20000c20 	.word	0x20000c20

08003fdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fe2:	e00b      	b.n	8003ffc <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8004024 <prvSwitchTimerLists+0x48>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fee:	2301      	movs	r3, #1
 8003ff0:	425a      	negs	r2, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7ff fe16 	bl	8003c28 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <prvSwitchTimerLists+0x48>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004006:	4b07      	ldr	r3, [pc, #28]	@ (8004024 <prvSwitchTimerLists+0x48>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800400c:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <prvSwitchTimerLists+0x4c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b04      	ldr	r3, [pc, #16]	@ (8004024 <prvSwitchTimerLists+0x48>)
 8004012:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <prvSwitchTimerLists+0x4c>)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
    }
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	20000c18 	.word	0x20000c18
 8004028:	20000c1c 	.word	0x20000c1c

0800402c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004032:	f000 f8d5 	bl	80041e0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004036:	4b16      	ldr	r3, [pc, #88]	@ (8004090 <prvCheckForValidListAndQueue+0x64>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d123      	bne.n	8004086 <prvCheckForValidListAndQueue+0x5a>
            {
                vListInitialise( &xActiveTimerList1 );
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <prvCheckForValidListAndQueue+0x68>)
 8004040:	0018      	movs	r0, r3
 8004042:	f7fe fa93 	bl	800256c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004046:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <prvCheckForValidListAndQueue+0x6c>)
 8004048:	0018      	movs	r0, r3
 800404a:	f7fe fa8f 	bl	800256c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <prvCheckForValidListAndQueue+0x70>)
 8004050:	4a10      	ldr	r2, [pc, #64]	@ (8004094 <prvCheckForValidListAndQueue+0x68>)
 8004052:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004054:	4b12      	ldr	r3, [pc, #72]	@ (80040a0 <prvCheckForValidListAndQueue+0x74>)
 8004056:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <prvCheckForValidListAndQueue+0x6c>)
 8004058:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800405a:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <prvCheckForValidListAndQueue+0x78>)
 800405c:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <prvCheckForValidListAndQueue+0x7c>)
 800405e:	2100      	movs	r1, #0
 8004060:	9100      	str	r1, [sp, #0]
 8004062:	2110      	movs	r1, #16
 8004064:	200a      	movs	r0, #10
 8004066:	f7fe fb93 	bl	8002790 <xQueueGenericCreateStatic>
 800406a:	0002      	movs	r2, r0
 800406c:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <prvCheckForValidListAndQueue+0x64>)
 800406e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <prvCheckForValidListAndQueue+0x64>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d006      	beq.n	8004086 <prvCheckForValidListAndQueue+0x5a>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <prvCheckForValidListAndQueue+0x64>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0b      	ldr	r2, [pc, #44]	@ (80040ac <prvCheckForValidListAndQueue+0x80>)
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f7fe fd45 	bl	8002b10 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004086:	f000 f8bd 	bl	8004204 <vPortExitCritical>
    }
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000c20 	.word	0x20000c20
 8004094:	20000bf0 	.word	0x20000bf0
 8004098:	20000c04 	.word	0x20000c04
 800409c:	20000c18 	.word	0x20000c18
 80040a0:	20000c1c 	.word	0x20000c1c
 80040a4:	20000ccc 	.word	0x20000ccc
 80040a8:	20000c2c 	.word	0x20000c2c
 80040ac:	080064e4 	.word	0x080064e4

080040b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b04      	subs	r3, #4
 80040c0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2280      	movs	r2, #128	@ 0x80
 80040c6:	0452      	lsls	r2, r2, #17
 80040c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b04      	subs	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80040dc:	4a08      	ldr	r2, [pc, #32]	@ (8004100 <pxPortInitialiseStack+0x50>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b14      	subs	r3, #20
 80040e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b20      	subs	r3, #32
 80040f2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040f4:	68fb      	ldr	r3, [r7, #12]
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	08004105 	.word	0x08004105

08004104 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <prvTaskExitError+0x2c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	d002      	beq.n	800411c <prvTaskExitError+0x18>
 8004116:	b672      	cpsid	i
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	e7fd      	b.n	8004118 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800411c:	b672      	cpsid	i

    while( ulDummy == 0 )
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0fc      	beq.n	8004120 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b002      	add	sp, #8
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000024 	.word	0x20000024

08004134 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004140:	4a0b      	ldr	r2, [pc, #44]	@ (8004170 <pxCurrentTCBConst2>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	3020      	adds	r0, #32
 8004148:	f380 8809 	msr	PSP, r0
 800414c:	2002      	movs	r0, #2
 800414e:	f380 8814 	msr	CONTROL, r0
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004158:	46ae      	mov	lr, r5
 800415a:	bc08      	pop	{r3}
 800415c:	bc04      	pop	{r2}
 800415e:	b662      	cpsie	i
 8004160:	4718      	bx	r3
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	46c0      	nop			@ (mov r8, r8)

08004170 <pxCurrentTCBConst2>:
 8004170:	200006f0 	.word	0x200006f0
        "   bx   r3                     \n"/* Finally, jump to the user defined task code. */
        "                               \n"
        "   .align 4                    \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB   "
        );
}
 8004174:	46c0      	nop			@ (mov r8, r8)
 8004176:	46c0      	nop			@ (mov r8, r8)

08004178 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <xPortStartScheduler+0x40>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <xPortStartScheduler+0x40>)
 8004182:	21ff      	movs	r1, #255	@ 0xff
 8004184:	0409      	lsls	r1, r1, #16
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <xPortStartScheduler+0x40>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <xPortStartScheduler+0x40>)
 8004190:	21ff      	movs	r1, #255	@ 0xff
 8004192:	0609      	lsls	r1, r1, #24
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004198:	f000 f898 	bl	80042cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <xPortStartScheduler+0x44>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80041a2:	f7ff ffcd 	bl	8004140 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041a6:	f7ff f98b 	bl	80034c0 <vTaskSwitchContext>
    prvTaskExitError();
 80041aa:	f7ff ffab 	bl	8004104 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	e000ed20 	.word	0xe000ed20
 80041bc:	20000024 	.word	0x20000024

080041c0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <vPortYield+0x1c>)
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	0552      	lsls	r2, r2, #21
 80041ca:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80041cc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80041d0:	f3bf 8f6f 	isb	sy
}
 80041d4:	46c0      	nop			@ (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80041e4:	b672      	cpsid	i
    uxCriticalNesting++;
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <vPortEnterCritical+0x20>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <vPortEnterCritical+0x20>)
 80041ee:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 80041f0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80041f4:	f3bf 8f6f 	isb	sy
}
 80041f8:	46c0      	nop			@ (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	20000024 	.word	0x20000024

08004204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004208:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <vPortExitCritical+0x2c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <vPortExitCritical+0x12>
 8004210:	b672      	cpsid	i
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	e7fd      	b.n	8004212 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <vPortExitCritical+0x2c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	1e5a      	subs	r2, r3, #1
 800421c:	4b04      	ldr	r3, [pc, #16]	@ (8004230 <vPortExitCritical+0x2c>)
 800421e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <vPortExitCritical+0x2c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d100      	bne.n	800422a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8004228:	b662      	cpsie	i
    }
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000024 	.word	0x20000024

08004234 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004234:	f3ef 8010 	mrs	r0, PRIMASK
 8004238:	b672      	cpsid	i
 800423a:	4770      	bx	lr
        " mrs r0, PRIMASK   \n"
        " cpsid i           \n"
        " bx lr               "
        ::: "memory"
        );
}
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	0018      	movs	r0, r3

08004240 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004240:	f380 8810 	msr	PRIMASK, r0
 8004244:	4770      	bx	lr
        " msr PRIMASK, r0   \n"
        " bx lr               "
        ::: "memory"
        );
}
 8004246:	46c0      	nop			@ (mov r8, r8)
	...

08004250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004250:	f3ef 8009 	mrs	r0, PSP
 8004254:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <pxCurrentTCBConst>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	3820      	subs	r0, #32
 800425a:	6010      	str	r0, [r2, #0]
 800425c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800425e:	4644      	mov	r4, r8
 8004260:	464d      	mov	r5, r9
 8004262:	4656      	mov	r6, sl
 8004264:	465f      	mov	r7, fp
 8004266:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004268:	b508      	push	{r3, lr}
 800426a:	b672      	cpsid	i
 800426c:	f7ff f928 	bl	80034c0 <vTaskSwitchContext>
 8004270:	b662      	cpsie	i
 8004272:	bc0c      	pop	{r2, r3}
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	6808      	ldr	r0, [r1, #0]
 8004278:	3010      	adds	r0, #16
 800427a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800427c:	46a0      	mov	r8, r4
 800427e:	46a9      	mov	r9, r5
 8004280:	46b2      	mov	sl, r6
 8004282:	46bb      	mov	fp, r7
 8004284:	f380 8809 	msr	PSP, r0
 8004288:	3820      	subs	r0, #32
 800428a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800428c:	4718      	bx	r3
 800428e:	46c0      	nop			@ (mov r8, r8)

08004290 <pxCurrentTCBConst>:
 8004290:	200006f0 	.word	0x200006f0
        "   bx r3                               \n"
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB    "
    );
}
 8004294:	46c0      	nop			@ (mov r8, r8)
 8004296:	46c0      	nop			@ (mov r8, r8)

08004298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800429e:	f7ff ffc9 	bl	8004234 <ulSetInterruptMaskFromISR>
 80042a2:	0003      	movs	r3, r0
 80042a4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80042a6:	f7fe ffff 	bl	80032a8 <xTaskIncrementTick>
 80042aa:	1e03      	subs	r3, r0, #0
 80042ac:	d003      	beq.n	80042b6 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <xPortSysTickHandler+0x30>)
 80042b0:	2280      	movs	r2, #128	@ 0x80
 80042b2:	0552      	lsls	r2, r2, #21
 80042b4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff ffc1 	bl	8004240 <vClearInterruptMaskFromISR>
}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b002      	add	sp, #8
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <vPortSetupTimerInterrupt+0x38>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <vPortSetupTimerInterrupt+0x3c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	22fa      	movs	r2, #250	@ 0xfa
 80042e2:	0091      	lsls	r1, r2, #2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7fb ff21 	bl	800012c <__udivsi3>
 80042ea:	0003      	movs	r3, r0
 80042ec:	001a      	movs	r2, r3
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <vPortSetupTimerInterrupt+0x40>)
 80042f0:	3a01      	subs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042f4:	4b02      	ldr	r3, [pc, #8]	@ (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042f6:	2207      	movs	r2, #7
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	e000e010 	.word	0xe000e010
 8004304:	e000e018 	.word	0xe000e018
 8004308:	2000001c 	.word	0x2000001c
 800430c:	e000e014 	.word	0xe000e014

08004310 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800431c:	f7fe fec0 	bl	80030a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004320:	4b52      	ldr	r3, [pc, #328]	@ (800446c <pvPortMalloc+0x15c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004328:	f000 f8fc 	bl	8004524 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d021      	beq.n	8004376 <pvPortMalloc+0x66>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004332:	2308      	movs	r3, #8
 8004334:	43db      	mvns	r3, r3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	d81a      	bhi.n	8004372 <pvPortMalloc+0x62>
            {
                xWantedSize += xHeapStructSize;
 800433c:	2208      	movs	r2, #8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	189b      	adds	r3, r3, r2
 8004342:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2207      	movs	r2, #7
 8004348:	4013      	ands	r3, r2
 800434a:	d014      	beq.n	8004376 <pvPortMalloc+0x66>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2207      	movs	r2, #7
 8004350:	4013      	ands	r3, r2
 8004352:	2208      	movs	r2, #8
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	43db      	mvns	r3, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d804      	bhi.n	800436c <pvPortMalloc+0x5c>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	e004      	b.n	8004376 <pvPortMalloc+0x66>
                    }
                    else
                    {
                        xWantedSize = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	e001      	b.n	8004376 <pvPortMalloc+0x66>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	db69      	blt.n	8004450 <pvPortMalloc+0x140>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d066      	beq.n	8004450 <pvPortMalloc+0x140>
 8004382:	4b3b      	ldr	r3, [pc, #236]	@ (8004470 <pvPortMalloc+0x160>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d861      	bhi.n	8004450 <pvPortMalloc+0x140>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800438c:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <pvPortMalloc+0x164>)
 800438e:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8004390:	4b38      	ldr	r3, [pc, #224]	@ (8004474 <pvPortMalloc+0x164>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004396:	e004      	b.n	80043a2 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d903      	bls.n	80043b4 <pvPortMalloc+0xa4>
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f1      	bne.n	8004398 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043b4:	4b2d      	ldr	r3, [pc, #180]	@ (800446c <pvPortMalloc+0x15c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d048      	beq.n	8004450 <pvPortMalloc+0x140>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2208      	movs	r2, #8
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1ad2      	subs	r2, r2, r3
 80043d8:	2308      	movs	r3, #8
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	429a      	cmp	r2, r3
 80043de:	d917      	bls.n	8004410 <pvPortMalloc+0x100>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	18d3      	adds	r3, r2, r3
 80043e6:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2207      	movs	r2, #7
 80043ec:	4013      	ands	r3, r2
 80043ee:	d002      	beq.n	80043f6 <pvPortMalloc+0xe6>
 80043f0:	b672      	cpsid	i
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	e7fd      	b.n	80043f2 <pvPortMalloc+0xe2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f8e4 	bl	80045d8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <pvPortMalloc+0x160>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <pvPortMalloc+0x160>)
 800441c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800441e:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <pvPortMalloc+0x160>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <pvPortMalloc+0x168>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d203      	bcs.n	8004432 <pvPortMalloc+0x122>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800442a:	4b11      	ldr	r3, [pc, #68]	@ (8004470 <pvPortMalloc+0x160>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <pvPortMalloc+0x168>)
 8004430:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2280      	movs	r2, #128	@ 0x80
 8004438:	0612      	lsls	r2, r2, #24
 800443a:	431a      	orrs	r2, r3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <pvPortMalloc+0x16c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <pvPortMalloc+0x16c>)
 800444e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004450:	f7fe fe32 	bl	80030b8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2207      	movs	r2, #7
 8004458:	4013      	ands	r3, r2
 800445a:	d002      	beq.n	8004462 <pvPortMalloc+0x152>
 800445c:	b672      	cpsid	i
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	e7fd      	b.n	800445e <pvPortMalloc+0x14e>
    return pvReturn;
 8004462:	697b      	ldr	r3, [r7, #20]
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b008      	add	sp, #32
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20002224 	.word	0x20002224
 8004470:	20002228 	.word	0x20002228
 8004474:	2000221c 	.word	0x2000221c
 8004478:	2000222c 	.word	0x2000222c
 800447c:	20002230 	.word	0x20002230

08004480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d036      	beq.n	8004500 <vPortFree+0x80>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004492:	2308      	movs	r3, #8
 8004494:	425b      	negs	r3, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	18d3      	adds	r3, r2, r3
 800449a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	db02      	blt.n	80044ae <vPortFree+0x2e>
 80044a8:	b672      	cpsid	i
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	e7fd      	b.n	80044aa <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <vPortFree+0x3c>
 80044b6:	b672      	cpsid	i
 80044b8:	46c0      	nop			@ (mov r8, r8)
 80044ba:	e7fd      	b.n	80044b8 <vPortFree+0x38>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	da1d      	bge.n	8004500 <vPortFree+0x80>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d119      	bne.n	8004500 <vPortFree+0x80>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	085a      	lsrs	r2, r3, #1
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80044d8:	f7fe fde2 	bl	80030a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <vPortFree+0x88>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	18d2      	adds	r2, r2, r3
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <vPortFree+0x88>)
 80044e8:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f873 	bl	80045d8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <vPortFree+0x8c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <vPortFree+0x8c>)
 80044fa:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80044fc:	f7fe fddc 	bl	80030b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20002228 	.word	0x20002228
 800450c:	20002234 	.word	0x20002234

08004510 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8004514:	4b02      	ldr	r3, [pc, #8]	@ (8004520 <xPortGetFreeHeapSize+0x10>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	20002228 	.word	0x20002228

08004524 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800452a:	23a8      	movs	r3, #168	@ 0xa8
 800452c:	015b      	lsls	r3, r3, #5
 800452e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004530:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <prvHeapInit+0xa0>)
 8004532:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2207      	movs	r2, #7
 8004538:	4013      	ands	r3, r2
 800453a:	d00c      	beq.n	8004556 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3307      	adds	r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2207      	movs	r2, #7
 8004546:	4393      	bics	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	4b1c      	ldr	r3, [pc, #112]	@ (80045c4 <prvHeapInit+0xa0>)
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800455a:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <prvHeapInit+0xa4>)
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004560:	4b19      	ldr	r3, [pc, #100]	@ (80045c8 <prvHeapInit+0xa4>)
 8004562:	2200      	movs	r2, #0
 8004564:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800456e:	2208      	movs	r2, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2207      	movs	r2, #7
 800457a:	4393      	bics	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <prvHeapInit+0xa8>)
 8004582:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <prvHeapInit+0xa8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <prvHeapInit+0xa8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	1ad2      	subs	r2, r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045a2:	4b0a      	ldr	r3, [pc, #40]	@ (80045cc <prvHeapInit+0xa8>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <prvHeapInit+0xac>)
 80045b0:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <prvHeapInit+0xb0>)
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	20000d1c 	.word	0x20000d1c
 80045c8:	2000221c 	.word	0x2000221c
 80045cc:	20002224 	.word	0x20002224
 80045d0:	2000222c 	.word	0x2000222c
 80045d4:	20002228 	.word	0x20002228

080045d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045e0:	4b27      	ldr	r3, [pc, #156]	@ (8004680 <prvInsertBlockIntoFreeList+0xa8>)
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e002      	b.n	80045ec <prvInsertBlockIntoFreeList+0x14>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d8f7      	bhi.n	80045e6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d108      	bne.n	800461a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	18d2      	adds	r2, r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	18d2      	adds	r2, r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d118      	bne.n	8004660 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b14      	ldr	r3, [pc, #80]	@ (8004684 <prvInsertBlockIntoFreeList+0xac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d00d      	beq.n	8004656 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	18d2      	adds	r2, r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e008      	b.n	8004668 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004656:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <prvInsertBlockIntoFreeList+0xac>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e003      	b.n	8004668 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d002      	beq.n	8004676 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	46bd      	mov	sp, r7
 800467a:	b004      	add	sp, #16
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	2000221c 	.word	0x2000221c
 8004684:	20002224 	.word	0x20002224

08004688 <std>:
 8004688:	2300      	movs	r3, #0
 800468a:	b510      	push	{r4, lr}
 800468c:	0004      	movs	r4, r0
 800468e:	6003      	str	r3, [r0, #0]
 8004690:	6043      	str	r3, [r0, #4]
 8004692:	6083      	str	r3, [r0, #8]
 8004694:	8181      	strh	r1, [r0, #12]
 8004696:	6643      	str	r3, [r0, #100]	@ 0x64
 8004698:	81c2      	strh	r2, [r0, #14]
 800469a:	6103      	str	r3, [r0, #16]
 800469c:	6143      	str	r3, [r0, #20]
 800469e:	6183      	str	r3, [r0, #24]
 80046a0:	0019      	movs	r1, r3
 80046a2:	2208      	movs	r2, #8
 80046a4:	305c      	adds	r0, #92	@ 0x5c
 80046a6:	f000 fa5d 	bl	8004b64 <memset>
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <std+0x50>)
 80046ac:	6224      	str	r4, [r4, #32]
 80046ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <std+0x54>)
 80046b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046b4:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <std+0x58>)
 80046b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046b8:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <std+0x5c>)
 80046ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <std+0x60>)
 80046be:	429c      	cmp	r4, r3
 80046c0:	d005      	beq.n	80046ce <std+0x46>
 80046c2:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <std+0x64>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d002      	beq.n	80046ce <std+0x46>
 80046c8:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <std+0x68>)
 80046ca:	429c      	cmp	r4, r3
 80046cc:	d103      	bne.n	80046d6 <std+0x4e>
 80046ce:	0020      	movs	r0, r4
 80046d0:	3058      	adds	r0, #88	@ 0x58
 80046d2:	f000 fb31 	bl	8004d38 <__retarget_lock_init_recursive>
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	08004989 	.word	0x08004989
 80046dc:	080049b5 	.word	0x080049b5
 80046e0:	080049ed 	.word	0x080049ed
 80046e4:	08004a19 	.word	0x08004a19
 80046e8:	20002238 	.word	0x20002238
 80046ec:	200022a0 	.word	0x200022a0
 80046f0:	20002308 	.word	0x20002308

080046f4 <stdio_exit_handler>:
 80046f4:	b510      	push	{r4, lr}
 80046f6:	4a03      	ldr	r2, [pc, #12]	@ (8004704 <stdio_exit_handler+0x10>)
 80046f8:	4903      	ldr	r1, [pc, #12]	@ (8004708 <stdio_exit_handler+0x14>)
 80046fa:	4804      	ldr	r0, [pc, #16]	@ (800470c <stdio_exit_handler+0x18>)
 80046fc:	f000 f86c 	bl	80047d8 <_fwalk_sglue>
 8004700:	bd10      	pop	{r4, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	20000028 	.word	0x20000028
 8004708:	08005ed1 	.word	0x08005ed1
 800470c:	20000038 	.word	0x20000038

08004710 <cleanup_stdio>:
 8004710:	6841      	ldr	r1, [r0, #4]
 8004712:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <cleanup_stdio+0x30>)
 8004714:	b510      	push	{r4, lr}
 8004716:	0004      	movs	r4, r0
 8004718:	4299      	cmp	r1, r3
 800471a:	d001      	beq.n	8004720 <cleanup_stdio+0x10>
 800471c:	f001 fbd8 	bl	8005ed0 <_fflush_r>
 8004720:	68a1      	ldr	r1, [r4, #8]
 8004722:	4b08      	ldr	r3, [pc, #32]	@ (8004744 <cleanup_stdio+0x34>)
 8004724:	4299      	cmp	r1, r3
 8004726:	d002      	beq.n	800472e <cleanup_stdio+0x1e>
 8004728:	0020      	movs	r0, r4
 800472a:	f001 fbd1 	bl	8005ed0 <_fflush_r>
 800472e:	68e1      	ldr	r1, [r4, #12]
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <cleanup_stdio+0x38>)
 8004732:	4299      	cmp	r1, r3
 8004734:	d002      	beq.n	800473c <cleanup_stdio+0x2c>
 8004736:	0020      	movs	r0, r4
 8004738:	f001 fbca 	bl	8005ed0 <_fflush_r>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	20002238 	.word	0x20002238
 8004744:	200022a0 	.word	0x200022a0
 8004748:	20002308 	.word	0x20002308

0800474c <global_stdio_init.part.0>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <global_stdio_init.part.0+0x28>)
 8004750:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <global_stdio_init.part.0+0x2c>)
 8004752:	2104      	movs	r1, #4
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	4809      	ldr	r0, [pc, #36]	@ (800477c <global_stdio_init.part.0+0x30>)
 8004758:	2200      	movs	r2, #0
 800475a:	f7ff ff95 	bl	8004688 <std>
 800475e:	2201      	movs	r2, #1
 8004760:	2109      	movs	r1, #9
 8004762:	4807      	ldr	r0, [pc, #28]	@ (8004780 <global_stdio_init.part.0+0x34>)
 8004764:	f7ff ff90 	bl	8004688 <std>
 8004768:	2202      	movs	r2, #2
 800476a:	2112      	movs	r1, #18
 800476c:	4805      	ldr	r0, [pc, #20]	@ (8004784 <global_stdio_init.part.0+0x38>)
 800476e:	f7ff ff8b 	bl	8004688 <std>
 8004772:	bd10      	pop	{r4, pc}
 8004774:	20002370 	.word	0x20002370
 8004778:	080046f5 	.word	0x080046f5
 800477c:	20002238 	.word	0x20002238
 8004780:	200022a0 	.word	0x200022a0
 8004784:	20002308 	.word	0x20002308

08004788 <__sfp_lock_acquire>:
 8004788:	b510      	push	{r4, lr}
 800478a:	4802      	ldr	r0, [pc, #8]	@ (8004794 <__sfp_lock_acquire+0xc>)
 800478c:	f000 fad5 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	20002379 	.word	0x20002379

08004798 <__sfp_lock_release>:
 8004798:	b510      	push	{r4, lr}
 800479a:	4802      	ldr	r0, [pc, #8]	@ (80047a4 <__sfp_lock_release+0xc>)
 800479c:	f000 face 	bl	8004d3c <__retarget_lock_release_recursive>
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	20002379 	.word	0x20002379

080047a8 <__sinit>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	0004      	movs	r4, r0
 80047ac:	f7ff ffec 	bl	8004788 <__sfp_lock_acquire>
 80047b0:	6a23      	ldr	r3, [r4, #32]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <__sinit+0x14>
 80047b6:	f7ff ffef 	bl	8004798 <__sfp_lock_release>
 80047ba:	bd10      	pop	{r4, pc}
 80047bc:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <__sinit+0x28>)
 80047be:	6223      	str	r3, [r4, #32]
 80047c0:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <__sinit+0x2c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f6      	bne.n	80047b6 <__sinit+0xe>
 80047c8:	f7ff ffc0 	bl	800474c <global_stdio_init.part.0>
 80047cc:	e7f3      	b.n	80047b6 <__sinit+0xe>
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	08004711 	.word	0x08004711
 80047d4:	20002370 	.word	0x20002370

080047d8 <_fwalk_sglue>:
 80047d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047da:	0014      	movs	r4, r2
 80047dc:	2600      	movs	r6, #0
 80047de:	9000      	str	r0, [sp, #0]
 80047e0:	9101      	str	r1, [sp, #4]
 80047e2:	68a5      	ldr	r5, [r4, #8]
 80047e4:	6867      	ldr	r7, [r4, #4]
 80047e6:	3f01      	subs	r7, #1
 80047e8:	d504      	bpl.n	80047f4 <_fwalk_sglue+0x1c>
 80047ea:	6824      	ldr	r4, [r4, #0]
 80047ec:	2c00      	cmp	r4, #0
 80047ee:	d1f8      	bne.n	80047e2 <_fwalk_sglue+0xa>
 80047f0:	0030      	movs	r0, r6
 80047f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047f4:	89ab      	ldrh	r3, [r5, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d908      	bls.n	800480c <_fwalk_sglue+0x34>
 80047fa:	220e      	movs	r2, #14
 80047fc:	5eab      	ldrsh	r3, [r5, r2]
 80047fe:	3301      	adds	r3, #1
 8004800:	d004      	beq.n	800480c <_fwalk_sglue+0x34>
 8004802:	0029      	movs	r1, r5
 8004804:	9800      	ldr	r0, [sp, #0]
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	4798      	blx	r3
 800480a:	4306      	orrs	r6, r0
 800480c:	3568      	adds	r5, #104	@ 0x68
 800480e:	e7ea      	b.n	80047e6 <_fwalk_sglue+0xe>

08004810 <iprintf>:
 8004810:	b40f      	push	{r0, r1, r2, r3}
 8004812:	b507      	push	{r0, r1, r2, lr}
 8004814:	4905      	ldr	r1, [pc, #20]	@ (800482c <iprintf+0x1c>)
 8004816:	ab04      	add	r3, sp, #16
 8004818:	6808      	ldr	r0, [r1, #0]
 800481a:	cb04      	ldmia	r3!, {r2}
 800481c:	6881      	ldr	r1, [r0, #8]
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	f000 fed8 	bl	80055d4 <_vfiprintf_r>
 8004824:	b003      	add	sp, #12
 8004826:	bc08      	pop	{r3}
 8004828:	b004      	add	sp, #16
 800482a:	4718      	bx	r3
 800482c:	20000034 	.word	0x20000034

08004830 <_puts_r>:
 8004830:	6a03      	ldr	r3, [r0, #32]
 8004832:	b570      	push	{r4, r5, r6, lr}
 8004834:	0005      	movs	r5, r0
 8004836:	000e      	movs	r6, r1
 8004838:	6884      	ldr	r4, [r0, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <_puts_r+0x12>
 800483e:	f7ff ffb3 	bl	80047a8 <__sinit>
 8004842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004844:	07db      	lsls	r3, r3, #31
 8004846:	d405      	bmi.n	8004854 <_puts_r+0x24>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	059b      	lsls	r3, r3, #22
 800484c:	d402      	bmi.n	8004854 <_puts_r+0x24>
 800484e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004850:	f000 fa73 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	071b      	lsls	r3, r3, #28
 8004858:	d502      	bpl.n	8004860 <_puts_r+0x30>
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11f      	bne.n	80048a0 <_puts_r+0x70>
 8004860:	0021      	movs	r1, r4
 8004862:	0028      	movs	r0, r5
 8004864:	f000 f920 	bl	8004aa8 <__swsetup_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	d019      	beq.n	80048a0 <_puts_r+0x70>
 800486c:	2501      	movs	r5, #1
 800486e:	426d      	negs	r5, r5
 8004870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d405      	bmi.n	8004882 <_puts_r+0x52>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	059b      	lsls	r3, r3, #22
 800487a:	d402      	bmi.n	8004882 <_puts_r+0x52>
 800487c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800487e:	f000 fa5d 	bl	8004d3c <__retarget_lock_release_recursive>
 8004882:	0028      	movs	r0, r5
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	3601      	adds	r6, #1
 8004888:	60a3      	str	r3, [r4, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	da04      	bge.n	8004898 <_puts_r+0x68>
 800488e:	69a2      	ldr	r2, [r4, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	dc16      	bgt.n	80048c2 <_puts_r+0x92>
 8004894:	290a      	cmp	r1, #10
 8004896:	d014      	beq.n	80048c2 <_puts_r+0x92>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	6022      	str	r2, [r4, #0]
 800489e:	7019      	strb	r1, [r3, #0]
 80048a0:	68a3      	ldr	r3, [r4, #8]
 80048a2:	7831      	ldrb	r1, [r6, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d1ed      	bne.n	8004886 <_puts_r+0x56>
 80048aa:	60a3      	str	r3, [r4, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da0f      	bge.n	80048d0 <_puts_r+0xa0>
 80048b0:	0022      	movs	r2, r4
 80048b2:	0028      	movs	r0, r5
 80048b4:	310a      	adds	r1, #10
 80048b6:	f000 f8b5 	bl	8004a24 <__swbuf_r>
 80048ba:	3001      	adds	r0, #1
 80048bc:	d0d6      	beq.n	800486c <_puts_r+0x3c>
 80048be:	250a      	movs	r5, #10
 80048c0:	e7d6      	b.n	8004870 <_puts_r+0x40>
 80048c2:	0022      	movs	r2, r4
 80048c4:	0028      	movs	r0, r5
 80048c6:	f000 f8ad 	bl	8004a24 <__swbuf_r>
 80048ca:	3001      	adds	r0, #1
 80048cc:	d1e8      	bne.n	80048a0 <_puts_r+0x70>
 80048ce:	e7cd      	b.n	800486c <_puts_r+0x3c>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	6022      	str	r2, [r4, #0]
 80048d6:	220a      	movs	r2, #10
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e7f0      	b.n	80048be <_puts_r+0x8e>

080048dc <puts>:
 80048dc:	b510      	push	{r4, lr}
 80048de:	4b03      	ldr	r3, [pc, #12]	@ (80048ec <puts+0x10>)
 80048e0:	0001      	movs	r1, r0
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	f7ff ffa4 	bl	8004830 <_puts_r>
 80048e8:	bd10      	pop	{r4, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	20000034 	.word	0x20000034

080048f0 <siprintf>:
 80048f0:	b40e      	push	{r1, r2, r3}
 80048f2:	b510      	push	{r4, lr}
 80048f4:	2400      	movs	r4, #0
 80048f6:	490c      	ldr	r1, [pc, #48]	@ (8004928 <siprintf+0x38>)
 80048f8:	b09d      	sub	sp, #116	@ 0x74
 80048fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	9006      	str	r0, [sp, #24]
 8004900:	9107      	str	r1, [sp, #28]
 8004902:	9104      	str	r1, [sp, #16]
 8004904:	4809      	ldr	r0, [pc, #36]	@ (800492c <siprintf+0x3c>)
 8004906:	490a      	ldr	r1, [pc, #40]	@ (8004930 <siprintf+0x40>)
 8004908:	cb04      	ldmia	r3!, {r2}
 800490a:	9105      	str	r1, [sp, #20]
 800490c:	6800      	ldr	r0, [r0, #0]
 800490e:	a902      	add	r1, sp, #8
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004914:	f000 fb78 	bl	8005008 <_svfiprintf_r>
 8004918:	9b02      	ldr	r3, [sp, #8]
 800491a:	701c      	strb	r4, [r3, #0]
 800491c:	b01d      	add	sp, #116	@ 0x74
 800491e:	bc10      	pop	{r4}
 8004920:	bc08      	pop	{r3}
 8004922:	b003      	add	sp, #12
 8004924:	4718      	bx	r3
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	7fffffff 	.word	0x7fffffff
 800492c:	20000034 	.word	0x20000034
 8004930:	ffff0208 	.word	0xffff0208

08004934 <siscanf>:
 8004934:	b40e      	push	{r1, r2, r3}
 8004936:	b570      	push	{r4, r5, r6, lr}
 8004938:	2381      	movs	r3, #129	@ 0x81
 800493a:	b09d      	sub	sp, #116	@ 0x74
 800493c:	466a      	mov	r2, sp
 800493e:	2500      	movs	r5, #0
 8004940:	ac21      	add	r4, sp, #132	@ 0x84
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	cc40      	ldmia	r4!, {r6}
 8004946:	8293      	strh	r3, [r2, #20]
 8004948:	951b      	str	r5, [sp, #108]	@ 0x6c
 800494a:	9002      	str	r0, [sp, #8]
 800494c:	9006      	str	r0, [sp, #24]
 800494e:	f7fb fbdb 	bl	8000108 <strlen>
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <siscanf+0x4c>)
 8004954:	466a      	mov	r2, sp
 8004956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004958:	2301      	movs	r3, #1
 800495a:	9003      	str	r0, [sp, #12]
 800495c:	9007      	str	r0, [sp, #28]
 800495e:	4809      	ldr	r0, [pc, #36]	@ (8004984 <siscanf+0x50>)
 8004960:	425b      	negs	r3, r3
 8004962:	82d3      	strh	r3, [r2, #22]
 8004964:	a902      	add	r1, sp, #8
 8004966:	0023      	movs	r3, r4
 8004968:	0032      	movs	r2, r6
 800496a:	6800      	ldr	r0, [r0, #0]
 800496c:	950f      	str	r5, [sp, #60]	@ 0x3c
 800496e:	9514      	str	r5, [sp, #80]	@ 0x50
 8004970:	9401      	str	r4, [sp, #4]
 8004972:	f000 fca3 	bl	80052bc <__ssvfiscanf_r>
 8004976:	b01d      	add	sp, #116	@ 0x74
 8004978:	bc70      	pop	{r4, r5, r6}
 800497a:	bc08      	pop	{r3}
 800497c:	b003      	add	sp, #12
 800497e:	4718      	bx	r3
 8004980:	080049b1 	.word	0x080049b1
 8004984:	20000034 	.word	0x20000034

08004988 <__sread>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	000c      	movs	r4, r1
 800498c:	250e      	movs	r5, #14
 800498e:	5f49      	ldrsh	r1, [r1, r5]
 8004990:	f000 f980 	bl	8004c94 <_read_r>
 8004994:	2800      	cmp	r0, #0
 8004996:	db03      	blt.n	80049a0 <__sread+0x18>
 8004998:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800499a:	181b      	adds	r3, r3, r0
 800499c:	6563      	str	r3, [r4, #84]	@ 0x54
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	4a02      	ldr	r2, [pc, #8]	@ (80049ac <__sread+0x24>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	e7f9      	b.n	800499e <__sread+0x16>
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	ffffefff 	.word	0xffffefff

080049b0 <__seofread>:
 80049b0:	2000      	movs	r0, #0
 80049b2:	4770      	bx	lr

080049b4 <__swrite>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	001f      	movs	r7, r3
 80049b8:	898b      	ldrh	r3, [r1, #12]
 80049ba:	0005      	movs	r5, r0
 80049bc:	000c      	movs	r4, r1
 80049be:	0016      	movs	r6, r2
 80049c0:	05db      	lsls	r3, r3, #23
 80049c2:	d505      	bpl.n	80049d0 <__swrite+0x1c>
 80049c4:	230e      	movs	r3, #14
 80049c6:	5ec9      	ldrsh	r1, [r1, r3]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2302      	movs	r3, #2
 80049cc:	f000 f94e 	bl	8004c6c <_lseek_r>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	4a05      	ldr	r2, [pc, #20]	@ (80049e8 <__swrite+0x34>)
 80049d4:	0028      	movs	r0, r5
 80049d6:	4013      	ands	r3, r2
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	0032      	movs	r2, r6
 80049dc:	230e      	movs	r3, #14
 80049de:	5ee1      	ldrsh	r1, [r4, r3]
 80049e0:	003b      	movs	r3, r7
 80049e2:	f000 f96b 	bl	8004cbc <_write_r>
 80049e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e8:	ffffefff 	.word	0xffffefff

080049ec <__sseek>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	000c      	movs	r4, r1
 80049f0:	250e      	movs	r5, #14
 80049f2:	5f49      	ldrsh	r1, [r1, r5]
 80049f4:	f000 f93a 	bl	8004c6c <_lseek_r>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	1c42      	adds	r2, r0, #1
 80049fc:	d103      	bne.n	8004a06 <__sseek+0x1a>
 80049fe:	4a05      	ldr	r2, [pc, #20]	@ (8004a14 <__sseek+0x28>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	2280      	movs	r2, #128	@ 0x80
 8004a08:	0152      	lsls	r2, r2, #5
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a10:	e7f8      	b.n	8004a04 <__sseek+0x18>
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	ffffefff 	.word	0xffffefff

08004a18 <__sclose>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	230e      	movs	r3, #14
 8004a1c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a1e:	f000 f8a9 	bl	8004b74 <_close_r>
 8004a22:	bd10      	pop	{r4, pc}

08004a24 <__swbuf_r>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	0006      	movs	r6, r0
 8004a28:	000d      	movs	r5, r1
 8004a2a:	0014      	movs	r4, r2
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d004      	beq.n	8004a3a <__swbuf_r+0x16>
 8004a30:	6a03      	ldr	r3, [r0, #32]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <__swbuf_r+0x16>
 8004a36:	f7ff feb7 	bl	80047a8 <__sinit>
 8004a3a:	69a3      	ldr	r3, [r4, #24]
 8004a3c:	60a3      	str	r3, [r4, #8]
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	d502      	bpl.n	8004a4a <__swbuf_r+0x26>
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <__swbuf_r+0x3a>
 8004a4a:	0021      	movs	r1, r4
 8004a4c:	0030      	movs	r0, r6
 8004a4e:	f000 f82b 	bl	8004aa8 <__swsetup_r>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d003      	beq.n	8004a5e <__swbuf_r+0x3a>
 8004a56:	2501      	movs	r5, #1
 8004a58:	426d      	negs	r5, r5
 8004a5a:	0028      	movs	r0, r5
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	b2ef      	uxtb	r7, r5
 8004a64:	1ac0      	subs	r0, r0, r3
 8004a66:	6963      	ldr	r3, [r4, #20]
 8004a68:	b2ed      	uxtb	r5, r5
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	dc05      	bgt.n	8004a7a <__swbuf_r+0x56>
 8004a6e:	0021      	movs	r1, r4
 8004a70:	0030      	movs	r0, r6
 8004a72:	f001 fa2d 	bl	8005ed0 <_fflush_r>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d1ed      	bne.n	8004a56 <__swbuf_r+0x32>
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	701f      	strb	r7, [r3, #0]
 8004a8a:	6963      	ldr	r3, [r4, #20]
 8004a8c:	4283      	cmp	r3, r0
 8004a8e:	d004      	beq.n	8004a9a <__swbuf_r+0x76>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	07db      	lsls	r3, r3, #31
 8004a94:	d5e1      	bpl.n	8004a5a <__swbuf_r+0x36>
 8004a96:	2d0a      	cmp	r5, #10
 8004a98:	d1df      	bne.n	8004a5a <__swbuf_r+0x36>
 8004a9a:	0021      	movs	r1, r4
 8004a9c:	0030      	movs	r0, r6
 8004a9e:	f001 fa17 	bl	8005ed0 <_fflush_r>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d0d9      	beq.n	8004a5a <__swbuf_r+0x36>
 8004aa6:	e7d6      	b.n	8004a56 <__swbuf_r+0x32>

08004aa8 <__swsetup_r>:
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b60 <__swsetup_r+0xb8>)
 8004aaa:	b570      	push	{r4, r5, r6, lr}
 8004aac:	0005      	movs	r5, r0
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	000c      	movs	r4, r1
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d004      	beq.n	8004ac0 <__swsetup_r+0x18>
 8004ab6:	6a03      	ldr	r3, [r0, #32]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <__swsetup_r+0x18>
 8004abc:	f7ff fe74 	bl	80047a8 <__sinit>
 8004ac0:	220c      	movs	r2, #12
 8004ac2:	5ea3      	ldrsh	r3, [r4, r2]
 8004ac4:	071a      	lsls	r2, r3, #28
 8004ac6:	d423      	bmi.n	8004b10 <__swsetup_r+0x68>
 8004ac8:	06da      	lsls	r2, r3, #27
 8004aca:	d407      	bmi.n	8004adc <__swsetup_r+0x34>
 8004acc:	2209      	movs	r2, #9
 8004ace:	602a      	str	r2, [r5, #0]
 8004ad0:	2240      	movs	r2, #64	@ 0x40
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	4240      	negs	r0, r0
 8004ada:	e03a      	b.n	8004b52 <__swsetup_r+0xaa>
 8004adc:	075b      	lsls	r3, r3, #29
 8004ade:	d513      	bpl.n	8004b08 <__swsetup_r+0x60>
 8004ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	d008      	beq.n	8004af8 <__swsetup_r+0x50>
 8004ae6:	0023      	movs	r3, r4
 8004ae8:	3344      	adds	r3, #68	@ 0x44
 8004aea:	4299      	cmp	r1, r3
 8004aec:	d002      	beq.n	8004af4 <__swsetup_r+0x4c>
 8004aee:	0028      	movs	r0, r5
 8004af0:	f000 f92e 	bl	8004d50 <_free_r>
 8004af4:	2300      	movs	r3, #0
 8004af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004af8:	2224      	movs	r2, #36	@ 0x24
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	4393      	bics	r3, r2
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	2300      	movs	r3, #0
 8004b02:	6063      	str	r3, [r4, #4]
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2308      	movs	r3, #8
 8004b0a:	89a2      	ldrh	r2, [r4, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <__swsetup_r+0x86>
 8004b16:	21a0      	movs	r1, #160	@ 0xa0
 8004b18:	2280      	movs	r2, #128	@ 0x80
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	0089      	lsls	r1, r1, #2
 8004b1e:	0092      	lsls	r2, r2, #2
 8004b20:	400b      	ands	r3, r1
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <__swsetup_r+0x86>
 8004b26:	0021      	movs	r1, r4
 8004b28:	0028      	movs	r0, r5
 8004b2a:	f001 fa27 	bl	8005f7c <__smakebuf_r>
 8004b2e:	220c      	movs	r2, #12
 8004b30:	5ea3      	ldrsh	r3, [r4, r2]
 8004b32:	2101      	movs	r1, #1
 8004b34:	001a      	movs	r2, r3
 8004b36:	400a      	ands	r2, r1
 8004b38:	420b      	tst	r3, r1
 8004b3a:	d00b      	beq.n	8004b54 <__swsetup_r+0xac>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	60a2      	str	r2, [r4, #8]
 8004b40:	6962      	ldr	r2, [r4, #20]
 8004b42:	4252      	negs	r2, r2
 8004b44:	61a2      	str	r2, [r4, #24]
 8004b46:	2000      	movs	r0, #0
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	4282      	cmp	r2, r0
 8004b4c:	d101      	bne.n	8004b52 <__swsetup_r+0xaa>
 8004b4e:	061a      	lsls	r2, r3, #24
 8004b50:	d4be      	bmi.n	8004ad0 <__swsetup_r+0x28>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	0799      	lsls	r1, r3, #30
 8004b56:	d400      	bmi.n	8004b5a <__swsetup_r+0xb2>
 8004b58:	6962      	ldr	r2, [r4, #20]
 8004b5a:	60a2      	str	r2, [r4, #8]
 8004b5c:	e7f3      	b.n	8004b46 <__swsetup_r+0x9e>
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	20000034 	.word	0x20000034

08004b64 <memset>:
 8004b64:	0003      	movs	r3, r0
 8004b66:	1882      	adds	r2, r0, r2
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d100      	bne.n	8004b6e <memset+0xa>
 8004b6c:	4770      	bx	lr
 8004b6e:	7019      	strb	r1, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	e7f9      	b.n	8004b68 <memset+0x4>

08004b74 <_close_r>:
 8004b74:	2300      	movs	r3, #0
 8004b76:	b570      	push	{r4, r5, r6, lr}
 8004b78:	4d06      	ldr	r5, [pc, #24]	@ (8004b94 <_close_r+0x20>)
 8004b7a:	0004      	movs	r4, r0
 8004b7c:	0008      	movs	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc fb9b 	bl	80012ba <_close>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d103      	bne.n	8004b90 <_close_r+0x1c>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d000      	beq.n	8004b90 <_close_r+0x1c>
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	20002374 	.word	0x20002374

08004b98 <_reclaim_reent>:
 8004b98:	4b33      	ldr	r3, [pc, #204]	@ (8004c68 <_reclaim_reent+0xd0>)
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	0004      	movs	r4, r0
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d05f      	beq.n	8004c64 <_reclaim_reent+0xcc>
 8004ba4:	69c3      	ldr	r3, [r0, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d027      	beq.n	8004bfa <_reclaim_reent+0x62>
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <_reclaim_reent+0x34>
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	69e3      	ldr	r3, [r4, #28]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	5959      	ldr	r1, [r3, r5]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d118      	bne.n	8004bee <_reclaim_reent+0x56>
 8004bbc:	3504      	adds	r5, #4
 8004bbe:	2d80      	cmp	r5, #128	@ 0x80
 8004bc0:	d1f7      	bne.n	8004bb2 <_reclaim_reent+0x1a>
 8004bc2:	69e3      	ldr	r3, [r4, #28]
 8004bc4:	0020      	movs	r0, r4
 8004bc6:	68d9      	ldr	r1, [r3, #12]
 8004bc8:	f000 f8c2 	bl	8004d50 <_free_r>
 8004bcc:	69e3      	ldr	r3, [r4, #28]
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d002      	beq.n	8004bda <_reclaim_reent+0x42>
 8004bd4:	0020      	movs	r0, r4
 8004bd6:	f000 f8bb 	bl	8004d50 <_free_r>
 8004bda:	69e3      	ldr	r3, [r4, #28]
 8004bdc:	689d      	ldr	r5, [r3, #8]
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	d00b      	beq.n	8004bfa <_reclaim_reent+0x62>
 8004be2:	0029      	movs	r1, r5
 8004be4:	0020      	movs	r0, r4
 8004be6:	682d      	ldr	r5, [r5, #0]
 8004be8:	f000 f8b2 	bl	8004d50 <_free_r>
 8004bec:	e7f7      	b.n	8004bde <_reclaim_reent+0x46>
 8004bee:	680e      	ldr	r6, [r1, #0]
 8004bf0:	0020      	movs	r0, r4
 8004bf2:	f000 f8ad 	bl	8004d50 <_free_r>
 8004bf6:	0031      	movs	r1, r6
 8004bf8:	e7de      	b.n	8004bb8 <_reclaim_reent+0x20>
 8004bfa:	6961      	ldr	r1, [r4, #20]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	d002      	beq.n	8004c06 <_reclaim_reent+0x6e>
 8004c00:	0020      	movs	r0, r4
 8004c02:	f000 f8a5 	bl	8004d50 <_free_r>
 8004c06:	69e1      	ldr	r1, [r4, #28]
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	d002      	beq.n	8004c12 <_reclaim_reent+0x7a>
 8004c0c:	0020      	movs	r0, r4
 8004c0e:	f000 f89f 	bl	8004d50 <_free_r>
 8004c12:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d002      	beq.n	8004c1e <_reclaim_reent+0x86>
 8004c18:	0020      	movs	r0, r4
 8004c1a:	f000 f899 	bl	8004d50 <_free_r>
 8004c1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c20:	2900      	cmp	r1, #0
 8004c22:	d002      	beq.n	8004c2a <_reclaim_reent+0x92>
 8004c24:	0020      	movs	r0, r4
 8004c26:	f000 f893 	bl	8004d50 <_free_r>
 8004c2a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d002      	beq.n	8004c36 <_reclaim_reent+0x9e>
 8004c30:	0020      	movs	r0, r4
 8004c32:	f000 f88d 	bl	8004d50 <_free_r>
 8004c36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d002      	beq.n	8004c42 <_reclaim_reent+0xaa>
 8004c3c:	0020      	movs	r0, r4
 8004c3e:	f000 f887 	bl	8004d50 <_free_r>
 8004c42:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d002      	beq.n	8004c4e <_reclaim_reent+0xb6>
 8004c48:	0020      	movs	r0, r4
 8004c4a:	f000 f881 	bl	8004d50 <_free_r>
 8004c4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d002      	beq.n	8004c5a <_reclaim_reent+0xc2>
 8004c54:	0020      	movs	r0, r4
 8004c56:	f000 f87b 	bl	8004d50 <_free_r>
 8004c5a:	6a23      	ldr	r3, [r4, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <_reclaim_reent+0xcc>
 8004c60:	0020      	movs	r0, r4
 8004c62:	4798      	blx	r3
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	20000034 	.word	0x20000034

08004c6c <_lseek_r>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	0004      	movs	r4, r0
 8004c70:	0008      	movs	r0, r1
 8004c72:	0011      	movs	r1, r2
 8004c74:	001a      	movs	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	4d05      	ldr	r5, [pc, #20]	@ (8004c90 <_lseek_r+0x24>)
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	f7fc fb3e 	bl	80012fc <_lseek>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d103      	bne.n	8004c8c <_lseek_r+0x20>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d000      	beq.n	8004c8c <_lseek_r+0x20>
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	20002374 	.word	0x20002374

08004c94 <_read_r>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	0004      	movs	r4, r0
 8004c98:	0008      	movs	r0, r1
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4d05      	ldr	r5, [pc, #20]	@ (8004cb8 <_read_r+0x24>)
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	f7fc faec 	bl	8001280 <_read>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_read_r+0x20>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d000      	beq.n	8004cb4 <_read_r+0x20>
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	20002374 	.word	0x20002374

08004cbc <_write_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	0004      	movs	r4, r0
 8004cc0:	0008      	movs	r0, r1
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4d05      	ldr	r5, [pc, #20]	@ (8004ce0 <_write_r+0x24>)
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc fece 	bl	8001a6c <_write>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_write_r+0x20>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d000      	beq.n	8004cdc <_write_r+0x20>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	20002374 	.word	0x20002374

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	@ (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	20000034 	.word	0x20000034

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	4c0c      	ldr	r4, [pc, #48]	@ (8004d28 <__libc_init_array+0x38>)
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d2c <__libc_init_array+0x3c>)
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	2600      	movs	r6, #0
 8004d02:	f001 fb93 	bl	800642c <_init>
 8004d06:	4c0a      	ldr	r4, [pc, #40]	@ (8004d30 <__libc_init_array+0x40>)
 8004d08:	4d0a      	ldr	r5, [pc, #40]	@ (8004d34 <__libc_init_array+0x44>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	00b3      	lsls	r3, r6, #2
 8004d16:	58eb      	ldr	r3, [r5, r3]
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	00b3      	lsls	r3, r6, #2
 8004d20:	58eb      	ldr	r3, [r5, r3]
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	08006714 	.word	0x08006714
 8004d2c:	08006714 	.word	0x08006714
 8004d30:	08006718 	.word	0x08006718
 8004d34:	08006714 	.word	0x08006714

08004d38 <__retarget_lock_init_recursive>:
 8004d38:	4770      	bx	lr

08004d3a <__retarget_lock_acquire_recursive>:
 8004d3a:	4770      	bx	lr

08004d3c <__retarget_lock_release_recursive>:
 8004d3c:	4770      	bx	lr

08004d3e <memcpy>:
 8004d3e:	2300      	movs	r3, #0
 8004d40:	b510      	push	{r4, lr}
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d100      	bne.n	8004d48 <memcpy+0xa>
 8004d46:	bd10      	pop	{r4, pc}
 8004d48:	5ccc      	ldrb	r4, [r1, r3]
 8004d4a:	54c4      	strb	r4, [r0, r3]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	e7f8      	b.n	8004d42 <memcpy+0x4>

08004d50 <_free_r>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	0005      	movs	r5, r0
 8004d54:	1e0c      	subs	r4, r1, #0
 8004d56:	d010      	beq.n	8004d7a <_free_r+0x2a>
 8004d58:	3c04      	subs	r4, #4
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da00      	bge.n	8004d62 <_free_r+0x12>
 8004d60:	18e4      	adds	r4, r4, r3
 8004d62:	0028      	movs	r0, r5
 8004d64:	f000 f8e0 	bl	8004f28 <__malloc_lock>
 8004d68:	4a1d      	ldr	r2, [pc, #116]	@ (8004de0 <_free_r+0x90>)
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <_free_r+0x2c>
 8004d70:	6063      	str	r3, [r4, #4]
 8004d72:	6014      	str	r4, [r2, #0]
 8004d74:	0028      	movs	r0, r5
 8004d76:	f000 f8df 	bl	8004f38 <__malloc_unlock>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	d908      	bls.n	8004d92 <_free_r+0x42>
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	1821      	adds	r1, r4, r0
 8004d84:	428b      	cmp	r3, r1
 8004d86:	d1f3      	bne.n	8004d70 <_free_r+0x20>
 8004d88:	6819      	ldr	r1, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	1809      	adds	r1, r1, r0
 8004d8e:	6021      	str	r1, [r4, #0]
 8004d90:	e7ee      	b.n	8004d70 <_free_r+0x20>
 8004d92:	001a      	movs	r2, r3
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <_free_r+0x4e>
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	d9f9      	bls.n	8004d92 <_free_r+0x42>
 8004d9e:	6811      	ldr	r1, [r2, #0]
 8004da0:	1850      	adds	r0, r2, r1
 8004da2:	42a0      	cmp	r0, r4
 8004da4:	d10b      	bne.n	8004dbe <_free_r+0x6e>
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	1809      	adds	r1, r1, r0
 8004daa:	1850      	adds	r0, r2, r1
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	4283      	cmp	r3, r0
 8004db0:	d1e0      	bne.n	8004d74 <_free_r+0x24>
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	1841      	adds	r1, r0, r1
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	6053      	str	r3, [r2, #4]
 8004dbc:	e7da      	b.n	8004d74 <_free_r+0x24>
 8004dbe:	42a0      	cmp	r0, r4
 8004dc0:	d902      	bls.n	8004dc8 <_free_r+0x78>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	e7d5      	b.n	8004d74 <_free_r+0x24>
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	1821      	adds	r1, r4, r0
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d103      	bne.n	8004dd8 <_free_r+0x88>
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	1809      	adds	r1, r1, r0
 8004dd6:	6021      	str	r1, [r4, #0]
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	6054      	str	r4, [r2, #4]
 8004ddc:	e7ca      	b.n	8004d74 <_free_r+0x24>
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	20002380 	.word	0x20002380

08004de4 <sbrk_aligned>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4e0f      	ldr	r6, [pc, #60]	@ (8004e24 <sbrk_aligned+0x40>)
 8004de8:	000d      	movs	r5, r1
 8004dea:	6831      	ldr	r1, [r6, #0]
 8004dec:	0004      	movs	r4, r0
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d102      	bne.n	8004df8 <sbrk_aligned+0x14>
 8004df2:	f001 f9b1 	bl	8006158 <_sbrk_r>
 8004df6:	6030      	str	r0, [r6, #0]
 8004df8:	0029      	movs	r1, r5
 8004dfa:	0020      	movs	r0, r4
 8004dfc:	f001 f9ac 	bl	8006158 <_sbrk_r>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d103      	bne.n	8004e0c <sbrk_aligned+0x28>
 8004e04:	2501      	movs	r5, #1
 8004e06:	426d      	negs	r5, r5
 8004e08:	0028      	movs	r0, r5
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	1cc5      	adds	r5, r0, #3
 8004e10:	439d      	bics	r5, r3
 8004e12:	42a8      	cmp	r0, r5
 8004e14:	d0f8      	beq.n	8004e08 <sbrk_aligned+0x24>
 8004e16:	1a29      	subs	r1, r5, r0
 8004e18:	0020      	movs	r0, r4
 8004e1a:	f001 f99d 	bl	8006158 <_sbrk_r>
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d1f2      	bne.n	8004e08 <sbrk_aligned+0x24>
 8004e22:	e7ef      	b.n	8004e04 <sbrk_aligned+0x20>
 8004e24:	2000237c 	.word	0x2000237c

08004e28 <_malloc_r>:
 8004e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	1ccb      	adds	r3, r1, #3
 8004e2e:	4393      	bics	r3, r2
 8004e30:	3308      	adds	r3, #8
 8004e32:	0005      	movs	r5, r0
 8004e34:	001f      	movs	r7, r3
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d234      	bcs.n	8004ea4 <_malloc_r+0x7c>
 8004e3a:	270c      	movs	r7, #12
 8004e3c:	42b9      	cmp	r1, r7
 8004e3e:	d833      	bhi.n	8004ea8 <_malloc_r+0x80>
 8004e40:	0028      	movs	r0, r5
 8004e42:	f000 f871 	bl	8004f28 <__malloc_lock>
 8004e46:	4e37      	ldr	r6, [pc, #220]	@ (8004f24 <_malloc_r+0xfc>)
 8004e48:	6833      	ldr	r3, [r6, #0]
 8004e4a:	001c      	movs	r4, r3
 8004e4c:	2c00      	cmp	r4, #0
 8004e4e:	d12f      	bne.n	8004eb0 <_malloc_r+0x88>
 8004e50:	0039      	movs	r1, r7
 8004e52:	0028      	movs	r0, r5
 8004e54:	f7ff ffc6 	bl	8004de4 <sbrk_aligned>
 8004e58:	0004      	movs	r4, r0
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d15f      	bne.n	8004f1e <_malloc_r+0xf6>
 8004e5e:	6834      	ldr	r4, [r6, #0]
 8004e60:	9400      	str	r4, [sp, #0]
 8004e62:	9b00      	ldr	r3, [sp, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d14a      	bne.n	8004efe <_malloc_r+0xd6>
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	d052      	beq.n	8004f12 <_malloc_r+0xea>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	0028      	movs	r0, r5
 8004e70:	18e3      	adds	r3, r4, r3
 8004e72:	9900      	ldr	r1, [sp, #0]
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	f001 f96f 	bl	8006158 <_sbrk_r>
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	4283      	cmp	r3, r0
 8004e7e:	d148      	bne.n	8004f12 <_malloc_r+0xea>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	0028      	movs	r0, r5
 8004e84:	1aff      	subs	r7, r7, r3
 8004e86:	0039      	movs	r1, r7
 8004e88:	f7ff ffac 	bl	8004de4 <sbrk_aligned>
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d040      	beq.n	8004f12 <_malloc_r+0xea>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	19db      	adds	r3, r3, r7
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	6833      	ldr	r3, [r6, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d133      	bne.n	8004f06 <_malloc_r+0xde>
 8004e9e:	9b00      	ldr	r3, [sp, #0]
 8004ea0:	6033      	str	r3, [r6, #0]
 8004ea2:	e019      	b.n	8004ed8 <_malloc_r+0xb0>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dac9      	bge.n	8004e3c <_malloc_r+0x14>
 8004ea8:	230c      	movs	r3, #12
 8004eaa:	602b      	str	r3, [r5, #0]
 8004eac:	2000      	movs	r0, #0
 8004eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eb0:	6821      	ldr	r1, [r4, #0]
 8004eb2:	1bc9      	subs	r1, r1, r7
 8004eb4:	d420      	bmi.n	8004ef8 <_malloc_r+0xd0>
 8004eb6:	290b      	cmp	r1, #11
 8004eb8:	d90a      	bls.n	8004ed0 <_malloc_r+0xa8>
 8004eba:	19e2      	adds	r2, r4, r7
 8004ebc:	6027      	str	r7, [r4, #0]
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	d104      	bne.n	8004ecc <_malloc_r+0xa4>
 8004ec2:	6032      	str	r2, [r6, #0]
 8004ec4:	6863      	ldr	r3, [r4, #4]
 8004ec6:	6011      	str	r1, [r2, #0]
 8004ec8:	6053      	str	r3, [r2, #4]
 8004eca:	e005      	b.n	8004ed8 <_malloc_r+0xb0>
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	e7f9      	b.n	8004ec4 <_malloc_r+0x9c>
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	42a3      	cmp	r3, r4
 8004ed4:	d10e      	bne.n	8004ef4 <_malloc_r+0xcc>
 8004ed6:	6032      	str	r2, [r6, #0]
 8004ed8:	0028      	movs	r0, r5
 8004eda:	f000 f82d 	bl	8004f38 <__malloc_unlock>
 8004ede:	0020      	movs	r0, r4
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	300b      	adds	r0, #11
 8004ee4:	1d23      	adds	r3, r4, #4
 8004ee6:	4390      	bics	r0, r2
 8004ee8:	1ac2      	subs	r2, r0, r3
 8004eea:	4298      	cmp	r0, r3
 8004eec:	d0df      	beq.n	8004eae <_malloc_r+0x86>
 8004eee:	1a1b      	subs	r3, r3, r0
 8004ef0:	50a3      	str	r3, [r4, r2]
 8004ef2:	e7dc      	b.n	8004eae <_malloc_r+0x86>
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	e7ef      	b.n	8004ed8 <_malloc_r+0xb0>
 8004ef8:	0023      	movs	r3, r4
 8004efa:	6864      	ldr	r4, [r4, #4]
 8004efc:	e7a6      	b.n	8004e4c <_malloc_r+0x24>
 8004efe:	9c00      	ldr	r4, [sp, #0]
 8004f00:	6863      	ldr	r3, [r4, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	e7ad      	b.n	8004e62 <_malloc_r+0x3a>
 8004f06:	001a      	movs	r2, r3
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	d1fb      	bne.n	8004f06 <_malloc_r+0xde>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e7da      	b.n	8004ec8 <_malloc_r+0xa0>
 8004f12:	230c      	movs	r3, #12
 8004f14:	0028      	movs	r0, r5
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f000 f80e 	bl	8004f38 <__malloc_unlock>
 8004f1c:	e7c6      	b.n	8004eac <_malloc_r+0x84>
 8004f1e:	6007      	str	r7, [r0, #0]
 8004f20:	e7da      	b.n	8004ed8 <_malloc_r+0xb0>
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	20002380 	.word	0x20002380

08004f28 <__malloc_lock>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	4802      	ldr	r0, [pc, #8]	@ (8004f34 <__malloc_lock+0xc>)
 8004f2c:	f7ff ff05 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	20002378 	.word	0x20002378

08004f38 <__malloc_unlock>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	4802      	ldr	r0, [pc, #8]	@ (8004f44 <__malloc_unlock+0xc>)
 8004f3c:	f7ff fefe 	bl	8004d3c <__retarget_lock_release_recursive>
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	46c0      	nop			@ (mov r8, r8)
 8004f44:	20002378 	.word	0x20002378

08004f48 <__ssputs_r>:
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	688e      	ldr	r6, [r1, #8]
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	001f      	movs	r7, r3
 8004f50:	000c      	movs	r4, r1
 8004f52:	680b      	ldr	r3, [r1, #0]
 8004f54:	9002      	str	r0, [sp, #8]
 8004f56:	9203      	str	r2, [sp, #12]
 8004f58:	42be      	cmp	r6, r7
 8004f5a:	d830      	bhi.n	8004fbe <__ssputs_r+0x76>
 8004f5c:	210c      	movs	r1, #12
 8004f5e:	5e62      	ldrsh	r2, [r4, r1]
 8004f60:	2190      	movs	r1, #144	@ 0x90
 8004f62:	00c9      	lsls	r1, r1, #3
 8004f64:	420a      	tst	r2, r1
 8004f66:	d028      	beq.n	8004fba <__ssputs_r+0x72>
 8004f68:	2003      	movs	r0, #3
 8004f6a:	6921      	ldr	r1, [r4, #16]
 8004f6c:	1a5b      	subs	r3, r3, r1
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	6963      	ldr	r3, [r4, #20]
 8004f72:	4343      	muls	r3, r0
 8004f74:	9801      	ldr	r0, [sp, #4]
 8004f76:	0fdd      	lsrs	r5, r3, #31
 8004f78:	18ed      	adds	r5, r5, r3
 8004f7a:	1c7b      	adds	r3, r7, #1
 8004f7c:	181b      	adds	r3, r3, r0
 8004f7e:	106d      	asrs	r5, r5, #1
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	d900      	bls.n	8004f86 <__ssputs_r+0x3e>
 8004f84:	001d      	movs	r5, r3
 8004f86:	0552      	lsls	r2, r2, #21
 8004f88:	d528      	bpl.n	8004fdc <__ssputs_r+0x94>
 8004f8a:	0029      	movs	r1, r5
 8004f8c:	9802      	ldr	r0, [sp, #8]
 8004f8e:	f7ff ff4b 	bl	8004e28 <_malloc_r>
 8004f92:	1e06      	subs	r6, r0, #0
 8004f94:	d02c      	beq.n	8004ff0 <__ssputs_r+0xa8>
 8004f96:	9a01      	ldr	r2, [sp, #4]
 8004f98:	6921      	ldr	r1, [r4, #16]
 8004f9a:	f7ff fed0 	bl	8004d3e <memcpy>
 8004f9e:	89a2      	ldrh	r2, [r4, #12]
 8004fa0:	4b18      	ldr	r3, [pc, #96]	@ (8005004 <__ssputs_r+0xbc>)
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	9b01      	ldr	r3, [sp, #4]
 8004fac:	6126      	str	r6, [r4, #16]
 8004fae:	18f6      	adds	r6, r6, r3
 8004fb0:	6026      	str	r6, [r4, #0]
 8004fb2:	003e      	movs	r6, r7
 8004fb4:	6165      	str	r5, [r4, #20]
 8004fb6:	1aed      	subs	r5, r5, r3
 8004fb8:	60a5      	str	r5, [r4, #8]
 8004fba:	42be      	cmp	r6, r7
 8004fbc:	d900      	bls.n	8004fc0 <__ssputs_r+0x78>
 8004fbe:	003e      	movs	r6, r7
 8004fc0:	0032      	movs	r2, r6
 8004fc2:	9903      	ldr	r1, [sp, #12]
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	f001 f891 	bl	80060ec <memmove>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	68a3      	ldr	r3, [r4, #8]
 8004fce:	1b9b      	subs	r3, r3, r6
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	199b      	adds	r3, r3, r6
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	b005      	add	sp, #20
 8004fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fdc:	002a      	movs	r2, r5
 8004fde:	9802      	ldr	r0, [sp, #8]
 8004fe0:	f001 f8d7 	bl	8006192 <_realloc_r>
 8004fe4:	1e06      	subs	r6, r0, #0
 8004fe6:	d1e0      	bne.n	8004faa <__ssputs_r+0x62>
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	9802      	ldr	r0, [sp, #8]
 8004fec:	f7ff feb0 	bl	8004d50 <_free_r>
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	9a02      	ldr	r2, [sp, #8]
 8004ff6:	4240      	negs	r0, r0
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	89a2      	ldrh	r2, [r4, #12]
 8004ffc:	3334      	adds	r3, #52	@ 0x34
 8004ffe:	4313      	orrs	r3, r2
 8005000:	81a3      	strh	r3, [r4, #12]
 8005002:	e7e9      	b.n	8004fd8 <__ssputs_r+0x90>
 8005004:	fffffb7f 	.word	0xfffffb7f

08005008 <_svfiprintf_r>:
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500a:	b0a1      	sub	sp, #132	@ 0x84
 800500c:	9003      	str	r0, [sp, #12]
 800500e:	001d      	movs	r5, r3
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	000f      	movs	r7, r1
 8005014:	0016      	movs	r6, r2
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	d511      	bpl.n	800503e <_svfiprintf_r+0x36>
 800501a:	690b      	ldr	r3, [r1, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10e      	bne.n	800503e <_svfiprintf_r+0x36>
 8005020:	2140      	movs	r1, #64	@ 0x40
 8005022:	f7ff ff01 	bl	8004e28 <_malloc_r>
 8005026:	6038      	str	r0, [r7, #0]
 8005028:	6138      	str	r0, [r7, #16]
 800502a:	2800      	cmp	r0, #0
 800502c:	d105      	bne.n	800503a <_svfiprintf_r+0x32>
 800502e:	230c      	movs	r3, #12
 8005030:	9a03      	ldr	r2, [sp, #12]
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	2001      	movs	r0, #1
 8005036:	4240      	negs	r0, r0
 8005038:	e0cf      	b.n	80051da <_svfiprintf_r+0x1d2>
 800503a:	2340      	movs	r3, #64	@ 0x40
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	2300      	movs	r3, #0
 8005040:	ac08      	add	r4, sp, #32
 8005042:	6163      	str	r3, [r4, #20]
 8005044:	3320      	adds	r3, #32
 8005046:	7663      	strb	r3, [r4, #25]
 8005048:	3310      	adds	r3, #16
 800504a:	76a3      	strb	r3, [r4, #26]
 800504c:	9507      	str	r5, [sp, #28]
 800504e:	0035      	movs	r5, r6
 8005050:	782b      	ldrb	r3, [r5, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <_svfiprintf_r+0x52>
 8005056:	2b25      	cmp	r3, #37	@ 0x25
 8005058:	d148      	bne.n	80050ec <_svfiprintf_r+0xe4>
 800505a:	1bab      	subs	r3, r5, r6
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	42b5      	cmp	r5, r6
 8005060:	d00b      	beq.n	800507a <_svfiprintf_r+0x72>
 8005062:	0032      	movs	r2, r6
 8005064:	0039      	movs	r1, r7
 8005066:	9803      	ldr	r0, [sp, #12]
 8005068:	f7ff ff6e 	bl	8004f48 <__ssputs_r>
 800506c:	3001      	adds	r0, #1
 800506e:	d100      	bne.n	8005072 <_svfiprintf_r+0x6a>
 8005070:	e0ae      	b.n	80051d0 <_svfiprintf_r+0x1c8>
 8005072:	6963      	ldr	r3, [r4, #20]
 8005074:	9a05      	ldr	r2, [sp, #20]
 8005076:	189b      	adds	r3, r3, r2
 8005078:	6163      	str	r3, [r4, #20]
 800507a:	782b      	ldrb	r3, [r5, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d100      	bne.n	8005082 <_svfiprintf_r+0x7a>
 8005080:	e0a6      	b.n	80051d0 <_svfiprintf_r+0x1c8>
 8005082:	2201      	movs	r2, #1
 8005084:	2300      	movs	r3, #0
 8005086:	4252      	negs	r2, r2
 8005088:	6062      	str	r2, [r4, #4]
 800508a:	a904      	add	r1, sp, #16
 800508c:	3254      	adds	r2, #84	@ 0x54
 800508e:	1852      	adds	r2, r2, r1
 8005090:	1c6e      	adds	r6, r5, #1
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	60e3      	str	r3, [r4, #12]
 8005096:	60a3      	str	r3, [r4, #8]
 8005098:	7013      	strb	r3, [r2, #0]
 800509a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800509c:	4b54      	ldr	r3, [pc, #336]	@ (80051f0 <_svfiprintf_r+0x1e8>)
 800509e:	2205      	movs	r2, #5
 80050a0:	0018      	movs	r0, r3
 80050a2:	7831      	ldrb	r1, [r6, #0]
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	f001 f869 	bl	800617c <memchr>
 80050aa:	1c75      	adds	r5, r6, #1
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d11f      	bne.n	80050f0 <_svfiprintf_r+0xe8>
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	06d3      	lsls	r3, r2, #27
 80050b4:	d504      	bpl.n	80050c0 <_svfiprintf_r+0xb8>
 80050b6:	2353      	movs	r3, #83	@ 0x53
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	185b      	adds	r3, r3, r1
 80050bc:	2120      	movs	r1, #32
 80050be:	7019      	strb	r1, [r3, #0]
 80050c0:	0713      	lsls	r3, r2, #28
 80050c2:	d504      	bpl.n	80050ce <_svfiprintf_r+0xc6>
 80050c4:	2353      	movs	r3, #83	@ 0x53
 80050c6:	a904      	add	r1, sp, #16
 80050c8:	185b      	adds	r3, r3, r1
 80050ca:	212b      	movs	r1, #43	@ 0x2b
 80050cc:	7019      	strb	r1, [r3, #0]
 80050ce:	7833      	ldrb	r3, [r6, #0]
 80050d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d2:	d016      	beq.n	8005102 <_svfiprintf_r+0xfa>
 80050d4:	0035      	movs	r5, r6
 80050d6:	2100      	movs	r1, #0
 80050d8:	200a      	movs	r0, #10
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	782a      	ldrb	r2, [r5, #0]
 80050de:	1c6e      	adds	r6, r5, #1
 80050e0:	3a30      	subs	r2, #48	@ 0x30
 80050e2:	2a09      	cmp	r2, #9
 80050e4:	d950      	bls.n	8005188 <_svfiprintf_r+0x180>
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d111      	bne.n	800510e <_svfiprintf_r+0x106>
 80050ea:	e017      	b.n	800511c <_svfiprintf_r+0x114>
 80050ec:	3501      	adds	r5, #1
 80050ee:	e7af      	b.n	8005050 <_svfiprintf_r+0x48>
 80050f0:	9b05      	ldr	r3, [sp, #20]
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	1ac0      	subs	r0, r0, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	4083      	lsls	r3, r0
 80050fa:	4313      	orrs	r3, r2
 80050fc:	002e      	movs	r6, r5
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	e7cc      	b.n	800509c <_svfiprintf_r+0x94>
 8005102:	9b07      	ldr	r3, [sp, #28]
 8005104:	1d19      	adds	r1, r3, #4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	9107      	str	r1, [sp, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db01      	blt.n	8005112 <_svfiprintf_r+0x10a>
 800510e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005110:	e004      	b.n	800511c <_svfiprintf_r+0x114>
 8005112:	425b      	negs	r3, r3
 8005114:	60e3      	str	r3, [r4, #12]
 8005116:	2302      	movs	r3, #2
 8005118:	4313      	orrs	r3, r2
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	782b      	ldrb	r3, [r5, #0]
 800511e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005120:	d10c      	bne.n	800513c <_svfiprintf_r+0x134>
 8005122:	786b      	ldrb	r3, [r5, #1]
 8005124:	2b2a      	cmp	r3, #42	@ 0x2a
 8005126:	d134      	bne.n	8005192 <_svfiprintf_r+0x18a>
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	3502      	adds	r5, #2
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	9207      	str	r2, [sp, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	da01      	bge.n	800513a <_svfiprintf_r+0x132>
 8005136:	2301      	movs	r3, #1
 8005138:	425b      	negs	r3, r3
 800513a:	9309      	str	r3, [sp, #36]	@ 0x24
 800513c:	4e2d      	ldr	r6, [pc, #180]	@ (80051f4 <_svfiprintf_r+0x1ec>)
 800513e:	2203      	movs	r2, #3
 8005140:	0030      	movs	r0, r6
 8005142:	7829      	ldrb	r1, [r5, #0]
 8005144:	f001 f81a 	bl	800617c <memchr>
 8005148:	2800      	cmp	r0, #0
 800514a:	d006      	beq.n	800515a <_svfiprintf_r+0x152>
 800514c:	2340      	movs	r3, #64	@ 0x40
 800514e:	1b80      	subs	r0, r0, r6
 8005150:	4083      	lsls	r3, r0
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	3501      	adds	r5, #1
 8005156:	4313      	orrs	r3, r2
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	7829      	ldrb	r1, [r5, #0]
 800515c:	2206      	movs	r2, #6
 800515e:	4826      	ldr	r0, [pc, #152]	@ (80051f8 <_svfiprintf_r+0x1f0>)
 8005160:	1c6e      	adds	r6, r5, #1
 8005162:	7621      	strb	r1, [r4, #24]
 8005164:	f001 f80a 	bl	800617c <memchr>
 8005168:	2800      	cmp	r0, #0
 800516a:	d038      	beq.n	80051de <_svfiprintf_r+0x1d6>
 800516c:	4b23      	ldr	r3, [pc, #140]	@ (80051fc <_svfiprintf_r+0x1f4>)
 800516e:	2b00      	cmp	r3, #0
 8005170:	d122      	bne.n	80051b8 <_svfiprintf_r+0x1b0>
 8005172:	2207      	movs	r2, #7
 8005174:	9b07      	ldr	r3, [sp, #28]
 8005176:	3307      	adds	r3, #7
 8005178:	4393      	bics	r3, r2
 800517a:	3308      	adds	r3, #8
 800517c:	9307      	str	r3, [sp, #28]
 800517e:	6963      	ldr	r3, [r4, #20]
 8005180:	9a04      	ldr	r2, [sp, #16]
 8005182:	189b      	adds	r3, r3, r2
 8005184:	6163      	str	r3, [r4, #20]
 8005186:	e762      	b.n	800504e <_svfiprintf_r+0x46>
 8005188:	4343      	muls	r3, r0
 800518a:	0035      	movs	r5, r6
 800518c:	2101      	movs	r1, #1
 800518e:	189b      	adds	r3, r3, r2
 8005190:	e7a4      	b.n	80050dc <_svfiprintf_r+0xd4>
 8005192:	2300      	movs	r3, #0
 8005194:	200a      	movs	r0, #10
 8005196:	0019      	movs	r1, r3
 8005198:	3501      	adds	r5, #1
 800519a:	6063      	str	r3, [r4, #4]
 800519c:	782a      	ldrb	r2, [r5, #0]
 800519e:	1c6e      	adds	r6, r5, #1
 80051a0:	3a30      	subs	r2, #48	@ 0x30
 80051a2:	2a09      	cmp	r2, #9
 80051a4:	d903      	bls.n	80051ae <_svfiprintf_r+0x1a6>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0c8      	beq.n	800513c <_svfiprintf_r+0x134>
 80051aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80051ac:	e7c6      	b.n	800513c <_svfiprintf_r+0x134>
 80051ae:	4341      	muls	r1, r0
 80051b0:	0035      	movs	r5, r6
 80051b2:	2301      	movs	r3, #1
 80051b4:	1889      	adds	r1, r1, r2
 80051b6:	e7f1      	b.n	800519c <_svfiprintf_r+0x194>
 80051b8:	aa07      	add	r2, sp, #28
 80051ba:	9200      	str	r2, [sp, #0]
 80051bc:	0021      	movs	r1, r4
 80051be:	003a      	movs	r2, r7
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <_svfiprintf_r+0x1f8>)
 80051c2:	9803      	ldr	r0, [sp, #12]
 80051c4:	e000      	b.n	80051c8 <_svfiprintf_r+0x1c0>
 80051c6:	bf00      	nop
 80051c8:	9004      	str	r0, [sp, #16]
 80051ca:	9b04      	ldr	r3, [sp, #16]
 80051cc:	3301      	adds	r3, #1
 80051ce:	d1d6      	bne.n	800517e <_svfiprintf_r+0x176>
 80051d0:	89bb      	ldrh	r3, [r7, #12]
 80051d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80051d4:	065b      	lsls	r3, r3, #25
 80051d6:	d500      	bpl.n	80051da <_svfiprintf_r+0x1d2>
 80051d8:	e72c      	b.n	8005034 <_svfiprintf_r+0x2c>
 80051da:	b021      	add	sp, #132	@ 0x84
 80051dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051de:	aa07      	add	r2, sp, #28
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	0021      	movs	r1, r4
 80051e4:	003a      	movs	r2, r7
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <_svfiprintf_r+0x1f8>)
 80051e8:	9803      	ldr	r0, [sp, #12]
 80051ea:	f000 fb7f 	bl	80058ec <_printf_i>
 80051ee:	e7eb      	b.n	80051c8 <_svfiprintf_r+0x1c0>
 80051f0:	080065c4 	.word	0x080065c4
 80051f4:	080065ca 	.word	0x080065ca
 80051f8:	080065ce 	.word	0x080065ce
 80051fc:	00000000 	.word	0x00000000
 8005200:	08004f49 	.word	0x08004f49

08005204 <_sungetc_r>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	0014      	movs	r4, r2
 8005208:	1c4b      	adds	r3, r1, #1
 800520a:	d103      	bne.n	8005214 <_sungetc_r+0x10>
 800520c:	2501      	movs	r5, #1
 800520e:	426d      	negs	r5, r5
 8005210:	0028      	movs	r0, r5
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	8993      	ldrh	r3, [r2, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	4393      	bics	r3, r2
 800521a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	b2ce      	uxtb	r6, r1
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	b2cd      	uxtb	r5, r1
 8005224:	2a00      	cmp	r2, #0
 8005226:	d010      	beq.n	800524a <_sungetc_r+0x46>
 8005228:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800522a:	429a      	cmp	r2, r3
 800522c:	dd07      	ble.n	800523e <_sungetc_r+0x3a>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	3b01      	subs	r3, #1
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	701e      	strb	r6, [r3, #0]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	3301      	adds	r3, #1
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	e7e8      	b.n	8005210 <_sungetc_r+0xc>
 800523e:	0021      	movs	r1, r4
 8005240:	f000 ff16 	bl	8006070 <__submore>
 8005244:	2800      	cmp	r0, #0
 8005246:	d0f2      	beq.n	800522e <_sungetc_r+0x2a>
 8005248:	e7e0      	b.n	800520c <_sungetc_r+0x8>
 800524a:	6921      	ldr	r1, [r4, #16]
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	2900      	cmp	r1, #0
 8005250:	d007      	beq.n	8005262 <_sungetc_r+0x5e>
 8005252:	4291      	cmp	r1, r2
 8005254:	d205      	bcs.n	8005262 <_sungetc_r+0x5e>
 8005256:	1e51      	subs	r1, r2, #1
 8005258:	7808      	ldrb	r0, [r1, #0]
 800525a:	42a8      	cmp	r0, r5
 800525c:	d101      	bne.n	8005262 <_sungetc_r+0x5e>
 800525e:	6021      	str	r1, [r4, #0]
 8005260:	e7ea      	b.n	8005238 <_sungetc_r+0x34>
 8005262:	6423      	str	r3, [r4, #64]	@ 0x40
 8005264:	0023      	movs	r3, r4
 8005266:	3344      	adds	r3, #68	@ 0x44
 8005268:	6363      	str	r3, [r4, #52]	@ 0x34
 800526a:	2303      	movs	r3, #3
 800526c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800526e:	0023      	movs	r3, r4
 8005270:	3346      	adds	r3, #70	@ 0x46
 8005272:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8005274:	701e      	strb	r6, [r3, #0]
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	2301      	movs	r3, #1
 800527a:	e7de      	b.n	800523a <_sungetc_r+0x36>

0800527c <__ssrefill_r>:
 800527c:	b510      	push	{r4, lr}
 800527e:	000c      	movs	r4, r1
 8005280:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005282:	2900      	cmp	r1, #0
 8005284:	d00e      	beq.n	80052a4 <__ssrefill_r+0x28>
 8005286:	0023      	movs	r3, r4
 8005288:	3344      	adds	r3, #68	@ 0x44
 800528a:	4299      	cmp	r1, r3
 800528c:	d001      	beq.n	8005292 <__ssrefill_r+0x16>
 800528e:	f7ff fd5f 	bl	8004d50 <_free_r>
 8005292:	2000      	movs	r0, #0
 8005294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005296:	6360      	str	r0, [r4, #52]	@ 0x34
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	4283      	cmp	r3, r0
 800529c:	d002      	beq.n	80052a4 <__ssrefill_r+0x28>
 800529e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd10      	pop	{r4, pc}
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	2001      	movs	r0, #1
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	2300      	movs	r3, #0
 80052ac:	89a2      	ldrh	r2, [r4, #12]
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	3320      	adds	r3, #32
 80052b2:	4313      	orrs	r3, r2
 80052b4:	81a3      	strh	r3, [r4, #12]
 80052b6:	4240      	negs	r0, r0
 80052b8:	e7f3      	b.n	80052a2 <__ssrefill_r+0x26>
	...

080052bc <__ssvfiscanf_r>:
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	4cab      	ldr	r4, [pc, #684]	@ (800556c <__ssvfiscanf_r+0x2b0>)
 80052c0:	44a5      	add	sp, r4
 80052c2:	000c      	movs	r4, r1
 80052c4:	2100      	movs	r1, #0
 80052c6:	9000      	str	r0, [sp, #0]
 80052c8:	20be      	movs	r0, #190	@ 0xbe
 80052ca:	9146      	str	r1, [sp, #280]	@ 0x118
 80052cc:	9147      	str	r1, [sp, #284]	@ 0x11c
 80052ce:	a903      	add	r1, sp, #12
 80052d0:	9148      	str	r1, [sp, #288]	@ 0x120
 80052d2:	49a7      	ldr	r1, [pc, #668]	@ (8005570 <__ssvfiscanf_r+0x2b4>)
 80052d4:	0040      	lsls	r0, r0, #1
 80052d6:	ad43      	add	r5, sp, #268	@ 0x10c
 80052d8:	5029      	str	r1, [r5, r0]
 80052da:	49a6      	ldr	r1, [pc, #664]	@ (8005574 <__ssvfiscanf_r+0x2b8>)
 80052dc:	3004      	adds	r0, #4
 80052de:	ad43      	add	r5, sp, #268	@ 0x10c
 80052e0:	5029      	str	r1, [r5, r0]
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	7816      	ldrb	r6, [r2, #0]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	d100      	bne.n	80052ec <__ssvfiscanf_r+0x30>
 80052ea:	e13c      	b.n	8005566 <__ssvfiscanf_r+0x2aa>
 80052ec:	2308      	movs	r3, #8
 80052ee:	2008      	movs	r0, #8
 80052f0:	4da1      	ldr	r5, [pc, #644]	@ (8005578 <__ssvfiscanf_r+0x2bc>)
 80052f2:	1c57      	adds	r7, r2, #1
 80052f4:	5da9      	ldrb	r1, [r5, r6]
 80052f6:	400b      	ands	r3, r1
 80052f8:	4201      	tst	r1, r0
 80052fa:	d01d      	beq.n	8005338 <__ssvfiscanf_r+0x7c>
 80052fc:	0006      	movs	r6, r0
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dd0f      	ble.n	8005324 <__ssvfiscanf_r+0x68>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	781a      	ldrb	r2, [r3, #0]
 8005308:	5caa      	ldrb	r2, [r5, r2]
 800530a:	4232      	tst	r2, r6
 800530c:	d101      	bne.n	8005312 <__ssvfiscanf_r+0x56>
 800530e:	003a      	movs	r2, r7
 8005310:	e7e8      	b.n	80052e4 <__ssvfiscanf_r+0x28>
 8005312:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005314:	3301      	adds	r3, #1
 8005316:	3201      	adds	r2, #1
 8005318:	9247      	str	r2, [sp, #284]	@ 0x11c
 800531a:	6862      	ldr	r2, [r4, #4]
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	3a01      	subs	r2, #1
 8005320:	6062      	str	r2, [r4, #4]
 8005322:	e7ec      	b.n	80052fe <__ssvfiscanf_r+0x42>
 8005324:	22c0      	movs	r2, #192	@ 0xc0
 8005326:	ab43      	add	r3, sp, #268	@ 0x10c
 8005328:	0052      	lsls	r2, r2, #1
 800532a:	0021      	movs	r1, r4
 800532c:	589b      	ldr	r3, [r3, r2]
 800532e:	9800      	ldr	r0, [sp, #0]
 8005330:	4798      	blx	r3
 8005332:	2800      	cmp	r0, #0
 8005334:	d0e6      	beq.n	8005304 <__ssvfiscanf_r+0x48>
 8005336:	e7ea      	b.n	800530e <__ssvfiscanf_r+0x52>
 8005338:	2e25      	cmp	r6, #37	@ 0x25
 800533a:	d162      	bne.n	8005402 <__ssvfiscanf_r+0x146>
 800533c:	9345      	str	r3, [sp, #276]	@ 0x114
 800533e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005340:	7853      	ldrb	r3, [r2, #1]
 8005342:	2b2a      	cmp	r3, #42	@ 0x2a
 8005344:	d102      	bne.n	800534c <__ssvfiscanf_r+0x90>
 8005346:	3b1a      	subs	r3, #26
 8005348:	9343      	str	r3, [sp, #268]	@ 0x10c
 800534a:	1c97      	adds	r7, r2, #2
 800534c:	003d      	movs	r5, r7
 800534e:	220a      	movs	r2, #10
 8005350:	7829      	ldrb	r1, [r5, #0]
 8005352:	1c6f      	adds	r7, r5, #1
 8005354:	000b      	movs	r3, r1
 8005356:	3b30      	subs	r3, #48	@ 0x30
 8005358:	2b09      	cmp	r3, #9
 800535a:	d91f      	bls.n	800539c <__ssvfiscanf_r+0xe0>
 800535c:	4b87      	ldr	r3, [pc, #540]	@ (800557c <__ssvfiscanf_r+0x2c0>)
 800535e:	2203      	movs	r2, #3
 8005360:	0018      	movs	r0, r3
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	f000 ff0a 	bl	800617c <memchr>
 8005368:	2800      	cmp	r0, #0
 800536a:	d007      	beq.n	800537c <__ssvfiscanf_r+0xc0>
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	003d      	movs	r5, r7
 8005370:	1ac0      	subs	r0, r0, r3
 8005372:	2301      	movs	r3, #1
 8005374:	4083      	lsls	r3, r0
 8005376:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005378:	4313      	orrs	r3, r2
 800537a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800537c:	782b      	ldrb	r3, [r5, #0]
 800537e:	1c6f      	adds	r7, r5, #1
 8005380:	2b78      	cmp	r3, #120	@ 0x78
 8005382:	d806      	bhi.n	8005392 <__ssvfiscanf_r+0xd6>
 8005384:	2b57      	cmp	r3, #87	@ 0x57
 8005386:	d810      	bhi.n	80053aa <__ssvfiscanf_r+0xee>
 8005388:	2b25      	cmp	r3, #37	@ 0x25
 800538a:	d03a      	beq.n	8005402 <__ssvfiscanf_r+0x146>
 800538c:	d834      	bhi.n	80053f8 <__ssvfiscanf_r+0x13c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d055      	beq.n	800543e <__ssvfiscanf_r+0x182>
 8005392:	2303      	movs	r3, #3
 8005394:	9349      	str	r3, [sp, #292]	@ 0x124
 8005396:	3307      	adds	r3, #7
 8005398:	9344      	str	r3, [sp, #272]	@ 0x110
 800539a:	e069      	b.n	8005470 <__ssvfiscanf_r+0x1b4>
 800539c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800539e:	003d      	movs	r5, r7
 80053a0:	4353      	muls	r3, r2
 80053a2:	3b30      	subs	r3, #48	@ 0x30
 80053a4:	185b      	adds	r3, r3, r1
 80053a6:	9345      	str	r3, [sp, #276]	@ 0x114
 80053a8:	e7d2      	b.n	8005350 <__ssvfiscanf_r+0x94>
 80053aa:	0018      	movs	r0, r3
 80053ac:	3858      	subs	r0, #88	@ 0x58
 80053ae:	2820      	cmp	r0, #32
 80053b0:	d8ef      	bhi.n	8005392 <__ssvfiscanf_r+0xd6>
 80053b2:	f7fa feb1 	bl	8000118 <__gnu_thumb1_case_shi>
 80053b6:	004b      	.short	0x004b
 80053b8:	ffeeffee 	.word	0xffeeffee
 80053bc:	ffee007d 	.word	0xffee007d
 80053c0:	ffeeffee 	.word	0xffeeffee
 80053c4:	ffeeffee 	.word	0xffeeffee
 80053c8:	ffeeffee 	.word	0xffeeffee
 80053cc:	007b0088 	.word	0x007b0088
 80053d0:	00240024 	.word	0x00240024
 80053d4:	ffee0024 	.word	0xffee0024
 80053d8:	ffee0055 	.word	0xffee0055
 80053dc:	ffeeffee 	.word	0xffeeffee
 80053e0:	0090ffee 	.word	0x0090ffee
 80053e4:	00470059 	.word	0x00470059
 80053e8:	ffeeffee 	.word	0xffeeffee
 80053ec:	ffee008e 	.word	0xffee008e
 80053f0:	ffee007b 	.word	0xffee007b
 80053f4:	004bffee 	.word	0x004bffee
 80053f8:	3b45      	subs	r3, #69	@ 0x45
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d8c9      	bhi.n	8005392 <__ssvfiscanf_r+0xd6>
 80053fe:	2305      	movs	r3, #5
 8005400:	e035      	b.n	800546e <__ssvfiscanf_r+0x1b2>
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	dd0d      	ble.n	8005424 <__ssvfiscanf_r+0x168>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	42b2      	cmp	r2, r6
 800540e:	d000      	beq.n	8005412 <__ssvfiscanf_r+0x156>
 8005410:	e0a9      	b.n	8005566 <__ssvfiscanf_r+0x2aa>
 8005412:	3301      	adds	r3, #1
 8005414:	6862      	ldr	r2, [r4, #4]
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800541a:	3a01      	subs	r2, #1
 800541c:	3301      	adds	r3, #1
 800541e:	6062      	str	r2, [r4, #4]
 8005420:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005422:	e774      	b.n	800530e <__ssvfiscanf_r+0x52>
 8005424:	23c0      	movs	r3, #192	@ 0xc0
 8005426:	aa43      	add	r2, sp, #268	@ 0x10c
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	0021      	movs	r1, r4
 800542c:	58d3      	ldr	r3, [r2, r3]
 800542e:	9800      	ldr	r0, [sp, #0]
 8005430:	4798      	blx	r3
 8005432:	2800      	cmp	r0, #0
 8005434:	d0e8      	beq.n	8005408 <__ssvfiscanf_r+0x14c>
 8005436:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005438:	2800      	cmp	r0, #0
 800543a:	d000      	beq.n	800543e <__ssvfiscanf_r+0x182>
 800543c:	e08b      	b.n	8005556 <__ssvfiscanf_r+0x29a>
 800543e:	2001      	movs	r0, #1
 8005440:	4240      	negs	r0, r0
 8005442:	e08c      	b.n	800555e <__ssvfiscanf_r+0x2a2>
 8005444:	2220      	movs	r2, #32
 8005446:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005448:	430a      	orrs	r2, r1
 800544a:	9243      	str	r2, [sp, #268]	@ 0x10c
 800544c:	2280      	movs	r2, #128	@ 0x80
 800544e:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005450:	0092      	lsls	r2, r2, #2
 8005452:	430a      	orrs	r2, r1
 8005454:	9243      	str	r2, [sp, #268]	@ 0x10c
 8005456:	2210      	movs	r2, #16
 8005458:	9244      	str	r2, [sp, #272]	@ 0x110
 800545a:	2b6e      	cmp	r3, #110	@ 0x6e
 800545c:	d902      	bls.n	8005464 <__ssvfiscanf_r+0x1a8>
 800545e:	e005      	b.n	800546c <__ssvfiscanf_r+0x1b0>
 8005460:	2300      	movs	r3, #0
 8005462:	9344      	str	r3, [sp, #272]	@ 0x110
 8005464:	2303      	movs	r3, #3
 8005466:	e002      	b.n	800546e <__ssvfiscanf_r+0x1b2>
 8005468:	2308      	movs	r3, #8
 800546a:	9344      	str	r3, [sp, #272]	@ 0x110
 800546c:	2304      	movs	r3, #4
 800546e:	9349      	str	r3, [sp, #292]	@ 0x124
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dd3e      	ble.n	80054f4 <__ssvfiscanf_r+0x238>
 8005476:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005478:	065b      	lsls	r3, r3, #25
 800547a:	d408      	bmi.n	800548e <__ssvfiscanf_r+0x1d2>
 800547c:	26c0      	movs	r6, #192	@ 0xc0
 800547e:	2508      	movs	r5, #8
 8005480:	0076      	lsls	r6, r6, #1
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	493c      	ldr	r1, [pc, #240]	@ (8005578 <__ssvfiscanf_r+0x2bc>)
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	5c8a      	ldrb	r2, [r1, r2]
 800548a:	422a      	tst	r2, r5
 800548c:	d13c      	bne.n	8005508 <__ssvfiscanf_r+0x24c>
 800548e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8005490:	2b02      	cmp	r3, #2
 8005492:	dc4c      	bgt.n	800552e <__ssvfiscanf_r+0x272>
 8005494:	0022      	movs	r2, r4
 8005496:	9800      	ldr	r0, [sp, #0]
 8005498:	ab02      	add	r3, sp, #8
 800549a:	a943      	add	r1, sp, #268	@ 0x10c
 800549c:	f000 fb32 	bl	8005b04 <_scanf_chars>
 80054a0:	2801      	cmp	r0, #1
 80054a2:	d060      	beq.n	8005566 <__ssvfiscanf_r+0x2aa>
 80054a4:	2802      	cmp	r0, #2
 80054a6:	d000      	beq.n	80054aa <__ssvfiscanf_r+0x1ee>
 80054a8:	e731      	b.n	800530e <__ssvfiscanf_r+0x52>
 80054aa:	e7c4      	b.n	8005436 <__ssvfiscanf_r+0x17a>
 80054ac:	220a      	movs	r2, #10
 80054ae:	e7d3      	b.n	8005458 <__ssvfiscanf_r+0x19c>
 80054b0:	0039      	movs	r1, r7
 80054b2:	a803      	add	r0, sp, #12
 80054b4:	f000 fda3 	bl	8005ffe <__sccl>
 80054b8:	2340      	movs	r3, #64	@ 0x40
 80054ba:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80054bc:	0007      	movs	r7, r0
 80054be:	4313      	orrs	r3, r2
 80054c0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80054c2:	2301      	movs	r3, #1
 80054c4:	e7d3      	b.n	800546e <__ssvfiscanf_r+0x1b2>
 80054c6:	2340      	movs	r3, #64	@ 0x40
 80054c8:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80054ca:	4313      	orrs	r3, r2
 80054cc:	9343      	str	r3, [sp, #268]	@ 0x10c
 80054ce:	2300      	movs	r3, #0
 80054d0:	e7cd      	b.n	800546e <__ssvfiscanf_r+0x1b2>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e7cb      	b.n	800546e <__ssvfiscanf_r+0x1b2>
 80054d6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80054d8:	06d3      	lsls	r3, r2, #27
 80054da:	d500      	bpl.n	80054de <__ssvfiscanf_r+0x222>
 80054dc:	e717      	b.n	800530e <__ssvfiscanf_r+0x52>
 80054de:	9b02      	ldr	r3, [sp, #8]
 80054e0:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80054e2:	1d18      	adds	r0, r3, #4
 80054e4:	9002      	str	r0, [sp, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	07d5      	lsls	r5, r2, #31
 80054ea:	d501      	bpl.n	80054f0 <__ssvfiscanf_r+0x234>
 80054ec:	8019      	strh	r1, [r3, #0]
 80054ee:	e70e      	b.n	800530e <__ssvfiscanf_r+0x52>
 80054f0:	6019      	str	r1, [r3, #0]
 80054f2:	e70c      	b.n	800530e <__ssvfiscanf_r+0x52>
 80054f4:	23c0      	movs	r3, #192	@ 0xc0
 80054f6:	aa43      	add	r2, sp, #268	@ 0x10c
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	0021      	movs	r1, r4
 80054fc:	58d3      	ldr	r3, [r2, r3]
 80054fe:	9800      	ldr	r0, [sp, #0]
 8005500:	4798      	blx	r3
 8005502:	2800      	cmp	r0, #0
 8005504:	d0b7      	beq.n	8005476 <__ssvfiscanf_r+0x1ba>
 8005506:	e796      	b.n	8005436 <__ssvfiscanf_r+0x17a>
 8005508:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800550a:	3201      	adds	r2, #1
 800550c:	9247      	str	r2, [sp, #284]	@ 0x11c
 800550e:	6862      	ldr	r2, [r4, #4]
 8005510:	3a01      	subs	r2, #1
 8005512:	6062      	str	r2, [r4, #4]
 8005514:	2a00      	cmp	r2, #0
 8005516:	dd02      	ble.n	800551e <__ssvfiscanf_r+0x262>
 8005518:	3301      	adds	r3, #1
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	e7b1      	b.n	8005482 <__ssvfiscanf_r+0x1c6>
 800551e:	ab43      	add	r3, sp, #268	@ 0x10c
 8005520:	0021      	movs	r1, r4
 8005522:	599b      	ldr	r3, [r3, r6]
 8005524:	9800      	ldr	r0, [sp, #0]
 8005526:	4798      	blx	r3
 8005528:	2800      	cmp	r0, #0
 800552a:	d0aa      	beq.n	8005482 <__ssvfiscanf_r+0x1c6>
 800552c:	e783      	b.n	8005436 <__ssvfiscanf_r+0x17a>
 800552e:	2b04      	cmp	r3, #4
 8005530:	dc06      	bgt.n	8005540 <__ssvfiscanf_r+0x284>
 8005532:	0022      	movs	r2, r4
 8005534:	9800      	ldr	r0, [sp, #0]
 8005536:	ab02      	add	r3, sp, #8
 8005538:	a943      	add	r1, sp, #268	@ 0x10c
 800553a:	f000 fb43 	bl	8005bc4 <_scanf_i>
 800553e:	e7af      	b.n	80054a0 <__ssvfiscanf_r+0x1e4>
 8005540:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <__ssvfiscanf_r+0x2c4>)
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <__ssvfiscanf_r+0x28c>
 8005546:	e6e2      	b.n	800530e <__ssvfiscanf_r+0x52>
 8005548:	0022      	movs	r2, r4
 800554a:	9800      	ldr	r0, [sp, #0]
 800554c:	ab02      	add	r3, sp, #8
 800554e:	a943      	add	r1, sp, #268	@ 0x10c
 8005550:	e000      	b.n	8005554 <__ssvfiscanf_r+0x298>
 8005552:	bf00      	nop
 8005554:	e7a4      	b.n	80054a0 <__ssvfiscanf_r+0x1e4>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	065b      	lsls	r3, r3, #25
 800555a:	d500      	bpl.n	800555e <__ssvfiscanf_r+0x2a2>
 800555c:	e76f      	b.n	800543e <__ssvfiscanf_r+0x182>
 800555e:	23a5      	movs	r3, #165	@ 0xa5
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	449d      	add	sp, r3
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005568:	e7f9      	b.n	800555e <__ssvfiscanf_r+0x2a2>
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	fffffd6c 	.word	0xfffffd6c
 8005570:	08005205 	.word	0x08005205
 8005574:	0800527d 	.word	0x0800527d
 8005578:	08006613 	.word	0x08006613
 800557c:	080065ca 	.word	0x080065ca
 8005580:	00000000 	.word	0x00000000

08005584 <__sfputc_r>:
 8005584:	6893      	ldr	r3, [r2, #8]
 8005586:	b510      	push	{r4, lr}
 8005588:	3b01      	subs	r3, #1
 800558a:	6093      	str	r3, [r2, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	da04      	bge.n	800559a <__sfputc_r+0x16>
 8005590:	6994      	ldr	r4, [r2, #24]
 8005592:	42a3      	cmp	r3, r4
 8005594:	db07      	blt.n	80055a6 <__sfputc_r+0x22>
 8005596:	290a      	cmp	r1, #10
 8005598:	d005      	beq.n	80055a6 <__sfputc_r+0x22>
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	1c58      	adds	r0, r3, #1
 800559e:	6010      	str	r0, [r2, #0]
 80055a0:	7019      	strb	r1, [r3, #0]
 80055a2:	0008      	movs	r0, r1
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	f7ff fa3d 	bl	8004a24 <__swbuf_r>
 80055aa:	0001      	movs	r1, r0
 80055ac:	e7f9      	b.n	80055a2 <__sfputc_r+0x1e>

080055ae <__sfputs_r>:
 80055ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b0:	0006      	movs	r6, r0
 80055b2:	000f      	movs	r7, r1
 80055b4:	0014      	movs	r4, r2
 80055b6:	18d5      	adds	r5, r2, r3
 80055b8:	42ac      	cmp	r4, r5
 80055ba:	d101      	bne.n	80055c0 <__sfputs_r+0x12>
 80055bc:	2000      	movs	r0, #0
 80055be:	e007      	b.n	80055d0 <__sfputs_r+0x22>
 80055c0:	7821      	ldrb	r1, [r4, #0]
 80055c2:	003a      	movs	r2, r7
 80055c4:	0030      	movs	r0, r6
 80055c6:	f7ff ffdd 	bl	8005584 <__sfputc_r>
 80055ca:	3401      	adds	r4, #1
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d1f3      	bne.n	80055b8 <__sfputs_r+0xa>
 80055d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055d4 <_vfiprintf_r>:
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	b0a1      	sub	sp, #132	@ 0x84
 80055d8:	000f      	movs	r7, r1
 80055da:	0015      	movs	r5, r2
 80055dc:	001e      	movs	r6, r3
 80055de:	9003      	str	r0, [sp, #12]
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d004      	beq.n	80055ee <_vfiprintf_r+0x1a>
 80055e4:	6a03      	ldr	r3, [r0, #32]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <_vfiprintf_r+0x1a>
 80055ea:	f7ff f8dd 	bl	80047a8 <__sinit>
 80055ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f0:	07db      	lsls	r3, r3, #31
 80055f2:	d405      	bmi.n	8005600 <_vfiprintf_r+0x2c>
 80055f4:	89bb      	ldrh	r3, [r7, #12]
 80055f6:	059b      	lsls	r3, r3, #22
 80055f8:	d402      	bmi.n	8005600 <_vfiprintf_r+0x2c>
 80055fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80055fc:	f7ff fb9d 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8005600:	89bb      	ldrh	r3, [r7, #12]
 8005602:	071b      	lsls	r3, r3, #28
 8005604:	d502      	bpl.n	800560c <_vfiprintf_r+0x38>
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d113      	bne.n	8005634 <_vfiprintf_r+0x60>
 800560c:	0039      	movs	r1, r7
 800560e:	9803      	ldr	r0, [sp, #12]
 8005610:	f7ff fa4a 	bl	8004aa8 <__swsetup_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	d00d      	beq.n	8005634 <_vfiprintf_r+0x60>
 8005618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800561a:	07db      	lsls	r3, r3, #31
 800561c:	d503      	bpl.n	8005626 <_vfiprintf_r+0x52>
 800561e:	2001      	movs	r0, #1
 8005620:	4240      	negs	r0, r0
 8005622:	b021      	add	sp, #132	@ 0x84
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005626:	89bb      	ldrh	r3, [r7, #12]
 8005628:	059b      	lsls	r3, r3, #22
 800562a:	d4f8      	bmi.n	800561e <_vfiprintf_r+0x4a>
 800562c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800562e:	f7ff fb85 	bl	8004d3c <__retarget_lock_release_recursive>
 8005632:	e7f4      	b.n	800561e <_vfiprintf_r+0x4a>
 8005634:	2300      	movs	r3, #0
 8005636:	ac08      	add	r4, sp, #32
 8005638:	6163      	str	r3, [r4, #20]
 800563a:	3320      	adds	r3, #32
 800563c:	7663      	strb	r3, [r4, #25]
 800563e:	3310      	adds	r3, #16
 8005640:	76a3      	strb	r3, [r4, #26]
 8005642:	9607      	str	r6, [sp, #28]
 8005644:	002e      	movs	r6, r5
 8005646:	7833      	ldrb	r3, [r6, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <_vfiprintf_r+0x7c>
 800564c:	2b25      	cmp	r3, #37	@ 0x25
 800564e:	d148      	bne.n	80056e2 <_vfiprintf_r+0x10e>
 8005650:	1b73      	subs	r3, r6, r5
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	42ae      	cmp	r6, r5
 8005656:	d00b      	beq.n	8005670 <_vfiprintf_r+0x9c>
 8005658:	002a      	movs	r2, r5
 800565a:	0039      	movs	r1, r7
 800565c:	9803      	ldr	r0, [sp, #12]
 800565e:	f7ff ffa6 	bl	80055ae <__sfputs_r>
 8005662:	3001      	adds	r0, #1
 8005664:	d100      	bne.n	8005668 <_vfiprintf_r+0x94>
 8005666:	e0ae      	b.n	80057c6 <_vfiprintf_r+0x1f2>
 8005668:	6963      	ldr	r3, [r4, #20]
 800566a:	9a05      	ldr	r2, [sp, #20]
 800566c:	189b      	adds	r3, r3, r2
 800566e:	6163      	str	r3, [r4, #20]
 8005670:	7833      	ldrb	r3, [r6, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d100      	bne.n	8005678 <_vfiprintf_r+0xa4>
 8005676:	e0a6      	b.n	80057c6 <_vfiprintf_r+0x1f2>
 8005678:	2201      	movs	r2, #1
 800567a:	2300      	movs	r3, #0
 800567c:	4252      	negs	r2, r2
 800567e:	6062      	str	r2, [r4, #4]
 8005680:	a904      	add	r1, sp, #16
 8005682:	3254      	adds	r2, #84	@ 0x54
 8005684:	1852      	adds	r2, r2, r1
 8005686:	1c75      	adds	r5, r6, #1
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	60e3      	str	r3, [r4, #12]
 800568c:	60a3      	str	r3, [r4, #8]
 800568e:	7013      	strb	r3, [r2, #0]
 8005690:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005692:	4b59      	ldr	r3, [pc, #356]	@ (80057f8 <_vfiprintf_r+0x224>)
 8005694:	2205      	movs	r2, #5
 8005696:	0018      	movs	r0, r3
 8005698:	7829      	ldrb	r1, [r5, #0]
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	f000 fd6e 	bl	800617c <memchr>
 80056a0:	1c6e      	adds	r6, r5, #1
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d11f      	bne.n	80056e6 <_vfiprintf_r+0x112>
 80056a6:	6822      	ldr	r2, [r4, #0]
 80056a8:	06d3      	lsls	r3, r2, #27
 80056aa:	d504      	bpl.n	80056b6 <_vfiprintf_r+0xe2>
 80056ac:	2353      	movs	r3, #83	@ 0x53
 80056ae:	a904      	add	r1, sp, #16
 80056b0:	185b      	adds	r3, r3, r1
 80056b2:	2120      	movs	r1, #32
 80056b4:	7019      	strb	r1, [r3, #0]
 80056b6:	0713      	lsls	r3, r2, #28
 80056b8:	d504      	bpl.n	80056c4 <_vfiprintf_r+0xf0>
 80056ba:	2353      	movs	r3, #83	@ 0x53
 80056bc:	a904      	add	r1, sp, #16
 80056be:	185b      	adds	r3, r3, r1
 80056c0:	212b      	movs	r1, #43	@ 0x2b
 80056c2:	7019      	strb	r1, [r3, #0]
 80056c4:	782b      	ldrb	r3, [r5, #0]
 80056c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c8:	d016      	beq.n	80056f8 <_vfiprintf_r+0x124>
 80056ca:	002e      	movs	r6, r5
 80056cc:	2100      	movs	r1, #0
 80056ce:	200a      	movs	r0, #10
 80056d0:	68e3      	ldr	r3, [r4, #12]
 80056d2:	7832      	ldrb	r2, [r6, #0]
 80056d4:	1c75      	adds	r5, r6, #1
 80056d6:	3a30      	subs	r2, #48	@ 0x30
 80056d8:	2a09      	cmp	r2, #9
 80056da:	d950      	bls.n	800577e <_vfiprintf_r+0x1aa>
 80056dc:	2900      	cmp	r1, #0
 80056de:	d111      	bne.n	8005704 <_vfiprintf_r+0x130>
 80056e0:	e017      	b.n	8005712 <_vfiprintf_r+0x13e>
 80056e2:	3601      	adds	r6, #1
 80056e4:	e7af      	b.n	8005646 <_vfiprintf_r+0x72>
 80056e6:	9b05      	ldr	r3, [sp, #20]
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	1ac0      	subs	r0, r0, r3
 80056ec:	2301      	movs	r3, #1
 80056ee:	4083      	lsls	r3, r0
 80056f0:	4313      	orrs	r3, r2
 80056f2:	0035      	movs	r5, r6
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	e7cc      	b.n	8005692 <_vfiprintf_r+0xbe>
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	1d19      	adds	r1, r3, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	9107      	str	r1, [sp, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db01      	blt.n	8005708 <_vfiprintf_r+0x134>
 8005704:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005706:	e004      	b.n	8005712 <_vfiprintf_r+0x13e>
 8005708:	425b      	negs	r3, r3
 800570a:	60e3      	str	r3, [r4, #12]
 800570c:	2302      	movs	r3, #2
 800570e:	4313      	orrs	r3, r2
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	7833      	ldrb	r3, [r6, #0]
 8005714:	2b2e      	cmp	r3, #46	@ 0x2e
 8005716:	d10c      	bne.n	8005732 <_vfiprintf_r+0x15e>
 8005718:	7873      	ldrb	r3, [r6, #1]
 800571a:	2b2a      	cmp	r3, #42	@ 0x2a
 800571c:	d134      	bne.n	8005788 <_vfiprintf_r+0x1b4>
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	3602      	adds	r6, #2
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9207      	str	r2, [sp, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	da01      	bge.n	8005730 <_vfiprintf_r+0x15c>
 800572c:	2301      	movs	r3, #1
 800572e:	425b      	negs	r3, r3
 8005730:	9309      	str	r3, [sp, #36]	@ 0x24
 8005732:	4d32      	ldr	r5, [pc, #200]	@ (80057fc <_vfiprintf_r+0x228>)
 8005734:	2203      	movs	r2, #3
 8005736:	0028      	movs	r0, r5
 8005738:	7831      	ldrb	r1, [r6, #0]
 800573a:	f000 fd1f 	bl	800617c <memchr>
 800573e:	2800      	cmp	r0, #0
 8005740:	d006      	beq.n	8005750 <_vfiprintf_r+0x17c>
 8005742:	2340      	movs	r3, #64	@ 0x40
 8005744:	1b40      	subs	r0, r0, r5
 8005746:	4083      	lsls	r3, r0
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	3601      	adds	r6, #1
 800574c:	4313      	orrs	r3, r2
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	7831      	ldrb	r1, [r6, #0]
 8005752:	2206      	movs	r2, #6
 8005754:	482a      	ldr	r0, [pc, #168]	@ (8005800 <_vfiprintf_r+0x22c>)
 8005756:	1c75      	adds	r5, r6, #1
 8005758:	7621      	strb	r1, [r4, #24]
 800575a:	f000 fd0f 	bl	800617c <memchr>
 800575e:	2800      	cmp	r0, #0
 8005760:	d040      	beq.n	80057e4 <_vfiprintf_r+0x210>
 8005762:	4b28      	ldr	r3, [pc, #160]	@ (8005804 <_vfiprintf_r+0x230>)
 8005764:	2b00      	cmp	r3, #0
 8005766:	d122      	bne.n	80057ae <_vfiprintf_r+0x1da>
 8005768:	2207      	movs	r2, #7
 800576a:	9b07      	ldr	r3, [sp, #28]
 800576c:	3307      	adds	r3, #7
 800576e:	4393      	bics	r3, r2
 8005770:	3308      	adds	r3, #8
 8005772:	9307      	str	r3, [sp, #28]
 8005774:	6963      	ldr	r3, [r4, #20]
 8005776:	9a04      	ldr	r2, [sp, #16]
 8005778:	189b      	adds	r3, r3, r2
 800577a:	6163      	str	r3, [r4, #20]
 800577c:	e762      	b.n	8005644 <_vfiprintf_r+0x70>
 800577e:	4343      	muls	r3, r0
 8005780:	002e      	movs	r6, r5
 8005782:	2101      	movs	r1, #1
 8005784:	189b      	adds	r3, r3, r2
 8005786:	e7a4      	b.n	80056d2 <_vfiprintf_r+0xfe>
 8005788:	2300      	movs	r3, #0
 800578a:	200a      	movs	r0, #10
 800578c:	0019      	movs	r1, r3
 800578e:	3601      	adds	r6, #1
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	7832      	ldrb	r2, [r6, #0]
 8005794:	1c75      	adds	r5, r6, #1
 8005796:	3a30      	subs	r2, #48	@ 0x30
 8005798:	2a09      	cmp	r2, #9
 800579a:	d903      	bls.n	80057a4 <_vfiprintf_r+0x1d0>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0c8      	beq.n	8005732 <_vfiprintf_r+0x15e>
 80057a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80057a2:	e7c6      	b.n	8005732 <_vfiprintf_r+0x15e>
 80057a4:	4341      	muls	r1, r0
 80057a6:	002e      	movs	r6, r5
 80057a8:	2301      	movs	r3, #1
 80057aa:	1889      	adds	r1, r1, r2
 80057ac:	e7f1      	b.n	8005792 <_vfiprintf_r+0x1be>
 80057ae:	aa07      	add	r2, sp, #28
 80057b0:	9200      	str	r2, [sp, #0]
 80057b2:	0021      	movs	r1, r4
 80057b4:	003a      	movs	r2, r7
 80057b6:	4b14      	ldr	r3, [pc, #80]	@ (8005808 <_vfiprintf_r+0x234>)
 80057b8:	9803      	ldr	r0, [sp, #12]
 80057ba:	e000      	b.n	80057be <_vfiprintf_r+0x1ea>
 80057bc:	bf00      	nop
 80057be:	9004      	str	r0, [sp, #16]
 80057c0:	9b04      	ldr	r3, [sp, #16]
 80057c2:	3301      	adds	r3, #1
 80057c4:	d1d6      	bne.n	8005774 <_vfiprintf_r+0x1a0>
 80057c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057c8:	07db      	lsls	r3, r3, #31
 80057ca:	d405      	bmi.n	80057d8 <_vfiprintf_r+0x204>
 80057cc:	89bb      	ldrh	r3, [r7, #12]
 80057ce:	059b      	lsls	r3, r3, #22
 80057d0:	d402      	bmi.n	80057d8 <_vfiprintf_r+0x204>
 80057d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80057d4:	f7ff fab2 	bl	8004d3c <__retarget_lock_release_recursive>
 80057d8:	89bb      	ldrh	r3, [r7, #12]
 80057da:	065b      	lsls	r3, r3, #25
 80057dc:	d500      	bpl.n	80057e0 <_vfiprintf_r+0x20c>
 80057de:	e71e      	b.n	800561e <_vfiprintf_r+0x4a>
 80057e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80057e2:	e71e      	b.n	8005622 <_vfiprintf_r+0x4e>
 80057e4:	aa07      	add	r2, sp, #28
 80057e6:	9200      	str	r2, [sp, #0]
 80057e8:	0021      	movs	r1, r4
 80057ea:	003a      	movs	r2, r7
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <_vfiprintf_r+0x234>)
 80057ee:	9803      	ldr	r0, [sp, #12]
 80057f0:	f000 f87c 	bl	80058ec <_printf_i>
 80057f4:	e7e3      	b.n	80057be <_vfiprintf_r+0x1ea>
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	080065c4 	.word	0x080065c4
 80057fc:	080065ca 	.word	0x080065ca
 8005800:	080065ce 	.word	0x080065ce
 8005804:	00000000 	.word	0x00000000
 8005808:	080055af 	.word	0x080055af

0800580c <_printf_common>:
 800580c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800580e:	0016      	movs	r6, r2
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	688a      	ldr	r2, [r1, #8]
 8005814:	690b      	ldr	r3, [r1, #16]
 8005816:	000c      	movs	r4, r1
 8005818:	9000      	str	r0, [sp, #0]
 800581a:	4293      	cmp	r3, r2
 800581c:	da00      	bge.n	8005820 <_printf_common+0x14>
 800581e:	0013      	movs	r3, r2
 8005820:	0022      	movs	r2, r4
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	3243      	adds	r2, #67	@ 0x43
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	2a00      	cmp	r2, #0
 800582a:	d001      	beq.n	8005830 <_printf_common+0x24>
 800582c:	3301      	adds	r3, #1
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	069b      	lsls	r3, r3, #26
 8005834:	d502      	bpl.n	800583c <_printf_common+0x30>
 8005836:	6833      	ldr	r3, [r6, #0]
 8005838:	3302      	adds	r3, #2
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	2306      	movs	r3, #6
 8005840:	0015      	movs	r5, r2
 8005842:	401d      	ands	r5, r3
 8005844:	421a      	tst	r2, r3
 8005846:	d027      	beq.n	8005898 <_printf_common+0x8c>
 8005848:	0023      	movs	r3, r4
 800584a:	3343      	adds	r3, #67	@ 0x43
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	4193      	sbcs	r3, r2
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	0692      	lsls	r2, r2, #26
 8005856:	d430      	bmi.n	80058ba <_printf_common+0xae>
 8005858:	0022      	movs	r2, r4
 800585a:	9901      	ldr	r1, [sp, #4]
 800585c:	9800      	ldr	r0, [sp, #0]
 800585e:	9d08      	ldr	r5, [sp, #32]
 8005860:	3243      	adds	r2, #67	@ 0x43
 8005862:	47a8      	blx	r5
 8005864:	3001      	adds	r0, #1
 8005866:	d025      	beq.n	80058b4 <_printf_common+0xa8>
 8005868:	2206      	movs	r2, #6
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	2500      	movs	r5, #0
 800586e:	4013      	ands	r3, r2
 8005870:	2b04      	cmp	r3, #4
 8005872:	d105      	bne.n	8005880 <_printf_common+0x74>
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	68e5      	ldr	r5, [r4, #12]
 8005878:	1aed      	subs	r5, r5, r3
 800587a:	43eb      	mvns	r3, r5
 800587c:	17db      	asrs	r3, r3, #31
 800587e:	401d      	ands	r5, r3
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	6922      	ldr	r2, [r4, #16]
 8005884:	4293      	cmp	r3, r2
 8005886:	dd01      	ble.n	800588c <_printf_common+0x80>
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	18ed      	adds	r5, r5, r3
 800588c:	2600      	movs	r6, #0
 800588e:	42b5      	cmp	r5, r6
 8005890:	d120      	bne.n	80058d4 <_printf_common+0xc8>
 8005892:	2000      	movs	r0, #0
 8005894:	e010      	b.n	80058b8 <_printf_common+0xac>
 8005896:	3501      	adds	r5, #1
 8005898:	68e3      	ldr	r3, [r4, #12]
 800589a:	6832      	ldr	r2, [r6, #0]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	42ab      	cmp	r3, r5
 80058a0:	ddd2      	ble.n	8005848 <_printf_common+0x3c>
 80058a2:	0022      	movs	r2, r4
 80058a4:	2301      	movs	r3, #1
 80058a6:	9901      	ldr	r1, [sp, #4]
 80058a8:	9800      	ldr	r0, [sp, #0]
 80058aa:	9f08      	ldr	r7, [sp, #32]
 80058ac:	3219      	adds	r2, #25
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d1f0      	bne.n	8005896 <_printf_common+0x8a>
 80058b4:	2001      	movs	r0, #1
 80058b6:	4240      	negs	r0, r0
 80058b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ba:	2030      	movs	r0, #48	@ 0x30
 80058bc:	18e1      	adds	r1, r4, r3
 80058be:	3143      	adds	r1, #67	@ 0x43
 80058c0:	7008      	strb	r0, [r1, #0]
 80058c2:	0021      	movs	r1, r4
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	3145      	adds	r1, #69	@ 0x45
 80058c8:	7809      	ldrb	r1, [r1, #0]
 80058ca:	18a2      	adds	r2, r4, r2
 80058cc:	3243      	adds	r2, #67	@ 0x43
 80058ce:	3302      	adds	r3, #2
 80058d0:	7011      	strb	r1, [r2, #0]
 80058d2:	e7c1      	b.n	8005858 <_printf_common+0x4c>
 80058d4:	0022      	movs	r2, r4
 80058d6:	2301      	movs	r3, #1
 80058d8:	9901      	ldr	r1, [sp, #4]
 80058da:	9800      	ldr	r0, [sp, #0]
 80058dc:	9f08      	ldr	r7, [sp, #32]
 80058de:	321a      	adds	r2, #26
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	d0e6      	beq.n	80058b4 <_printf_common+0xa8>
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7d1      	b.n	800588e <_printf_common+0x82>
	...

080058ec <_printf_i>:
 80058ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ee:	b08b      	sub	sp, #44	@ 0x2c
 80058f0:	9206      	str	r2, [sp, #24]
 80058f2:	000a      	movs	r2, r1
 80058f4:	3243      	adds	r2, #67	@ 0x43
 80058f6:	9307      	str	r3, [sp, #28]
 80058f8:	9005      	str	r0, [sp, #20]
 80058fa:	9203      	str	r2, [sp, #12]
 80058fc:	7e0a      	ldrb	r2, [r1, #24]
 80058fe:	000c      	movs	r4, r1
 8005900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005902:	2a78      	cmp	r2, #120	@ 0x78
 8005904:	d809      	bhi.n	800591a <_printf_i+0x2e>
 8005906:	2a62      	cmp	r2, #98	@ 0x62
 8005908:	d80b      	bhi.n	8005922 <_printf_i+0x36>
 800590a:	2a00      	cmp	r2, #0
 800590c:	d100      	bne.n	8005910 <_printf_i+0x24>
 800590e:	e0ba      	b.n	8005a86 <_printf_i+0x19a>
 8005910:	497a      	ldr	r1, [pc, #488]	@ (8005afc <_printf_i+0x210>)
 8005912:	9104      	str	r1, [sp, #16]
 8005914:	2a58      	cmp	r2, #88	@ 0x58
 8005916:	d100      	bne.n	800591a <_printf_i+0x2e>
 8005918:	e08e      	b.n	8005a38 <_printf_i+0x14c>
 800591a:	0025      	movs	r5, r4
 800591c:	3542      	adds	r5, #66	@ 0x42
 800591e:	702a      	strb	r2, [r5, #0]
 8005920:	e022      	b.n	8005968 <_printf_i+0x7c>
 8005922:	0010      	movs	r0, r2
 8005924:	3863      	subs	r0, #99	@ 0x63
 8005926:	2815      	cmp	r0, #21
 8005928:	d8f7      	bhi.n	800591a <_printf_i+0x2e>
 800592a:	f7fa fbf5 	bl	8000118 <__gnu_thumb1_case_shi>
 800592e:	0016      	.short	0x0016
 8005930:	fff6001f 	.word	0xfff6001f
 8005934:	fff6fff6 	.word	0xfff6fff6
 8005938:	001ffff6 	.word	0x001ffff6
 800593c:	fff6fff6 	.word	0xfff6fff6
 8005940:	fff6fff6 	.word	0xfff6fff6
 8005944:	0036009f 	.word	0x0036009f
 8005948:	fff6007e 	.word	0xfff6007e
 800594c:	00b0fff6 	.word	0x00b0fff6
 8005950:	0036fff6 	.word	0x0036fff6
 8005954:	fff6fff6 	.word	0xfff6fff6
 8005958:	0082      	.short	0x0082
 800595a:	0025      	movs	r5, r4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	3542      	adds	r5, #66	@ 0x42
 8005960:	1d11      	adds	r1, r2, #4
 8005962:	6019      	str	r1, [r3, #0]
 8005964:	6813      	ldr	r3, [r2, #0]
 8005966:	702b      	strb	r3, [r5, #0]
 8005968:	2301      	movs	r3, #1
 800596a:	e09e      	b.n	8005aaa <_printf_i+0x1be>
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	6809      	ldr	r1, [r1, #0]
 8005970:	1d02      	adds	r2, r0, #4
 8005972:	060d      	lsls	r5, r1, #24
 8005974:	d50b      	bpl.n	800598e <_printf_i+0xa2>
 8005976:	6806      	ldr	r6, [r0, #0]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	2e00      	cmp	r6, #0
 800597c:	da03      	bge.n	8005986 <_printf_i+0x9a>
 800597e:	232d      	movs	r3, #45	@ 0x2d
 8005980:	9a03      	ldr	r2, [sp, #12]
 8005982:	4276      	negs	r6, r6
 8005984:	7013      	strb	r3, [r2, #0]
 8005986:	4b5d      	ldr	r3, [pc, #372]	@ (8005afc <_printf_i+0x210>)
 8005988:	270a      	movs	r7, #10
 800598a:	9304      	str	r3, [sp, #16]
 800598c:	e018      	b.n	80059c0 <_printf_i+0xd4>
 800598e:	6806      	ldr	r6, [r0, #0]
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	0649      	lsls	r1, r1, #25
 8005994:	d5f1      	bpl.n	800597a <_printf_i+0x8e>
 8005996:	b236      	sxth	r6, r6
 8005998:	e7ef      	b.n	800597a <_printf_i+0x8e>
 800599a:	6808      	ldr	r0, [r1, #0]
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	c940      	ldmia	r1!, {r6}
 80059a0:	0605      	lsls	r5, r0, #24
 80059a2:	d402      	bmi.n	80059aa <_printf_i+0xbe>
 80059a4:	0640      	lsls	r0, r0, #25
 80059a6:	d500      	bpl.n	80059aa <_printf_i+0xbe>
 80059a8:	b2b6      	uxth	r6, r6
 80059aa:	6019      	str	r1, [r3, #0]
 80059ac:	4b53      	ldr	r3, [pc, #332]	@ (8005afc <_printf_i+0x210>)
 80059ae:	270a      	movs	r7, #10
 80059b0:	9304      	str	r3, [sp, #16]
 80059b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80059b4:	d100      	bne.n	80059b8 <_printf_i+0xcc>
 80059b6:	3f02      	subs	r7, #2
 80059b8:	0023      	movs	r3, r4
 80059ba:	2200      	movs	r2, #0
 80059bc:	3343      	adds	r3, #67	@ 0x43
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	60a3      	str	r3, [r4, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db06      	blt.n	80059d6 <_printf_i+0xea>
 80059c8:	2104      	movs	r1, #4
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	9d03      	ldr	r5, [sp, #12]
 80059ce:	438a      	bics	r2, r1
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	4333      	orrs	r3, r6
 80059d4:	d00c      	beq.n	80059f0 <_printf_i+0x104>
 80059d6:	9d03      	ldr	r5, [sp, #12]
 80059d8:	0030      	movs	r0, r6
 80059da:	0039      	movs	r1, r7
 80059dc:	f7fa fc2c 	bl	8000238 <__aeabi_uidivmod>
 80059e0:	9b04      	ldr	r3, [sp, #16]
 80059e2:	3d01      	subs	r5, #1
 80059e4:	5c5b      	ldrb	r3, [r3, r1]
 80059e6:	702b      	strb	r3, [r5, #0]
 80059e8:	0033      	movs	r3, r6
 80059ea:	0006      	movs	r6, r0
 80059ec:	429f      	cmp	r7, r3
 80059ee:	d9f3      	bls.n	80059d8 <_printf_i+0xec>
 80059f0:	2f08      	cmp	r7, #8
 80059f2:	d109      	bne.n	8005a08 <_printf_i+0x11c>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d506      	bpl.n	8005a08 <_printf_i+0x11c>
 80059fa:	6862      	ldr	r2, [r4, #4]
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	dc02      	bgt.n	8005a08 <_printf_i+0x11c>
 8005a02:	2330      	movs	r3, #48	@ 0x30
 8005a04:	3d01      	subs	r5, #1
 8005a06:	702b      	strb	r3, [r5, #0]
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	1b5b      	subs	r3, r3, r5
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	0021      	movs	r1, r4
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	9805      	ldr	r0, [sp, #20]
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	aa09      	add	r2, sp, #36	@ 0x24
 8005a1a:	f7ff fef7 	bl	800580c <_printf_common>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d148      	bne.n	8005ab4 <_printf_i+0x1c8>
 8005a22:	2001      	movs	r0, #1
 8005a24:	4240      	negs	r0, r0
 8005a26:	b00b      	add	sp, #44	@ 0x2c
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	6809      	ldr	r1, [r1, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	6022      	str	r2, [r4, #0]
 8005a32:	2278      	movs	r2, #120	@ 0x78
 8005a34:	4932      	ldr	r1, [pc, #200]	@ (8005b00 <_printf_i+0x214>)
 8005a36:	9104      	str	r1, [sp, #16]
 8005a38:	0021      	movs	r1, r4
 8005a3a:	3145      	adds	r1, #69	@ 0x45
 8005a3c:	700a      	strb	r2, [r1, #0]
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	c940      	ldmia	r1!, {r6}
 8005a44:	0610      	lsls	r0, r2, #24
 8005a46:	d402      	bmi.n	8005a4e <_printf_i+0x162>
 8005a48:	0650      	lsls	r0, r2, #25
 8005a4a:	d500      	bpl.n	8005a4e <_printf_i+0x162>
 8005a4c:	b2b6      	uxth	r6, r6
 8005a4e:	6019      	str	r1, [r3, #0]
 8005a50:	07d3      	lsls	r3, r2, #31
 8005a52:	d502      	bpl.n	8005a5a <_printf_i+0x16e>
 8005a54:	2320      	movs	r3, #32
 8005a56:	4313      	orrs	r3, r2
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	d001      	beq.n	8005a62 <_printf_i+0x176>
 8005a5e:	2710      	movs	r7, #16
 8005a60:	e7aa      	b.n	80059b8 <_printf_i+0xcc>
 8005a62:	2220      	movs	r2, #32
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	4393      	bics	r3, r2
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	e7f8      	b.n	8005a5e <_printf_i+0x172>
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	680d      	ldr	r5, [r1, #0]
 8005a70:	1d10      	adds	r0, r2, #4
 8005a72:	6949      	ldr	r1, [r1, #20]
 8005a74:	6018      	str	r0, [r3, #0]
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	062e      	lsls	r6, r5, #24
 8005a7a:	d501      	bpl.n	8005a80 <_printf_i+0x194>
 8005a7c:	6019      	str	r1, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <_printf_i+0x19a>
 8005a80:	066d      	lsls	r5, r5, #25
 8005a82:	d5fb      	bpl.n	8005a7c <_printf_i+0x190>
 8005a84:	8019      	strh	r1, [r3, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9d03      	ldr	r5, [sp, #12]
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	e7bf      	b.n	8005a0e <_printf_i+0x122>
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	1d11      	adds	r1, r2, #4
 8005a92:	6019      	str	r1, [r3, #0]
 8005a94:	6815      	ldr	r5, [r2, #0]
 8005a96:	2100      	movs	r1, #0
 8005a98:	0028      	movs	r0, r5
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	f000 fb6e 	bl	800617c <memchr>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d001      	beq.n	8005aa8 <_printf_i+0x1bc>
 8005aa4:	1b40      	subs	r0, r0, r5
 8005aa6:	6060      	str	r0, [r4, #4]
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	2300      	movs	r3, #0
 8005aae:	9a03      	ldr	r2, [sp, #12]
 8005ab0:	7013      	strb	r3, [r2, #0]
 8005ab2:	e7ac      	b.n	8005a0e <_printf_i+0x122>
 8005ab4:	002a      	movs	r2, r5
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	9906      	ldr	r1, [sp, #24]
 8005aba:	9805      	ldr	r0, [sp, #20]
 8005abc:	9d07      	ldr	r5, [sp, #28]
 8005abe:	47a8      	blx	r5
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d0ae      	beq.n	8005a22 <_printf_i+0x136>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	079b      	lsls	r3, r3, #30
 8005ac8:	d415      	bmi.n	8005af6 <_printf_i+0x20a>
 8005aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005acc:	68e0      	ldr	r0, [r4, #12]
 8005ace:	4298      	cmp	r0, r3
 8005ad0:	daa9      	bge.n	8005a26 <_printf_i+0x13a>
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	e7a7      	b.n	8005a26 <_printf_i+0x13a>
 8005ad6:	0022      	movs	r2, r4
 8005ad8:	2301      	movs	r3, #1
 8005ada:	9906      	ldr	r1, [sp, #24]
 8005adc:	9805      	ldr	r0, [sp, #20]
 8005ade:	9e07      	ldr	r6, [sp, #28]
 8005ae0:	3219      	adds	r2, #25
 8005ae2:	47b0      	blx	r6
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d09c      	beq.n	8005a22 <_printf_i+0x136>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dcf0      	bgt.n	8005ad6 <_printf_i+0x1ea>
 8005af4:	e7e9      	b.n	8005aca <_printf_i+0x1de>
 8005af6:	2500      	movs	r5, #0
 8005af8:	e7f7      	b.n	8005aea <_printf_i+0x1fe>
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	080065d5 	.word	0x080065d5
 8005b00:	080065e6 	.word	0x080065e6

08005b04 <_scanf_chars>:
 8005b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b06:	0015      	movs	r5, r2
 8005b08:	688a      	ldr	r2, [r1, #8]
 8005b0a:	000c      	movs	r4, r1
 8005b0c:	9001      	str	r0, [sp, #4]
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	d104      	bne.n	8005b1c <_scanf_chars+0x18>
 8005b12:	698a      	ldr	r2, [r1, #24]
 8005b14:	2a00      	cmp	r2, #0
 8005b16:	d117      	bne.n	8005b48 <_scanf_chars+0x44>
 8005b18:	3201      	adds	r2, #1
 8005b1a:	60a2      	str	r2, [r4, #8]
 8005b1c:	6822      	ldr	r2, [r4, #0]
 8005b1e:	06d2      	lsls	r2, r2, #27
 8005b20:	d403      	bmi.n	8005b2a <_scanf_chars+0x26>
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	1d11      	adds	r1, r2, #4
 8005b26:	6019      	str	r1, [r3, #0]
 8005b28:	6817      	ldr	r7, [r2, #0]
 8005b2a:	2600      	movs	r6, #0
 8005b2c:	69a0      	ldr	r0, [r4, #24]
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d016      	beq.n	8005b60 <_scanf_chars+0x5c>
 8005b32:	2801      	cmp	r0, #1
 8005b34:	d10b      	bne.n	8005b4e <_scanf_chars+0x4a>
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	6962      	ldr	r2, [r4, #20]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	5cd3      	ldrb	r3, [r2, r3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10e      	bne.n	8005b60 <_scanf_chars+0x5c>
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d03b      	beq.n	8005bbe <_scanf_chars+0xba>
 8005b46:	e029      	b.n	8005b9c <_scanf_chars+0x98>
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4252      	negs	r2, r2
 8005b4c:	e7e5      	b.n	8005b1a <_scanf_chars+0x16>
 8005b4e:	2802      	cmp	r0, #2
 8005b50:	d124      	bne.n	8005b9c <_scanf_chars+0x98>
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc0 <_scanf_chars+0xbc>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4213      	tst	r3, r2
 8005b5e:	d11d      	bne.n	8005b9c <_scanf_chars+0x98>
 8005b60:	2210      	movs	r2, #16
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	3601      	adds	r6, #1
 8005b66:	4213      	tst	r3, r2
 8005b68:	d103      	bne.n	8005b72 <_scanf_chars+0x6e>
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	703b      	strb	r3, [r7, #0]
 8005b70:	3701      	adds	r7, #1
 8005b72:	682a      	ldr	r2, [r5, #0]
 8005b74:	686b      	ldr	r3, [r5, #4]
 8005b76:	3201      	adds	r2, #1
 8005b78:	602a      	str	r2, [r5, #0]
 8005b7a:	68a2      	ldr	r2, [r4, #8]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	606b      	str	r3, [r5, #4]
 8005b82:	60a2      	str	r2, [r4, #8]
 8005b84:	2a00      	cmp	r2, #0
 8005b86:	d009      	beq.n	8005b9c <_scanf_chars+0x98>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dccf      	bgt.n	8005b2c <_scanf_chars+0x28>
 8005b8c:	23c0      	movs	r3, #192	@ 0xc0
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	0029      	movs	r1, r5
 8005b92:	58e3      	ldr	r3, [r4, r3]
 8005b94:	9801      	ldr	r0, [sp, #4]
 8005b96:	4798      	blx	r3
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d0c7      	beq.n	8005b2c <_scanf_chars+0x28>
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	2310      	movs	r3, #16
 8005ba0:	0011      	movs	r1, r2
 8005ba2:	4019      	ands	r1, r3
 8005ba4:	421a      	tst	r2, r3
 8005ba6:	d106      	bne.n	8005bb6 <_scanf_chars+0xb2>
 8005ba8:	68e3      	ldr	r3, [r4, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60e3      	str	r3, [r4, #12]
 8005bae:	69a3      	ldr	r3, [r4, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d000      	beq.n	8005bb6 <_scanf_chars+0xb2>
 8005bb4:	7039      	strb	r1, [r7, #0]
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	199b      	adds	r3, r3, r6
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bc0:	08006613 	.word	0x08006613

08005bc4 <_scanf_i>:
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b08b      	sub	sp, #44	@ 0x2c
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	4b78      	ldr	r3, [pc, #480]	@ (8005dac <_scanf_i+0x1e8>)
 8005bcc:	0016      	movs	r6, r2
 8005bce:	9004      	str	r0, [sp, #16]
 8005bd0:	aa07      	add	r2, sp, #28
 8005bd2:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005bd4:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005bd6:	4a76      	ldr	r2, [pc, #472]	@ (8005db0 <_scanf_i+0x1ec>)
 8005bd8:	698b      	ldr	r3, [r1, #24]
 8005bda:	000c      	movs	r4, r1
 8005bdc:	9205      	str	r2, [sp, #20]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d101      	bne.n	8005be6 <_scanf_i+0x22>
 8005be2:	4b74      	ldr	r3, [pc, #464]	@ (8005db4 <_scanf_i+0x1f0>)
 8005be4:	9305      	str	r3, [sp, #20]
 8005be6:	22ae      	movs	r2, #174	@ 0xae
 8005be8:	2000      	movs	r0, #0
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	0052      	lsls	r2, r2, #1
 8005bee:	1e59      	subs	r1, r3, #1
 8005bf0:	9003      	str	r0, [sp, #12]
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	d905      	bls.n	8005c02 <_scanf_i+0x3e>
 8005bf6:	3b5e      	subs	r3, #94	@ 0x5e
 8005bf8:	3bff      	subs	r3, #255	@ 0xff
 8005bfa:	9303      	str	r3, [sp, #12]
 8005bfc:	235e      	movs	r3, #94	@ 0x5e
 8005bfe:	33ff      	adds	r3, #255	@ 0xff
 8005c00:	60a3      	str	r3, [r4, #8]
 8005c02:	0023      	movs	r3, r4
 8005c04:	331c      	adds	r3, #28
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	23d0      	movs	r3, #208	@ 0xd0
 8005c0a:	2700      	movs	r7, #0
 8005c0c:	6822      	ldr	r2, [r4, #0]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4313      	orrs	r3, r2
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	9b00      	ldr	r3, [sp, #0]
 8005c16:	9302      	str	r3, [sp, #8]
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	a807      	add	r0, sp, #28
 8005c1c:	7819      	ldrb	r1, [r3, #0]
 8005c1e:	00bb      	lsls	r3, r7, #2
 8005c20:	2202      	movs	r2, #2
 8005c22:	5818      	ldr	r0, [r3, r0]
 8005c24:	f000 faaa 	bl	800617c <memchr>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d029      	beq.n	8005c80 <_scanf_i+0xbc>
 8005c2c:	2f01      	cmp	r7, #1
 8005c2e:	d15e      	bne.n	8005cee <_scanf_i+0x12a>
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <_scanf_i+0x80>
 8005c36:	3308      	adds	r3, #8
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	33f9      	adds	r3, #249	@ 0xf9
 8005c3e:	33ff      	adds	r3, #255	@ 0xff
 8005c40:	4313      	orrs	r3, r2
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	4a5c      	ldr	r2, [pc, #368]	@ (8005db8 <_scanf_i+0x1f4>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	68a3      	ldr	r3, [r4, #8]
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	60a2      	str	r2, [r4, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d014      	beq.n	8005c80 <_scanf_i+0xbc>
 8005c56:	6833      	ldr	r3, [r6, #0]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	6032      	str	r2, [r6, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	9a02      	ldr	r2, [sp, #8]
 8005c60:	7013      	strb	r3, [r2, #0]
 8005c62:	6873      	ldr	r3, [r6, #4]
 8005c64:	1c55      	adds	r5, r2, #1
 8005c66:	3b01      	subs	r3, #1
 8005c68:	6073      	str	r3, [r6, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc07      	bgt.n	8005c7e <_scanf_i+0xba>
 8005c6e:	23c0      	movs	r3, #192	@ 0xc0
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	0031      	movs	r1, r6
 8005c74:	58e3      	ldr	r3, [r4, r3]
 8005c76:	9804      	ldr	r0, [sp, #16]
 8005c78:	4798      	blx	r3
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d17e      	bne.n	8005d7c <_scanf_i+0x1b8>
 8005c7e:	9502      	str	r5, [sp, #8]
 8005c80:	3701      	adds	r7, #1
 8005c82:	2f03      	cmp	r7, #3
 8005c84:	d1c8      	bne.n	8005c18 <_scanf_i+0x54>
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <_scanf_i+0xcc>
 8005c8c:	330a      	adds	r3, #10
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	2700      	movs	r7, #0
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	4949      	ldr	r1, [pc, #292]	@ (8005dbc <_scanf_i+0x1f8>)
 8005c96:	6960      	ldr	r0, [r4, #20]
 8005c98:	1ac9      	subs	r1, r1, r3
 8005c9a:	f000 f9b0 	bl	8005ffe <__sccl>
 8005c9e:	9d02      	ldr	r5, [sp, #8]
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	6820      	ldr	r0, [r4, #0]
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d03f      	beq.n	8005d2a <_scanf_i+0x166>
 8005caa:	6831      	ldr	r1, [r6, #0]
 8005cac:	6963      	ldr	r3, [r4, #20]
 8005cae:	780a      	ldrb	r2, [r1, #0]
 8005cb0:	5c9b      	ldrb	r3, [r3, r2]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d039      	beq.n	8005d2a <_scanf_i+0x166>
 8005cb6:	2a30      	cmp	r2, #48	@ 0x30
 8005cb8:	d128      	bne.n	8005d0c <_scanf_i+0x148>
 8005cba:	2380      	movs	r3, #128	@ 0x80
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	4218      	tst	r0, r3
 8005cc0:	d024      	beq.n	8005d0c <_scanf_i+0x148>
 8005cc2:	9b03      	ldr	r3, [sp, #12]
 8005cc4:	3701      	adds	r7, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <_scanf_i+0x112>
 8005cca:	001a      	movs	r2, r3
 8005ccc:	9b02      	ldr	r3, [sp, #8]
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	9203      	str	r2, [sp, #12]
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	6873      	ldr	r3, [r6, #4]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	6073      	str	r3, [r6, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dd1c      	ble.n	8005d1a <_scanf_i+0x156>
 8005ce0:	6833      	ldr	r3, [r6, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	e7d8      	b.n	8005ca0 <_scanf_i+0xdc>
 8005cee:	2f02      	cmp	r7, #2
 8005cf0:	d1ac      	bne.n	8005c4c <_scanf_i+0x88>
 8005cf2:	23c0      	movs	r3, #192	@ 0xc0
 8005cf4:	2180      	movs	r1, #128	@ 0x80
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0089      	lsls	r1, r1, #2
 8005cfe:	428b      	cmp	r3, r1
 8005d00:	d1c1      	bne.n	8005c86 <_scanf_i+0xc2>
 8005d02:	2310      	movs	r3, #16
 8005d04:	6063      	str	r3, [r4, #4]
 8005d06:	33f0      	adds	r3, #240	@ 0xf0
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	e79e      	b.n	8005c4a <_scanf_i+0x86>
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc0 <_scanf_i+0x1fc>)
 8005d0e:	4003      	ands	r3, r0
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	780b      	ldrb	r3, [r1, #0]
 8005d14:	702b      	strb	r3, [r5, #0]
 8005d16:	3501      	adds	r5, #1
 8005d18:	e7dd      	b.n	8005cd6 <_scanf_i+0x112>
 8005d1a:	23c0      	movs	r3, #192	@ 0xc0
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	0031      	movs	r1, r6
 8005d20:	58e3      	ldr	r3, [r4, r3]
 8005d22:	9804      	ldr	r0, [sp, #16]
 8005d24:	4798      	blx	r3
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d0dd      	beq.n	8005ce6 <_scanf_i+0x122>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	05db      	lsls	r3, r3, #23
 8005d2e:	d50e      	bpl.n	8005d4e <_scanf_i+0x18a>
 8005d30:	9b00      	ldr	r3, [sp, #0]
 8005d32:	429d      	cmp	r5, r3
 8005d34:	d907      	bls.n	8005d46 <_scanf_i+0x182>
 8005d36:	23be      	movs	r3, #190	@ 0xbe
 8005d38:	3d01      	subs	r5, #1
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	0032      	movs	r2, r6
 8005d3e:	7829      	ldrb	r1, [r5, #0]
 8005d40:	58e3      	ldr	r3, [r4, r3]
 8005d42:	9804      	ldr	r0, [sp, #16]
 8005d44:	4798      	blx	r3
 8005d46:	9b00      	ldr	r3, [sp, #0]
 8005d48:	2001      	movs	r0, #1
 8005d4a:	429d      	cmp	r5, r3
 8005d4c:	d029      	beq.n	8005da2 <_scanf_i+0x1de>
 8005d4e:	6821      	ldr	r1, [r4, #0]
 8005d50:	2310      	movs	r3, #16
 8005d52:	000a      	movs	r2, r1
 8005d54:	401a      	ands	r2, r3
 8005d56:	4219      	tst	r1, r3
 8005d58:	d11c      	bne.n	8005d94 <_scanf_i+0x1d0>
 8005d5a:	702a      	strb	r2, [r5, #0]
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	9900      	ldr	r1, [sp, #0]
 8005d60:	9804      	ldr	r0, [sp, #16]
 8005d62:	9e05      	ldr	r6, [sp, #20]
 8005d64:	47b0      	blx	r6
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	0691      	lsls	r1, r2, #26
 8005d6e:	d507      	bpl.n	8005d80 <_scanf_i+0x1bc>
 8005d70:	9901      	ldr	r1, [sp, #4]
 8005d72:	1d1a      	adds	r2, r3, #4
 8005d74:	600a      	str	r2, [r1, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6018      	str	r0, [r3, #0]
 8005d7a:	e008      	b.n	8005d8e <_scanf_i+0x1ca>
 8005d7c:	2700      	movs	r7, #0
 8005d7e:	e7d4      	b.n	8005d2a <_scanf_i+0x166>
 8005d80:	1d19      	adds	r1, r3, #4
 8005d82:	07d6      	lsls	r6, r2, #31
 8005d84:	d50f      	bpl.n	8005da6 <_scanf_i+0x1e2>
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	8018      	strh	r0, [r3, #0]
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60e3      	str	r3, [r4, #12]
 8005d94:	2000      	movs	r0, #0
 8005d96:	9b00      	ldr	r3, [sp, #0]
 8005d98:	1aed      	subs	r5, r5, r3
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	19ed      	adds	r5, r5, r7
 8005d9e:	195b      	adds	r3, r3, r5
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	b00b      	add	sp, #44	@ 0x2c
 8005da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da6:	9a01      	ldr	r2, [sp, #4]
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	e7e4      	b.n	8005d76 <_scanf_i+0x1b2>
 8005dac:	080064ec 	.word	0x080064ec
 8005db0:	08006415 	.word	0x08006415
 8005db4:	08006309 	.word	0x08006309
 8005db8:	fffffaff 	.word	0xfffffaff
 8005dbc:	08006607 	.word	0x08006607
 8005dc0:	fffff6ff 	.word	0xfffff6ff

08005dc4 <__sflush_r>:
 8005dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc6:	220c      	movs	r2, #12
 8005dc8:	5e8b      	ldrsh	r3, [r1, r2]
 8005dca:	0005      	movs	r5, r0
 8005dcc:	000c      	movs	r4, r1
 8005dce:	071a      	lsls	r2, r3, #28
 8005dd0:	d456      	bmi.n	8005e80 <__sflush_r+0xbc>
 8005dd2:	684a      	ldr	r2, [r1, #4]
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	dc02      	bgt.n	8005dde <__sflush_r+0x1a>
 8005dd8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	dd4e      	ble.n	8005e7c <__sflush_r+0xb8>
 8005dde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	d04b      	beq.n	8005e7c <__sflush_r+0xb8>
 8005de4:	2200      	movs	r2, #0
 8005de6:	2080      	movs	r0, #128	@ 0x80
 8005de8:	682e      	ldr	r6, [r5, #0]
 8005dea:	602a      	str	r2, [r5, #0]
 8005dec:	001a      	movs	r2, r3
 8005dee:	0140      	lsls	r0, r0, #5
 8005df0:	6a21      	ldr	r1, [r4, #32]
 8005df2:	4002      	ands	r2, r0
 8005df4:	4203      	tst	r3, r0
 8005df6:	d033      	beq.n	8005e60 <__sflush_r+0x9c>
 8005df8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	075b      	lsls	r3, r3, #29
 8005dfe:	d506      	bpl.n	8005e0e <__sflush_r+0x4a>
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <__sflush_r+0x4a>
 8005e0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e0c:	1ad2      	subs	r2, r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	0028      	movs	r0, r5
 8005e12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	47b8      	blx	r7
 8005e18:	89a2      	ldrh	r2, [r4, #12]
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d106      	bne.n	8005e2c <__sflush_r+0x68>
 8005e1e:	6829      	ldr	r1, [r5, #0]
 8005e20:	291d      	cmp	r1, #29
 8005e22:	d846      	bhi.n	8005eb2 <__sflush_r+0xee>
 8005e24:	4b29      	ldr	r3, [pc, #164]	@ (8005ecc <__sflush_r+0x108>)
 8005e26:	40cb      	lsrs	r3, r1
 8005e28:	07db      	lsls	r3, r3, #31
 8005e2a:	d542      	bpl.n	8005eb2 <__sflush_r+0xee>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	04d2      	lsls	r2, r2, #19
 8005e36:	d505      	bpl.n	8005e44 <__sflush_r+0x80>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <__sflush_r+0x7e>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d100      	bne.n	8005e44 <__sflush_r+0x80>
 8005e42:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e46:	602e      	str	r6, [r5, #0]
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d017      	beq.n	8005e7c <__sflush_r+0xb8>
 8005e4c:	0023      	movs	r3, r4
 8005e4e:	3344      	adds	r3, #68	@ 0x44
 8005e50:	4299      	cmp	r1, r3
 8005e52:	d002      	beq.n	8005e5a <__sflush_r+0x96>
 8005e54:	0028      	movs	r0, r5
 8005e56:	f7fe ff7b 	bl	8004d50 <_free_r>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e5e:	e00d      	b.n	8005e7c <__sflush_r+0xb8>
 8005e60:	2301      	movs	r3, #1
 8005e62:	0028      	movs	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	0002      	movs	r2, r0
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d1c6      	bne.n	8005dfa <__sflush_r+0x36>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0c3      	beq.n	8005dfa <__sflush_r+0x36>
 8005e72:	2b1d      	cmp	r3, #29
 8005e74:	d001      	beq.n	8005e7a <__sflush_r+0xb6>
 8005e76:	2b16      	cmp	r3, #22
 8005e78:	d11a      	bne.n	8005eb0 <__sflush_r+0xec>
 8005e7a:	602e      	str	r6, [r5, #0]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e01e      	b.n	8005ebe <__sflush_r+0xfa>
 8005e80:	690e      	ldr	r6, [r1, #16]
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d0fa      	beq.n	8005e7c <__sflush_r+0xb8>
 8005e86:	680f      	ldr	r7, [r1, #0]
 8005e88:	600e      	str	r6, [r1, #0]
 8005e8a:	1bba      	subs	r2, r7, r6
 8005e8c:	9201      	str	r2, [sp, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	079b      	lsls	r3, r3, #30
 8005e92:	d100      	bne.n	8005e96 <__sflush_r+0xd2>
 8005e94:	694a      	ldr	r2, [r1, #20]
 8005e96:	60a2      	str	r2, [r4, #8]
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	ddee      	ble.n	8005e7c <__sflush_r+0xb8>
 8005e9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ea0:	0032      	movs	r2, r6
 8005ea2:	001f      	movs	r7, r3
 8005ea4:	0028      	movs	r0, r5
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	6a21      	ldr	r1, [r4, #32]
 8005eaa:	47b8      	blx	r7
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dc07      	bgt.n	8005ec0 <__sflush_r+0xfc>
 8005eb0:	89a2      	ldrh	r2, [r4, #12]
 8005eb2:	2340      	movs	r3, #64	@ 0x40
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ec0:	9b01      	ldr	r3, [sp, #4]
 8005ec2:	1836      	adds	r6, r6, r0
 8005ec4:	1a1b      	subs	r3, r3, r0
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	e7e6      	b.n	8005e98 <__sflush_r+0xd4>
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	20400001 	.word	0x20400001

08005ed0 <_fflush_r>:
 8005ed0:	690b      	ldr	r3, [r1, #16]
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	0005      	movs	r5, r0
 8005ed6:	000c      	movs	r4, r1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <_fflush_r+0x12>
 8005edc:	2500      	movs	r5, #0
 8005ede:	0028      	movs	r0, r5
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d004      	beq.n	8005ef0 <_fflush_r+0x20>
 8005ee6:	6a03      	ldr	r3, [r0, #32]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <_fflush_r+0x20>
 8005eec:	f7fe fc5c 	bl	80047a8 <__sinit>
 8005ef0:	220c      	movs	r2, #12
 8005ef2:	5ea3      	ldrsh	r3, [r4, r2]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f1      	beq.n	8005edc <_fflush_r+0xc>
 8005ef8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005efa:	07d2      	lsls	r2, r2, #31
 8005efc:	d404      	bmi.n	8005f08 <_fflush_r+0x38>
 8005efe:	059b      	lsls	r3, r3, #22
 8005f00:	d402      	bmi.n	8005f08 <_fflush_r+0x38>
 8005f02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f04:	f7fe ff19 	bl	8004d3a <__retarget_lock_acquire_recursive>
 8005f08:	0028      	movs	r0, r5
 8005f0a:	0021      	movs	r1, r4
 8005f0c:	f7ff ff5a 	bl	8005dc4 <__sflush_r>
 8005f10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f12:	0005      	movs	r5, r0
 8005f14:	07db      	lsls	r3, r3, #31
 8005f16:	d4e2      	bmi.n	8005ede <_fflush_r+0xe>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	059b      	lsls	r3, r3, #22
 8005f1c:	d4df      	bmi.n	8005ede <_fflush_r+0xe>
 8005f1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f20:	f7fe ff0c 	bl	8004d3c <__retarget_lock_release_recursive>
 8005f24:	e7db      	b.n	8005ede <_fflush_r+0xe>
	...

08005f28 <__swhatbuf_r>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	000e      	movs	r6, r1
 8005f2c:	001d      	movs	r5, r3
 8005f2e:	230e      	movs	r3, #14
 8005f30:	5ec9      	ldrsh	r1, [r1, r3]
 8005f32:	0014      	movs	r4, r2
 8005f34:	b096      	sub	sp, #88	@ 0x58
 8005f36:	2900      	cmp	r1, #0
 8005f38:	da0c      	bge.n	8005f54 <__swhatbuf_r+0x2c>
 8005f3a:	89b2      	ldrh	r2, [r6, #12]
 8005f3c:	2380      	movs	r3, #128	@ 0x80
 8005f3e:	0011      	movs	r1, r2
 8005f40:	4019      	ands	r1, r3
 8005f42:	421a      	tst	r2, r3
 8005f44:	d114      	bne.n	8005f70 <__swhatbuf_r+0x48>
 8005f46:	2380      	movs	r3, #128	@ 0x80
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	6029      	str	r1, [r5, #0]
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	b016      	add	sp, #88	@ 0x58
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	466a      	mov	r2, sp
 8005f56:	f000 f8db 	bl	8006110 <_fstat_r>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	dbed      	blt.n	8005f3a <__swhatbuf_r+0x12>
 8005f5e:	23f0      	movs	r3, #240	@ 0xf0
 8005f60:	9901      	ldr	r1, [sp, #4]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	4019      	ands	r1, r3
 8005f66:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <__swhatbuf_r+0x50>)
 8005f68:	18c9      	adds	r1, r1, r3
 8005f6a:	424b      	negs	r3, r1
 8005f6c:	4159      	adcs	r1, r3
 8005f6e:	e7ea      	b.n	8005f46 <__swhatbuf_r+0x1e>
 8005f70:	2100      	movs	r1, #0
 8005f72:	2340      	movs	r3, #64	@ 0x40
 8005f74:	e7e9      	b.n	8005f4a <__swhatbuf_r+0x22>
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	ffffe000 	.word	0xffffe000

08005f7c <__smakebuf_r>:
 8005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7e:	2602      	movs	r6, #2
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	0005      	movs	r5, r0
 8005f84:	000c      	movs	r4, r1
 8005f86:	b085      	sub	sp, #20
 8005f88:	4233      	tst	r3, r6
 8005f8a:	d007      	beq.n	8005f9c <__smakebuf_r+0x20>
 8005f8c:	0023      	movs	r3, r4
 8005f8e:	3347      	adds	r3, #71	@ 0x47
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2301      	movs	r3, #1
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	b005      	add	sp, #20
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	aa02      	add	r2, sp, #8
 8005fa0:	f7ff ffc2 	bl	8005f28 <__swhatbuf_r>
 8005fa4:	9f02      	ldr	r7, [sp, #8]
 8005fa6:	9001      	str	r0, [sp, #4]
 8005fa8:	0039      	movs	r1, r7
 8005faa:	0028      	movs	r0, r5
 8005fac:	f7fe ff3c 	bl	8004e28 <_malloc_r>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d108      	bne.n	8005fc6 <__smakebuf_r+0x4a>
 8005fb4:	220c      	movs	r2, #12
 8005fb6:	5ea3      	ldrsh	r3, [r4, r2]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ed      	bmi.n	8005f98 <__smakebuf_r+0x1c>
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	4393      	bics	r3, r2
 8005fc0:	431e      	orrs	r6, r3
 8005fc2:	81a6      	strh	r6, [r4, #12]
 8005fc4:	e7e2      	b.n	8005f8c <__smakebuf_r+0x10>
 8005fc6:	2380      	movs	r3, #128	@ 0x80
 8005fc8:	89a2      	ldrh	r2, [r4, #12]
 8005fca:	6020      	str	r0, [r4, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	81a3      	strh	r3, [r4, #12]
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	6120      	str	r0, [r4, #16]
 8005fd4:	6167      	str	r7, [r4, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <__smakebuf_r+0x78>
 8005fda:	0028      	movs	r0, r5
 8005fdc:	230e      	movs	r3, #14
 8005fde:	5ee1      	ldrsh	r1, [r4, r3]
 8005fe0:	f000 f8a8 	bl	8006134 <_isatty_r>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d005      	beq.n	8005ff4 <__smakebuf_r+0x78>
 8005fe8:	2303      	movs	r3, #3
 8005fea:	89a2      	ldrh	r2, [r4, #12]
 8005fec:	439a      	bics	r2, r3
 8005fee:	3b02      	subs	r3, #2
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	9a01      	ldr	r2, [sp, #4]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	e7cc      	b.n	8005f98 <__smakebuf_r+0x1c>

08005ffe <__sccl>:
 8005ffe:	b570      	push	{r4, r5, r6, lr}
 8006000:	780b      	ldrb	r3, [r1, #0]
 8006002:	0004      	movs	r4, r0
 8006004:	2b5e      	cmp	r3, #94	@ 0x5e
 8006006:	d019      	beq.n	800603c <__sccl+0x3e>
 8006008:	1c4d      	adds	r5, r1, #1
 800600a:	2100      	movs	r1, #0
 800600c:	0022      	movs	r2, r4
 800600e:	1c60      	adds	r0, r4, #1
 8006010:	30ff      	adds	r0, #255	@ 0xff
 8006012:	7011      	strb	r1, [r2, #0]
 8006014:	3201      	adds	r2, #1
 8006016:	4282      	cmp	r2, r0
 8006018:	d1fb      	bne.n	8006012 <__sccl+0x14>
 800601a:	1e68      	subs	r0, r5, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d026      	beq.n	800606e <__sccl+0x70>
 8006020:	2601      	movs	r6, #1
 8006022:	404e      	eors	r6, r1
 8006024:	0028      	movs	r0, r5
 8006026:	54e6      	strb	r6, [r4, r3]
 8006028:	7801      	ldrb	r1, [r0, #0]
 800602a:	1c45      	adds	r5, r0, #1
 800602c:	292d      	cmp	r1, #45	@ 0x2d
 800602e:	d009      	beq.n	8006044 <__sccl+0x46>
 8006030:	295d      	cmp	r1, #93	@ 0x5d
 8006032:	d01b      	beq.n	800606c <__sccl+0x6e>
 8006034:	2900      	cmp	r1, #0
 8006036:	d01a      	beq.n	800606e <__sccl+0x70>
 8006038:	000b      	movs	r3, r1
 800603a:	e7f3      	b.n	8006024 <__sccl+0x26>
 800603c:	784b      	ldrb	r3, [r1, #1]
 800603e:	1c8d      	adds	r5, r1, #2
 8006040:	2101      	movs	r1, #1
 8006042:	e7e3      	b.n	800600c <__sccl+0xe>
 8006044:	7842      	ldrb	r2, [r0, #1]
 8006046:	2a5d      	cmp	r2, #93	@ 0x5d
 8006048:	d0f6      	beq.n	8006038 <__sccl+0x3a>
 800604a:	4293      	cmp	r3, r2
 800604c:	dcf4      	bgt.n	8006038 <__sccl+0x3a>
 800604e:	0019      	movs	r1, r3
 8006050:	3002      	adds	r0, #2
 8006052:	3101      	adds	r1, #1
 8006054:	5466      	strb	r6, [r4, r1]
 8006056:	428a      	cmp	r2, r1
 8006058:	dcfb      	bgt.n	8006052 <__sccl+0x54>
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	4293      	cmp	r3, r2
 800605e:	db02      	blt.n	8006066 <__sccl+0x68>
 8006060:	2200      	movs	r2, #0
 8006062:	188b      	adds	r3, r1, r2
 8006064:	e7e0      	b.n	8006028 <__sccl+0x2a>
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	3a01      	subs	r2, #1
 800606a:	e7fa      	b.n	8006062 <__sccl+0x64>
 800606c:	0028      	movs	r0, r5
 800606e:	bd70      	pop	{r4, r5, r6, pc}

08006070 <__submore>:
 8006070:	000b      	movs	r3, r1
 8006072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006074:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8006076:	3344      	adds	r3, #68	@ 0x44
 8006078:	000c      	movs	r4, r1
 800607a:	429d      	cmp	r5, r3
 800607c:	d11c      	bne.n	80060b8 <__submore+0x48>
 800607e:	2680      	movs	r6, #128	@ 0x80
 8006080:	00f6      	lsls	r6, r6, #3
 8006082:	0031      	movs	r1, r6
 8006084:	f7fe fed0 	bl	8004e28 <_malloc_r>
 8006088:	2800      	cmp	r0, #0
 800608a:	d102      	bne.n	8006092 <__submore+0x22>
 800608c:	2001      	movs	r0, #1
 800608e:	4240      	negs	r0, r0
 8006090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006092:	0023      	movs	r3, r4
 8006094:	6360      	str	r0, [r4, #52]	@ 0x34
 8006096:	63a6      	str	r6, [r4, #56]	@ 0x38
 8006098:	3346      	adds	r3, #70	@ 0x46
 800609a:	781a      	ldrb	r2, [r3, #0]
 800609c:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <__submore+0x70>)
 800609e:	54c2      	strb	r2, [r0, r3]
 80060a0:	0023      	movs	r3, r4
 80060a2:	3345      	adds	r3, #69	@ 0x45
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <__submore+0x74>)
 80060a8:	54c2      	strb	r2, [r0, r3]
 80060aa:	782a      	ldrb	r2, [r5, #0]
 80060ac:	4b0e      	ldr	r3, [pc, #56]	@ (80060e8 <__submore+0x78>)
 80060ae:	54c2      	strb	r2, [r0, r3]
 80060b0:	18c0      	adds	r0, r0, r3
 80060b2:	6020      	str	r0, [r4, #0]
 80060b4:	2000      	movs	r0, #0
 80060b6:	e7eb      	b.n	8006090 <__submore+0x20>
 80060b8:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 80060ba:	0029      	movs	r1, r5
 80060bc:	0073      	lsls	r3, r6, #1
 80060be:	001a      	movs	r2, r3
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	f000 f866 	bl	8006192 <_realloc_r>
 80060c6:	1e05      	subs	r5, r0, #0
 80060c8:	d0e0      	beq.n	800608c <__submore+0x1c>
 80060ca:	1987      	adds	r7, r0, r6
 80060cc:	0001      	movs	r1, r0
 80060ce:	0032      	movs	r2, r6
 80060d0:	0038      	movs	r0, r7
 80060d2:	f7fe fe34 	bl	8004d3e <memcpy>
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	6027      	str	r7, [r4, #0]
 80060da:	6365      	str	r5, [r4, #52]	@ 0x34
 80060dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80060de:	e7e9      	b.n	80060b4 <__submore+0x44>
 80060e0:	000003ff 	.word	0x000003ff
 80060e4:	000003fe 	.word	0x000003fe
 80060e8:	000003fd 	.word	0x000003fd

080060ec <memmove>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	4288      	cmp	r0, r1
 80060f0:	d902      	bls.n	80060f8 <memmove+0xc>
 80060f2:	188b      	adds	r3, r1, r2
 80060f4:	4298      	cmp	r0, r3
 80060f6:	d308      	bcc.n	800610a <memmove+0x1e>
 80060f8:	2300      	movs	r3, #0
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d007      	beq.n	800610e <memmove+0x22>
 80060fe:	5ccc      	ldrb	r4, [r1, r3]
 8006100:	54c4      	strb	r4, [r0, r3]
 8006102:	3301      	adds	r3, #1
 8006104:	e7f9      	b.n	80060fa <memmove+0xe>
 8006106:	5c8b      	ldrb	r3, [r1, r2]
 8006108:	5483      	strb	r3, [r0, r2]
 800610a:	3a01      	subs	r2, #1
 800610c:	d2fb      	bcs.n	8006106 <memmove+0x1a>
 800610e:	bd10      	pop	{r4, pc}

08006110 <_fstat_r>:
 8006110:	2300      	movs	r3, #0
 8006112:	b570      	push	{r4, r5, r6, lr}
 8006114:	4d06      	ldr	r5, [pc, #24]	@ (8006130 <_fstat_r+0x20>)
 8006116:	0004      	movs	r4, r0
 8006118:	0008      	movs	r0, r1
 800611a:	0011      	movs	r1, r2
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	f7fb f8d6 	bl	80012ce <_fstat>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d103      	bne.n	800612e <_fstat_r+0x1e>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d000      	beq.n	800612e <_fstat_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	20002374 	.word	0x20002374

08006134 <_isatty_r>:
 8006134:	2300      	movs	r3, #0
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	4d06      	ldr	r5, [pc, #24]	@ (8006154 <_isatty_r+0x20>)
 800613a:	0004      	movs	r4, r0
 800613c:	0008      	movs	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fb f8d3 	bl	80012ea <_isatty>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d103      	bne.n	8006150 <_isatty_r+0x1c>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d000      	beq.n	8006150 <_isatty_r+0x1c>
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	20002374 	.word	0x20002374

08006158 <_sbrk_r>:
 8006158:	2300      	movs	r3, #0
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	4d06      	ldr	r5, [pc, #24]	@ (8006178 <_sbrk_r+0x20>)
 800615e:	0004      	movs	r4, r0
 8006160:	0008      	movs	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fb f8d6 	bl	8001314 <_sbrk>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d103      	bne.n	8006174 <_sbrk_r+0x1c>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d000      	beq.n	8006174 <_sbrk_r+0x1c>
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	20002374 	.word	0x20002374

0800617c <memchr>:
 800617c:	b2c9      	uxtb	r1, r1
 800617e:	1882      	adds	r2, r0, r2
 8006180:	4290      	cmp	r0, r2
 8006182:	d101      	bne.n	8006188 <memchr+0xc>
 8006184:	2000      	movs	r0, #0
 8006186:	4770      	bx	lr
 8006188:	7803      	ldrb	r3, [r0, #0]
 800618a:	428b      	cmp	r3, r1
 800618c:	d0fb      	beq.n	8006186 <memchr+0xa>
 800618e:	3001      	adds	r0, #1
 8006190:	e7f6      	b.n	8006180 <memchr+0x4>

08006192 <_realloc_r>:
 8006192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006194:	0006      	movs	r6, r0
 8006196:	000c      	movs	r4, r1
 8006198:	0015      	movs	r5, r2
 800619a:	2900      	cmp	r1, #0
 800619c:	d105      	bne.n	80061aa <_realloc_r+0x18>
 800619e:	0011      	movs	r1, r2
 80061a0:	f7fe fe42 	bl	8004e28 <_malloc_r>
 80061a4:	0004      	movs	r4, r0
 80061a6:	0020      	movs	r0, r4
 80061a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	d103      	bne.n	80061b6 <_realloc_r+0x24>
 80061ae:	f7fe fdcf 	bl	8004d50 <_free_r>
 80061b2:	002c      	movs	r4, r5
 80061b4:	e7f7      	b.n	80061a6 <_realloc_r+0x14>
 80061b6:	f000 f931 	bl	800641c <_malloc_usable_size_r>
 80061ba:	0007      	movs	r7, r0
 80061bc:	4285      	cmp	r5, r0
 80061be:	d802      	bhi.n	80061c6 <_realloc_r+0x34>
 80061c0:	0843      	lsrs	r3, r0, #1
 80061c2:	42ab      	cmp	r3, r5
 80061c4:	d3ef      	bcc.n	80061a6 <_realloc_r+0x14>
 80061c6:	0029      	movs	r1, r5
 80061c8:	0030      	movs	r0, r6
 80061ca:	f7fe fe2d 	bl	8004e28 <_malloc_r>
 80061ce:	9001      	str	r0, [sp, #4]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d101      	bne.n	80061d8 <_realloc_r+0x46>
 80061d4:	9c01      	ldr	r4, [sp, #4]
 80061d6:	e7e6      	b.n	80061a6 <_realloc_r+0x14>
 80061d8:	002a      	movs	r2, r5
 80061da:	42bd      	cmp	r5, r7
 80061dc:	d900      	bls.n	80061e0 <_realloc_r+0x4e>
 80061de:	003a      	movs	r2, r7
 80061e0:	0021      	movs	r1, r4
 80061e2:	9801      	ldr	r0, [sp, #4]
 80061e4:	f7fe fdab 	bl	8004d3e <memcpy>
 80061e8:	0021      	movs	r1, r4
 80061ea:	0030      	movs	r0, r6
 80061ec:	f7fe fdb0 	bl	8004d50 <_free_r>
 80061f0:	e7f0      	b.n	80061d4 <_realloc_r+0x42>
	...

080061f4 <_strtol_l.isra.0>:
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	b085      	sub	sp, #20
 80061f8:	0017      	movs	r7, r2
 80061fa:	001e      	movs	r6, r3
 80061fc:	9003      	str	r0, [sp, #12]
 80061fe:	9101      	str	r1, [sp, #4]
 8006200:	2b24      	cmp	r3, #36	@ 0x24
 8006202:	d823      	bhi.n	800624c <_strtol_l.isra.0+0x58>
 8006204:	000c      	movs	r4, r1
 8006206:	2b01      	cmp	r3, #1
 8006208:	d020      	beq.n	800624c <_strtol_l.isra.0+0x58>
 800620a:	4b3d      	ldr	r3, [pc, #244]	@ (8006300 <_strtol_l.isra.0+0x10c>)
 800620c:	2208      	movs	r2, #8
 800620e:	469c      	mov	ip, r3
 8006210:	0023      	movs	r3, r4
 8006212:	4661      	mov	r1, ip
 8006214:	781d      	ldrb	r5, [r3, #0]
 8006216:	3401      	adds	r4, #1
 8006218:	5d48      	ldrb	r0, [r1, r5]
 800621a:	0001      	movs	r1, r0
 800621c:	4011      	ands	r1, r2
 800621e:	4210      	tst	r0, r2
 8006220:	d1f6      	bne.n	8006210 <_strtol_l.isra.0+0x1c>
 8006222:	2d2d      	cmp	r5, #45	@ 0x2d
 8006224:	d119      	bne.n	800625a <_strtol_l.isra.0+0x66>
 8006226:	7825      	ldrb	r5, [r4, #0]
 8006228:	1c9c      	adds	r4, r3, #2
 800622a:	2301      	movs	r3, #1
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	2210      	movs	r2, #16
 8006230:	0033      	movs	r3, r6
 8006232:	4393      	bics	r3, r2
 8006234:	d11d      	bne.n	8006272 <_strtol_l.isra.0+0x7e>
 8006236:	2d30      	cmp	r5, #48	@ 0x30
 8006238:	d115      	bne.n	8006266 <_strtol_l.isra.0+0x72>
 800623a:	2120      	movs	r1, #32
 800623c:	7823      	ldrb	r3, [r4, #0]
 800623e:	438b      	bics	r3, r1
 8006240:	2b58      	cmp	r3, #88	@ 0x58
 8006242:	d110      	bne.n	8006266 <_strtol_l.isra.0+0x72>
 8006244:	7865      	ldrb	r5, [r4, #1]
 8006246:	3402      	adds	r4, #2
 8006248:	2610      	movs	r6, #16
 800624a:	e012      	b.n	8006272 <_strtol_l.isra.0+0x7e>
 800624c:	f7fe fd4a 	bl	8004ce4 <__errno>
 8006250:	2316      	movs	r3, #22
 8006252:	6003      	str	r3, [r0, #0]
 8006254:	2000      	movs	r0, #0
 8006256:	b005      	add	sp, #20
 8006258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625a:	9100      	str	r1, [sp, #0]
 800625c:	2d2b      	cmp	r5, #43	@ 0x2b
 800625e:	d1e6      	bne.n	800622e <_strtol_l.isra.0+0x3a>
 8006260:	7825      	ldrb	r5, [r4, #0]
 8006262:	1c9c      	adds	r4, r3, #2
 8006264:	e7e3      	b.n	800622e <_strtol_l.isra.0+0x3a>
 8006266:	2e00      	cmp	r6, #0
 8006268:	d1ee      	bne.n	8006248 <_strtol_l.isra.0+0x54>
 800626a:	360a      	adds	r6, #10
 800626c:	2d30      	cmp	r5, #48	@ 0x30
 800626e:	d100      	bne.n	8006272 <_strtol_l.isra.0+0x7e>
 8006270:	3e02      	subs	r6, #2
 8006272:	4a24      	ldr	r2, [pc, #144]	@ (8006304 <_strtol_l.isra.0+0x110>)
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	4694      	mov	ip, r2
 8006278:	4463      	add	r3, ip
 800627a:	0031      	movs	r1, r6
 800627c:	0018      	movs	r0, r3
 800627e:	9302      	str	r3, [sp, #8]
 8006280:	f7f9 ffda 	bl	8000238 <__aeabi_uidivmod>
 8006284:	2200      	movs	r2, #0
 8006286:	4684      	mov	ip, r0
 8006288:	0010      	movs	r0, r2
 800628a:	002b      	movs	r3, r5
 800628c:	3b30      	subs	r3, #48	@ 0x30
 800628e:	2b09      	cmp	r3, #9
 8006290:	d811      	bhi.n	80062b6 <_strtol_l.isra.0+0xc2>
 8006292:	001d      	movs	r5, r3
 8006294:	42ae      	cmp	r6, r5
 8006296:	dd1d      	ble.n	80062d4 <_strtol_l.isra.0+0xe0>
 8006298:	1c53      	adds	r3, r2, #1
 800629a:	d009      	beq.n	80062b0 <_strtol_l.isra.0+0xbc>
 800629c:	2201      	movs	r2, #1
 800629e:	4252      	negs	r2, r2
 80062a0:	4584      	cmp	ip, r0
 80062a2:	d305      	bcc.n	80062b0 <_strtol_l.isra.0+0xbc>
 80062a4:	d101      	bne.n	80062aa <_strtol_l.isra.0+0xb6>
 80062a6:	42a9      	cmp	r1, r5
 80062a8:	db11      	blt.n	80062ce <_strtol_l.isra.0+0xda>
 80062aa:	2201      	movs	r2, #1
 80062ac:	4370      	muls	r0, r6
 80062ae:	1828      	adds	r0, r5, r0
 80062b0:	7825      	ldrb	r5, [r4, #0]
 80062b2:	3401      	adds	r4, #1
 80062b4:	e7e9      	b.n	800628a <_strtol_l.isra.0+0x96>
 80062b6:	002b      	movs	r3, r5
 80062b8:	3b41      	subs	r3, #65	@ 0x41
 80062ba:	2b19      	cmp	r3, #25
 80062bc:	d801      	bhi.n	80062c2 <_strtol_l.isra.0+0xce>
 80062be:	3d37      	subs	r5, #55	@ 0x37
 80062c0:	e7e8      	b.n	8006294 <_strtol_l.isra.0+0xa0>
 80062c2:	002b      	movs	r3, r5
 80062c4:	3b61      	subs	r3, #97	@ 0x61
 80062c6:	2b19      	cmp	r3, #25
 80062c8:	d804      	bhi.n	80062d4 <_strtol_l.isra.0+0xe0>
 80062ca:	3d57      	subs	r5, #87	@ 0x57
 80062cc:	e7e2      	b.n	8006294 <_strtol_l.isra.0+0xa0>
 80062ce:	2201      	movs	r2, #1
 80062d0:	4252      	negs	r2, r2
 80062d2:	e7ed      	b.n	80062b0 <_strtol_l.isra.0+0xbc>
 80062d4:	1c53      	adds	r3, r2, #1
 80062d6:	d108      	bne.n	80062ea <_strtol_l.isra.0+0xf6>
 80062d8:	2322      	movs	r3, #34	@ 0x22
 80062da:	9a03      	ldr	r2, [sp, #12]
 80062dc:	9802      	ldr	r0, [sp, #8]
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	2f00      	cmp	r7, #0
 80062e2:	d0b8      	beq.n	8006256 <_strtol_l.isra.0+0x62>
 80062e4:	1e63      	subs	r3, r4, #1
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	e007      	b.n	80062fa <_strtol_l.isra.0+0x106>
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d000      	beq.n	80062f2 <_strtol_l.isra.0+0xfe>
 80062f0:	4240      	negs	r0, r0
 80062f2:	2f00      	cmp	r7, #0
 80062f4:	d0af      	beq.n	8006256 <_strtol_l.isra.0+0x62>
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	d1f4      	bne.n	80062e4 <_strtol_l.isra.0+0xf0>
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	e7aa      	b.n	8006256 <_strtol_l.isra.0+0x62>
 8006300:	08006613 	.word	0x08006613
 8006304:	7fffffff 	.word	0x7fffffff

08006308 <_strtol_r>:
 8006308:	b510      	push	{r4, lr}
 800630a:	f7ff ff73 	bl	80061f4 <_strtol_l.isra.0>
 800630e:	bd10      	pop	{r4, pc}

08006310 <_strtoul_l.isra.0>:
 8006310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006312:	001e      	movs	r6, r3
 8006314:	4b3e      	ldr	r3, [pc, #248]	@ (8006410 <_strtoul_l.isra.0+0x100>)
 8006316:	0017      	movs	r7, r2
 8006318:	000c      	movs	r4, r1
 800631a:	469c      	mov	ip, r3
 800631c:	2208      	movs	r2, #8
 800631e:	b085      	sub	sp, #20
 8006320:	9003      	str	r0, [sp, #12]
 8006322:	9100      	str	r1, [sp, #0]
 8006324:	0023      	movs	r3, r4
 8006326:	4661      	mov	r1, ip
 8006328:	781d      	ldrb	r5, [r3, #0]
 800632a:	3401      	adds	r4, #1
 800632c:	5d48      	ldrb	r0, [r1, r5]
 800632e:	0001      	movs	r1, r0
 8006330:	4011      	ands	r1, r2
 8006332:	4210      	tst	r0, r2
 8006334:	d1f6      	bne.n	8006324 <_strtoul_l.isra.0+0x14>
 8006336:	2d2d      	cmp	r5, #45	@ 0x2d
 8006338:	d112      	bne.n	8006360 <_strtoul_l.isra.0+0x50>
 800633a:	7825      	ldrb	r5, [r4, #0]
 800633c:	1c9c      	adds	r4, r3, #2
 800633e:	2301      	movs	r3, #1
 8006340:	9302      	str	r3, [sp, #8]
 8006342:	2210      	movs	r2, #16
 8006344:	0033      	movs	r3, r6
 8006346:	4393      	bics	r3, r2
 8006348:	d116      	bne.n	8006378 <_strtoul_l.isra.0+0x68>
 800634a:	2d30      	cmp	r5, #48	@ 0x30
 800634c:	d10e      	bne.n	800636c <_strtoul_l.isra.0+0x5c>
 800634e:	2120      	movs	r1, #32
 8006350:	7823      	ldrb	r3, [r4, #0]
 8006352:	438b      	bics	r3, r1
 8006354:	2b58      	cmp	r3, #88	@ 0x58
 8006356:	d109      	bne.n	800636c <_strtoul_l.isra.0+0x5c>
 8006358:	7865      	ldrb	r5, [r4, #1]
 800635a:	3402      	adds	r4, #2
 800635c:	2610      	movs	r6, #16
 800635e:	e00b      	b.n	8006378 <_strtoul_l.isra.0+0x68>
 8006360:	9102      	str	r1, [sp, #8]
 8006362:	2d2b      	cmp	r5, #43	@ 0x2b
 8006364:	d1ed      	bne.n	8006342 <_strtoul_l.isra.0+0x32>
 8006366:	7825      	ldrb	r5, [r4, #0]
 8006368:	1c9c      	adds	r4, r3, #2
 800636a:	e7ea      	b.n	8006342 <_strtoul_l.isra.0+0x32>
 800636c:	2e00      	cmp	r6, #0
 800636e:	d1f5      	bne.n	800635c <_strtoul_l.isra.0+0x4c>
 8006370:	360a      	adds	r6, #10
 8006372:	2d30      	cmp	r5, #48	@ 0x30
 8006374:	d100      	bne.n	8006378 <_strtoul_l.isra.0+0x68>
 8006376:	3e02      	subs	r6, #2
 8006378:	2001      	movs	r0, #1
 800637a:	0031      	movs	r1, r6
 800637c:	4240      	negs	r0, r0
 800637e:	f7f9 fed5 	bl	800012c <__udivsi3>
 8006382:	9001      	str	r0, [sp, #4]
 8006384:	2001      	movs	r0, #1
 8006386:	0031      	movs	r1, r6
 8006388:	4240      	negs	r0, r0
 800638a:	f7f9 ff55 	bl	8000238 <__aeabi_uidivmod>
 800638e:	2300      	movs	r3, #0
 8006390:	2201      	movs	r2, #1
 8006392:	0018      	movs	r0, r3
 8006394:	4694      	mov	ip, r2
 8006396:	002a      	movs	r2, r5
 8006398:	3a30      	subs	r2, #48	@ 0x30
 800639a:	2a09      	cmp	r2, #9
 800639c:	d812      	bhi.n	80063c4 <_strtoul_l.isra.0+0xb4>
 800639e:	0015      	movs	r5, r2
 80063a0:	42ae      	cmp	r6, r5
 80063a2:	dd1e      	ble.n	80063e2 <_strtoul_l.isra.0+0xd2>
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	d00a      	beq.n	80063be <_strtoul_l.isra.0+0xae>
 80063a8:	2301      	movs	r3, #1
 80063aa:	9a01      	ldr	r2, [sp, #4]
 80063ac:	425b      	negs	r3, r3
 80063ae:	4282      	cmp	r2, r0
 80063b0:	d305      	bcc.n	80063be <_strtoul_l.isra.0+0xae>
 80063b2:	d101      	bne.n	80063b8 <_strtoul_l.isra.0+0xa8>
 80063b4:	42a9      	cmp	r1, r5
 80063b6:	db11      	blt.n	80063dc <_strtoul_l.isra.0+0xcc>
 80063b8:	4663      	mov	r3, ip
 80063ba:	4370      	muls	r0, r6
 80063bc:	1828      	adds	r0, r5, r0
 80063be:	7825      	ldrb	r5, [r4, #0]
 80063c0:	3401      	adds	r4, #1
 80063c2:	e7e8      	b.n	8006396 <_strtoul_l.isra.0+0x86>
 80063c4:	002a      	movs	r2, r5
 80063c6:	3a41      	subs	r2, #65	@ 0x41
 80063c8:	2a19      	cmp	r2, #25
 80063ca:	d801      	bhi.n	80063d0 <_strtoul_l.isra.0+0xc0>
 80063cc:	3d37      	subs	r5, #55	@ 0x37
 80063ce:	e7e7      	b.n	80063a0 <_strtoul_l.isra.0+0x90>
 80063d0:	002a      	movs	r2, r5
 80063d2:	3a61      	subs	r2, #97	@ 0x61
 80063d4:	2a19      	cmp	r2, #25
 80063d6:	d804      	bhi.n	80063e2 <_strtoul_l.isra.0+0xd2>
 80063d8:	3d57      	subs	r5, #87	@ 0x57
 80063da:	e7e1      	b.n	80063a0 <_strtoul_l.isra.0+0x90>
 80063dc:	2301      	movs	r3, #1
 80063de:	425b      	negs	r3, r3
 80063e0:	e7ed      	b.n	80063be <_strtoul_l.isra.0+0xae>
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	d107      	bne.n	80063f6 <_strtoul_l.isra.0+0xe6>
 80063e6:	2222      	movs	r2, #34	@ 0x22
 80063e8:	9903      	ldr	r1, [sp, #12]
 80063ea:	0018      	movs	r0, r3
 80063ec:	600a      	str	r2, [r1, #0]
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	d109      	bne.n	8006406 <_strtoul_l.isra.0+0xf6>
 80063f2:	b005      	add	sp, #20
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	9a02      	ldr	r2, [sp, #8]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d000      	beq.n	80063fe <_strtoul_l.isra.0+0xee>
 80063fc:	4240      	negs	r0, r0
 80063fe:	2f00      	cmp	r7, #0
 8006400:	d0f7      	beq.n	80063f2 <_strtoul_l.isra.0+0xe2>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <_strtoul_l.isra.0+0xfa>
 8006406:	1e63      	subs	r3, r4, #1
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	9b00      	ldr	r3, [sp, #0]
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	e7f0      	b.n	80063f2 <_strtoul_l.isra.0+0xe2>
 8006410:	08006613 	.word	0x08006613

08006414 <_strtoul_r>:
 8006414:	b510      	push	{r4, lr}
 8006416:	f7ff ff7b 	bl	8006310 <_strtoul_l.isra.0>
 800641a:	bd10      	pop	{r4, pc}

0800641c <_malloc_usable_size_r>:
 800641c:	1f0b      	subs	r3, r1, #4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	1f18      	subs	r0, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	da01      	bge.n	800642a <_malloc_usable_size_r+0xe>
 8006426:	580b      	ldr	r3, [r1, r0]
 8006428:	18c0      	adds	r0, r0, r3
 800642a:	4770      	bx	lr

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
