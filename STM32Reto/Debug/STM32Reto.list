
STM32Reto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002400  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080024b4  080024b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002698  08002698  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002698  08002698  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002698  08002698  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002698  08002698  00003698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800269c  0800269c  0000369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080026a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000005c  080026fc  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080026fc  00004208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001690  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b4  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00005ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000114  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002384  00000000  00000000  0000616c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002644  00000000  00000000  000084f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008572  00000000  00000000  0000ab34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000130a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c30  00000000  00000000  000130ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  00013d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000005c 	.word	0x2000005c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	0800249c 	.word	0x0800249c

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000060 	.word	0x20000060
 80000f8:	0800249c 	.word	0x0800249c

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_shi>:
 800010c:	b403      	push	{r0, r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0040      	lsls	r0, r0, #1
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	5e09      	ldrsh	r1, [r1, r0]
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	448e      	add	lr, r1
 800011c:	bc03      	pop	{r0, r1}
 800011e:	4770      	bx	lr

08000120 <__udivsi3>:
 8000120:	2200      	movs	r2, #0
 8000122:	0843      	lsrs	r3, r0, #1
 8000124:	428b      	cmp	r3, r1
 8000126:	d374      	bcc.n	8000212 <__udivsi3+0xf2>
 8000128:	0903      	lsrs	r3, r0, #4
 800012a:	428b      	cmp	r3, r1
 800012c:	d35f      	bcc.n	80001ee <__udivsi3+0xce>
 800012e:	0a03      	lsrs	r3, r0, #8
 8000130:	428b      	cmp	r3, r1
 8000132:	d344      	bcc.n	80001be <__udivsi3+0x9e>
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d328      	bcc.n	800018c <__udivsi3+0x6c>
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d30d      	bcc.n	800015c <__udivsi3+0x3c>
 8000140:	22ff      	movs	r2, #255	@ 0xff
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	ba12      	rev	r2, r2
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d302      	bcc.n	8000152 <__udivsi3+0x32>
 800014c:	1212      	asrs	r2, r2, #8
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	d065      	beq.n	800021e <__udivsi3+0xfe>
 8000152:	0b03      	lsrs	r3, r0, #12
 8000154:	428b      	cmp	r3, r1
 8000156:	d319      	bcc.n	800018c <__udivsi3+0x6c>
 8000158:	e000      	b.n	800015c <__udivsi3+0x3c>
 800015a:	0a09      	lsrs	r1, r1, #8
 800015c:	0bc3      	lsrs	r3, r0, #15
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x46>
 8000162:	03cb      	lsls	r3, r1, #15
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b83      	lsrs	r3, r0, #14
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x52>
 800016e:	038b      	lsls	r3, r1, #14
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b43      	lsrs	r3, r0, #13
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x5e>
 800017a:	034b      	lsls	r3, r1, #13
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b03      	lsrs	r3, r0, #12
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x6a>
 8000186:	030b      	lsls	r3, r1, #12
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0ac3      	lsrs	r3, r0, #11
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x76>
 8000192:	02cb      	lsls	r3, r1, #11
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a83      	lsrs	r3, r0, #10
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x82>
 800019e:	028b      	lsls	r3, r1, #10
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a43      	lsrs	r3, r0, #9
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x8e>
 80001aa:	024b      	lsls	r3, r1, #9
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a03      	lsrs	r3, r0, #8
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x9a>
 80001b6:	020b      	lsls	r3, r1, #8
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	d2cd      	bcs.n	800015a <__udivsi3+0x3a>
 80001be:	09c3      	lsrs	r3, r0, #7
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xa8>
 80001c4:	01cb      	lsls	r3, r1, #7
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0983      	lsrs	r3, r0, #6
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xb4>
 80001d0:	018b      	lsls	r3, r1, #6
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0943      	lsrs	r3, r0, #5
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xc0>
 80001dc:	014b      	lsls	r3, r1, #5
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0903      	lsrs	r3, r0, #4
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xcc>
 80001e8:	010b      	lsls	r3, r1, #4
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	08c3      	lsrs	r3, r0, #3
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xd8>
 80001f4:	00cb      	lsls	r3, r1, #3
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0883      	lsrs	r3, r0, #2
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xe4>
 8000200:	008b      	lsls	r3, r1, #2
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0843      	lsrs	r3, r0, #1
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xf0>
 800020c:	004b      	lsls	r3, r1, #1
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	1a41      	subs	r1, r0, r1
 8000214:	d200      	bcs.n	8000218 <__udivsi3+0xf8>
 8000216:	4601      	mov	r1, r0
 8000218:	4152      	adcs	r2, r2
 800021a:	4610      	mov	r0, r2
 800021c:	4770      	bx	lr
 800021e:	e7ff      	b.n	8000220 <__udivsi3+0x100>
 8000220:	b501      	push	{r0, lr}
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8f0 	bl	8000408 <__aeabi_idiv0>
 8000228:	bd02      	pop	{r1, pc}
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <__aeabi_uidivmod>:
 800022c:	2900      	cmp	r1, #0
 800022e:	d0f7      	beq.n	8000220 <__udivsi3+0x100>
 8000230:	e776      	b.n	8000120 <__udivsi3>
 8000232:	4770      	bx	lr

08000234 <__divsi3>:
 8000234:	4603      	mov	r3, r0
 8000236:	430b      	orrs	r3, r1
 8000238:	d47f      	bmi.n	800033a <__divsi3+0x106>
 800023a:	2200      	movs	r2, #0
 800023c:	0843      	lsrs	r3, r0, #1
 800023e:	428b      	cmp	r3, r1
 8000240:	d374      	bcc.n	800032c <__divsi3+0xf8>
 8000242:	0903      	lsrs	r3, r0, #4
 8000244:	428b      	cmp	r3, r1
 8000246:	d35f      	bcc.n	8000308 <__divsi3+0xd4>
 8000248:	0a03      	lsrs	r3, r0, #8
 800024a:	428b      	cmp	r3, r1
 800024c:	d344      	bcc.n	80002d8 <__divsi3+0xa4>
 800024e:	0b03      	lsrs	r3, r0, #12
 8000250:	428b      	cmp	r3, r1
 8000252:	d328      	bcc.n	80002a6 <__divsi3+0x72>
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d30d      	bcc.n	8000276 <__divsi3+0x42>
 800025a:	22ff      	movs	r2, #255	@ 0xff
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	ba12      	rev	r2, r2
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d302      	bcc.n	800026c <__divsi3+0x38>
 8000266:	1212      	asrs	r2, r2, #8
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	d065      	beq.n	8000338 <__divsi3+0x104>
 800026c:	0b03      	lsrs	r3, r0, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d319      	bcc.n	80002a6 <__divsi3+0x72>
 8000272:	e000      	b.n	8000276 <__divsi3+0x42>
 8000274:	0a09      	lsrs	r1, r1, #8
 8000276:	0bc3      	lsrs	r3, r0, #15
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x4c>
 800027c:	03cb      	lsls	r3, r1, #15
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b83      	lsrs	r3, r0, #14
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x58>
 8000288:	038b      	lsls	r3, r1, #14
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b43      	lsrs	r3, r0, #13
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x64>
 8000294:	034b      	lsls	r3, r1, #13
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b03      	lsrs	r3, r0, #12
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x70>
 80002a0:	030b      	lsls	r3, r1, #12
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0ac3      	lsrs	r3, r0, #11
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x7c>
 80002ac:	02cb      	lsls	r3, r1, #11
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a83      	lsrs	r3, r0, #10
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x88>
 80002b8:	028b      	lsls	r3, r1, #10
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a43      	lsrs	r3, r0, #9
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x94>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a03      	lsrs	r3, r0, #8
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0xa0>
 80002d0:	020b      	lsls	r3, r1, #8
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	d2cd      	bcs.n	8000274 <__divsi3+0x40>
 80002d8:	09c3      	lsrs	r3, r0, #7
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xae>
 80002de:	01cb      	lsls	r3, r1, #7
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0983      	lsrs	r3, r0, #6
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xba>
 80002ea:	018b      	lsls	r3, r1, #6
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0943      	lsrs	r3, r0, #5
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xc6>
 80002f6:	014b      	lsls	r3, r1, #5
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0903      	lsrs	r3, r0, #4
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xd2>
 8000302:	010b      	lsls	r3, r1, #4
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	08c3      	lsrs	r3, r0, #3
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xde>
 800030e:	00cb      	lsls	r3, r1, #3
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0883      	lsrs	r3, r0, #2
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xea>
 800031a:	008b      	lsls	r3, r1, #2
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0843      	lsrs	r3, r0, #1
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xf6>
 8000326:	004b      	lsls	r3, r1, #1
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	1a41      	subs	r1, r0, r1
 800032e:	d200      	bcs.n	8000332 <__divsi3+0xfe>
 8000330:	4601      	mov	r1, r0
 8000332:	4152      	adcs	r2, r2
 8000334:	4610      	mov	r0, r2
 8000336:	4770      	bx	lr
 8000338:	e05d      	b.n	80003f6 <__divsi3+0x1c2>
 800033a:	0fca      	lsrs	r2, r1, #31
 800033c:	d000      	beq.n	8000340 <__divsi3+0x10c>
 800033e:	4249      	negs	r1, r1
 8000340:	1003      	asrs	r3, r0, #32
 8000342:	d300      	bcc.n	8000346 <__divsi3+0x112>
 8000344:	4240      	negs	r0, r0
 8000346:	4053      	eors	r3, r2
 8000348:	2200      	movs	r2, #0
 800034a:	469c      	mov	ip, r3
 800034c:	0903      	lsrs	r3, r0, #4
 800034e:	428b      	cmp	r3, r1
 8000350:	d32d      	bcc.n	80003ae <__divsi3+0x17a>
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d312      	bcc.n	800037e <__divsi3+0x14a>
 8000358:	22fc      	movs	r2, #252	@ 0xfc
 800035a:	0189      	lsls	r1, r1, #6
 800035c:	ba12      	rev	r2, r2
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d30c      	bcc.n	800037e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d308      	bcc.n	800037e <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d304      	bcc.n	800037e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	d03a      	beq.n	80003ee <__divsi3+0x1ba>
 8000378:	1192      	asrs	r2, r2, #6
 800037a:	e000      	b.n	800037e <__divsi3+0x14a>
 800037c:	0989      	lsrs	r1, r1, #6
 800037e:	09c3      	lsrs	r3, r0, #7
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x154>
 8000384:	01cb      	lsls	r3, r1, #7
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0983      	lsrs	r3, r0, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x160>
 8000390:	018b      	lsls	r3, r1, #6
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0943      	lsrs	r3, r0, #5
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x16c>
 800039c:	014b      	lsls	r3, r1, #5
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0903      	lsrs	r3, r0, #4
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x178>
 80003a8:	010b      	lsls	r3, r1, #4
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	08c3      	lsrs	r3, r0, #3
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x184>
 80003b4:	00cb      	lsls	r3, r1, #3
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0883      	lsrs	r3, r0, #2
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x190>
 80003c0:	008b      	lsls	r3, r1, #2
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	d2d9      	bcs.n	800037c <__divsi3+0x148>
 80003c8:	0843      	lsrs	r3, r0, #1
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d301      	bcc.n	80003d2 <__divsi3+0x19e>
 80003ce:	004b      	lsls	r3, r1, #1
 80003d0:	1ac0      	subs	r0, r0, r3
 80003d2:	4152      	adcs	r2, r2
 80003d4:	1a41      	subs	r1, r0, r1
 80003d6:	d200      	bcs.n	80003da <__divsi3+0x1a6>
 80003d8:	4601      	mov	r1, r0
 80003da:	4663      	mov	r3, ip
 80003dc:	4152      	adcs	r2, r2
 80003de:	105b      	asrs	r3, r3, #1
 80003e0:	4610      	mov	r0, r2
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x1b4>
 80003e4:	4240      	negs	r0, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d500      	bpl.n	80003ec <__divsi3+0x1b8>
 80003ea:	4249      	negs	r1, r1
 80003ec:	4770      	bx	lr
 80003ee:	4663      	mov	r3, ip
 80003f0:	105b      	asrs	r3, r3, #1
 80003f2:	d300      	bcc.n	80003f6 <__divsi3+0x1c2>
 80003f4:	4240      	negs	r0, r0
 80003f6:	b501      	push	{r0, lr}
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f805 	bl	8000408 <__aeabi_idiv0>
 80003fe:	bd02      	pop	{r1, pc}

08000400 <__aeabi_idivmod>:
 8000400:	2900      	cmp	r1, #0
 8000402:	d0f8      	beq.n	80003f6 <__divsi3+0x1c2>
 8000404:	e716      	b.n	8000234 <__divsi3>
 8000406:	4770      	bx	lr

08000408 <__aeabi_idiv0>:
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <USER_ADC_Init>:
#include "main.h"
#include "user_core.h"

uint8_t USER_ADC_Calibration(void);

void USER_ADC_Init(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
    // Habilitar reloj del ADC y del puerto GPIOA
    RCC->IOPENR |= (1 << 0);     // GPIOAEN
 8000412:	4b4b      	ldr	r3, [pc, #300]	@ (8000540 <USER_ADC_Init+0x134>)
 8000414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000416:	4b4a      	ldr	r3, [pc, #296]	@ (8000540 <USER_ADC_Init+0x134>)
 8000418:	2101      	movs	r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (1 << 20);   // ADCEN
 800041e:	4b48      	ldr	r3, [pc, #288]	@ (8000540 <USER_ADC_Init+0x134>)
 8000420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000422:	4b47      	ldr	r3, [pc, #284]	@ (8000540 <USER_ADC_Init+0x134>)
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0349      	lsls	r1, r1, #13
 8000428:	430a      	orrs	r2, r1
 800042a:	641a      	str	r2, [r3, #64]	@ 0x40

    // PA0 en modo analógico
    GPIOA->MODER |= (0x3 << (0*2));   // Modo analógico
 800042c:	23a0      	movs	r3, #160	@ 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	23a0      	movs	r3, #160	@ 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2103      	movs	r1, #3
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(0x3 << (0*2));  // Sin pull-up/pull-down
 800043c:	23a0      	movs	r3, #160	@ 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	68da      	ldr	r2, [r3, #12]
 8000442:	23a0      	movs	r3, #160	@ 0xa0
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	2103      	movs	r1, #3
 8000448:	438a      	bics	r2, r1
 800044a:	60da      	str	r2, [r3, #12]

    // Configurar CKMODE para reloj síncrono dividido entre 2
    ADC1->CFGR2 &= ~(0x3 << 30);        // Borrar CKMODE
 800044c:	4b3d      	ldr	r3, [pc, #244]	@ (8000544 <USER_ADC_Init+0x138>)
 800044e:	691a      	ldr	r2, [r3, #16]
 8000450:	4b3c      	ldr	r3, [pc, #240]	@ (8000544 <USER_ADC_Init+0x138>)
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	0892      	lsrs	r2, r2, #2
 8000456:	611a      	str	r2, [r3, #16]
    //ADC1->CFGR2 |=  (0x1 << 30);        // CKMODE = 01: PCLK/2

    ADC1->CCR &= ~(0xE << 18);
 8000458:	4a3a      	ldr	r2, [pc, #232]	@ (8000544 <USER_ADC_Init+0x138>)
 800045a:	23c2      	movs	r3, #194	@ 0xc2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	58d3      	ldr	r3, [r2, r3]
 8000460:	4938      	ldr	r1, [pc, #224]	@ (8000544 <USER_ADC_Init+0x138>)
 8000462:	4a39      	ldr	r2, [pc, #228]	@ (8000548 <USER_ADC_Init+0x13c>)
 8000464:	401a      	ands	r2, r3
 8000466:	23c2      	movs	r3, #194	@ 0xc2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	50ca      	str	r2, [r1, r3]
    ADC1->CCR|=  (0x1 << 18);
 800046c:	4a35      	ldr	r2, [pc, #212]	@ (8000544 <USER_ADC_Init+0x138>)
 800046e:	23c2      	movs	r3, #194	@ 0xc2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	58d3      	ldr	r3, [r2, r3]
 8000474:	4933      	ldr	r1, [pc, #204]	@ (8000544 <USER_ADC_Init+0x138>)
 8000476:	2280      	movs	r2, #128	@ 0x80
 8000478:	02d2      	lsls	r2, r2, #11
 800047a:	431a      	orrs	r2, r3
 800047c:	23c2      	movs	r3, #194	@ 0xc2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	50ca      	str	r2, [r1, r3]

    // Configurar resolución, alineación, modo de conversión
    ADC1->CFGR1 &= ~(0x1 << 13); // Single conversion mode
 8000482:	4b30      	ldr	r3, [pc, #192]	@ (8000544 <USER_ADC_Init+0x138>)
 8000484:	68da      	ldr	r2, [r3, #12]
 8000486:	4b2f      	ldr	r3, [pc, #188]	@ (8000544 <USER_ADC_Init+0x138>)
 8000488:	4930      	ldr	r1, [pc, #192]	@ (800054c <USER_ADC_Init+0x140>)
 800048a:	400a      	ands	r2, r1
 800048c:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~(0x1 << 5);  // Right alignment
 800048e:	4b2d      	ldr	r3, [pc, #180]	@ (8000544 <USER_ADC_Init+0x138>)
 8000490:	68da      	ldr	r2, [r3, #12]
 8000492:	4b2c      	ldr	r3, [pc, #176]	@ (8000544 <USER_ADC_Init+0x138>)
 8000494:	2120      	movs	r1, #32
 8000496:	438a      	bics	r2, r1
 8000498:	60da      	str	r2, [r3, #12]
    ADC1->CFGR1 &= ~(0x3 << 3);  // 12-bit resolution
 800049a:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <USER_ADC_Init+0x138>)
 800049c:	68da      	ldr	r2, [r3, #12]
 800049e:	4b29      	ldr	r3, [pc, #164]	@ (8000544 <USER_ADC_Init+0x138>)
 80004a0:	2118      	movs	r1, #24
 80004a2:	438a      	bics	r2, r1
 80004a4:	60da      	str	r2, [r3, #12]

    // Tiempo de muestreo
    ADC1->SMPR |= ~(0x7 << 0);   // Sampling time = shortest
 80004a6:	4b27      	ldr	r3, [pc, #156]	@ (8000544 <USER_ADC_Init+0x138>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b26      	ldr	r3, [pc, #152]	@ (8000544 <USER_ADC_Init+0x138>)
 80004ac:	2108      	movs	r1, #8
 80004ae:	4249      	negs	r1, r1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]

    ADC1->ISR &= ~( 0x1UL << 13U );
 80004b4:	4b23      	ldr	r3, [pc, #140]	@ (8000544 <USER_ADC_Init+0x138>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b22      	ldr	r3, [pc, #136]	@ (8000544 <USER_ADC_Init+0x138>)
 80004ba:	4924      	ldr	r1, [pc, #144]	@ (800054c <USER_ADC_Init+0x140>)
 80004bc:	400a      	ands	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
    ADC1->CFGR1 &= ~( 0x1UL << 21U ) & ~( 0x1UL << 2U );
 80004c0:	4b20      	ldr	r3, [pc, #128]	@ (8000544 <USER_ADC_Init+0x138>)
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <USER_ADC_Init+0x138>)
 80004c6:	4922      	ldr	r1, [pc, #136]	@ (8000550 <USER_ADC_Init+0x144>)
 80004c8:	400a      	ands	r2, r1
 80004ca:	60da      	str	r2, [r3, #12]

    // Seleccionar canal 0 (PA0)
    ADC1->CHSELR |= (1 << 0);
 80004cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000544 <USER_ADC_Init+0x138>)
 80004ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80004d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <USER_ADC_Init+0x138>)
 80004d2:	2101      	movs	r1, #1
 80004d4:	430a      	orrs	r2, r1
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28

    while( !(ADC1->ISR & (0x1UL << 13U)));
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	4b1a      	ldr	r3, [pc, #104]	@ (8000544 <USER_ADC_Init+0x138>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	2380      	movs	r3, #128	@ 0x80
 80004e0:	019b      	lsls	r3, r3, #6
 80004e2:	4013      	ands	r3, r2
 80004e4:	d0f9      	beq.n	80004da <USER_ADC_Init+0xce>

    // Habilitar regulador interno

    ADC1->CR |= (1 << 28);       // ADVREGEN
 80004e6:	4b17      	ldr	r3, [pc, #92]	@ (8000544 <USER_ADC_Init+0x138>)
 80004e8:	689a      	ldr	r2, [r3, #8]
 80004ea:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <USER_ADC_Init+0x138>)
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	0549      	lsls	r1, r1, #21
 80004f0:	430a      	orrs	r2, r1
 80004f2:	609a      	str	r2, [r3, #8]
    SysTick_Delay(1);            // Delay > 10 us
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 fd5b 	bl	8000fb0 <SysTick_Delay>

    // Calibración
    while (!USER_ADC_Calibration());
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	f000 f82a 	bl	8000554 <USER_ADC_Calibration>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d0fb      	beq.n	80004fc <USER_ADC_Init+0xf0>

    // Habilitar ADC
    ADC1->CR |= (1 << 0);         // ADEN
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <USER_ADC_Init+0x138>)
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <USER_ADC_Init+0x138>)
 800050a:	2101      	movs	r1, #1
 800050c:	430a      	orrs	r2, r1
 800050e:	609a      	str	r2, [r3, #8]
    for (uint32_t i = 0; i < 1000 && !(ADC1->ISR & (1 << 0)); i++) SysTick_Delay(1); // Wait up to 1ms
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e005      	b.n	8000522 <USER_ADC_Init+0x116>
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fd4a 	bl	8000fb0 <SysTick_Delay>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	23fa      	movs	r3, #250	@ 0xfa
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	429a      	cmp	r2, r3
 800052a:	d204      	bcs.n	8000536 <USER_ADC_Init+0x12a>
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <USER_ADC_Init+0x138>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2201      	movs	r2, #1
 8000532:	4013      	ands	r3, r2
 8000534:	d0ef      	beq.n	8000516 <USER_ADC_Init+0x10a>
    if (!(ADC1->ISR & (1 << 0))) return;  // Fail if ADRDY not set
 8000536:	4b03      	ldr	r3, [pc, #12]	@ (8000544 <USER_ADC_Init+0x138>)
 8000538:	681b      	ldr	r3, [r3, #0]
}
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	40012400 	.word	0x40012400
 8000548:	ffc7ffff 	.word	0xffc7ffff
 800054c:	ffffdfff 	.word	0xffffdfff
 8000550:	ffdffffb 	.word	0xffdffffb

08000554 <USER_ADC_Calibration>:

uint8_t USER_ADC_Calibration(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    ADC1->CR |= (1 << 31);                   // ADCAL
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <USER_ADC_Calibration+0x38>)
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <USER_ADC_Calibration+0x38>)
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	0609      	lsls	r1, r1, #24
 8000562:	430a      	orrs	r2, r1
 8000564:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & (1 << 31));            // Esperar fin de calibración
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <USER_ADC_Calibration+0x38>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	2b00      	cmp	r3, #0
 800056e:	dbfb      	blt.n	8000568 <USER_ADC_Calibration+0x14>

    // (Opcional) Ajustar factor de calibración
    if (ADC1->CALFACT > 0x7F) {
 8000570:	4a06      	ldr	r2, [pc, #24]	@ (800058c <USER_ADC_Calibration+0x38>)
 8000572:	23b4      	movs	r3, #180	@ 0xb4
 8000574:	58d3      	ldr	r3, [r2, r3]
 8000576:	2b7f      	cmp	r3, #127	@ 0x7f
 8000578:	d903      	bls.n	8000582 <USER_ADC_Calibration+0x2e>
        ADC1->CALFACT = 0x7F;
 800057a:	4a04      	ldr	r2, [pc, #16]	@ (800058c <USER_ADC_Calibration+0x38>)
 800057c:	23b4      	movs	r3, #180	@ 0xb4
 800057e:	217f      	movs	r1, #127	@ 0x7f
 8000580:	50d1      	str	r1, [r2, r3]
    }
    return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	0018      	movs	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	40012400 	.word	0x40012400

08000590 <USER_ADC_Read>:

uint16_t USER_ADC_Read(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    ADC1->CR |= (1 << 2);               // ADSTART
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <USER_ADC_Read+0x40>)
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <USER_ADC_Read+0x40>)
 800059a:	2104      	movs	r1, #4
 800059c:	430a      	orrs	r2, r1
 800059e:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & (1 << 2)));    // Esperar EOC
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <USER_ADC_Read+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2204      	movs	r2, #4
 80005a8:	4013      	ands	r3, r2
 80005aa:	d0fa      	beq.n	80005a2 <USER_ADC_Read+0x12>
    if (ADC1->ISR & (1 << 4)) {         // Check for overrun error
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <USER_ADC_Read+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2210      	movs	r2, #16
 80005b2:	4013      	ands	r3, r2
 80005b4:	d005      	beq.n	80005c2 <USER_ADC_Read+0x32>
        ADC1->ISR |= (1 << 4);          // Clear overrun flag
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <USER_ADC_Read+0x40>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <USER_ADC_Read+0x40>)
 80005bc:	2110      	movs	r1, #16
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]
    }
    return (uint16_t)(ADC1->DR);        // Leer valor convertido
 80005c2:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <USER_ADC_Read+0x40>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	b29b      	uxth	r3, r3
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40012400 	.word	0x40012400

080005d4 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Habilitamos las señales de reloj para los puertos I/O
	*/
	RCC->IOPENR		|=	( 0x1UL <<  1U );
 80005da:	4bab      	ldr	r3, [pc, #684]	@ (8000888 <LCD_Init+0x2b4>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005de:	4baa      	ldr	r3, [pc, #680]	@ (8000888 <LCD_Init+0x2b4>)
 80005e0:	2102      	movs	r1, #2
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34

/**
  * Configuración de los pines de control (RS, RW, EN) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 18U );
 80005e6:	4ba9      	ldr	r3, [pc, #676]	@ (800088c <LCD_Init+0x2b8>)
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	4ba8      	ldr	r3, [pc, #672]	@ (800088c <LCD_Init+0x2b8>)
 80005ec:	49a8      	ldr	r1, [pc, #672]	@ (8000890 <LCD_Init+0x2bc>)
 80005ee:	400a      	ands	r2, r1
 80005f0:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL <<  9U );
 80005f2:	4ba6      	ldr	r3, [pc, #664]	@ (800088c <LCD_Init+0x2b8>)
 80005f4:	685a      	ldr	r2, [r3, #4]
 80005f6:	4ba5      	ldr	r3, [pc, #660]	@ (800088c <LCD_Init+0x2b8>)
 80005f8:	49a6      	ldr	r1, [pc, #664]	@ (8000894 <LCD_Init+0x2c0>)
 80005fa:	400a      	ands	r2, r1
 80005fc:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 18U );
 80005fe:	4ba3      	ldr	r3, [pc, #652]	@ (800088c <LCD_Init+0x2b8>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4ba2      	ldr	r3, [pc, #648]	@ (800088c <LCD_Init+0x2b8>)
 8000604:	49a4      	ldr	r1, [pc, #656]	@ (8000898 <LCD_Init+0x2c4>)
 8000606:	400a      	ands	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 18U );
 800060a:	4ba0      	ldr	r3, [pc, #640]	@ (800088c <LCD_Init+0x2b8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b9f      	ldr	r3, [pc, #636]	@ (800088c <LCD_Init+0x2b8>)
 8000610:	2180      	movs	r1, #128	@ 0x80
 8000612:	02c9      	lsls	r1, r1, #11
 8000614:	430a      	orrs	r2, r1
 8000616:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 20U );
 8000618:	4b9c      	ldr	r3, [pc, #624]	@ (800088c <LCD_Init+0x2b8>)
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	4b9b      	ldr	r3, [pc, #620]	@ (800088c <LCD_Init+0x2b8>)
 800061e:	499f      	ldr	r1, [pc, #636]	@ (800089c <LCD_Init+0x2c8>)
 8000620:	400a      	ands	r2, r1
 8000622:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 10U );
 8000624:	4b99      	ldr	r3, [pc, #612]	@ (800088c <LCD_Init+0x2b8>)
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	4b98      	ldr	r3, [pc, #608]	@ (800088c <LCD_Init+0x2b8>)
 800062a:	499d      	ldr	r1, [pc, #628]	@ (80008a0 <LCD_Init+0x2cc>)
 800062c:	400a      	ands	r2, r1
 800062e:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 20U );
 8000630:	4b96      	ldr	r3, [pc, #600]	@ (800088c <LCD_Init+0x2b8>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b95      	ldr	r3, [pc, #596]	@ (800088c <LCD_Init+0x2b8>)
 8000636:	499b      	ldr	r1, [pc, #620]	@ (80008a4 <LCD_Init+0x2d0>)
 8000638:	400a      	ands	r2, r1
 800063a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 20U );
 800063c:	4b93      	ldr	r3, [pc, #588]	@ (800088c <LCD_Init+0x2b8>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b92      	ldr	r3, [pc, #584]	@ (800088c <LCD_Init+0x2b8>)
 8000642:	2180      	movs	r1, #128	@ 0x80
 8000644:	0349      	lsls	r1, r1, #13
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 22U );
 800064a:	4b90      	ldr	r3, [pc, #576]	@ (800088c <LCD_Init+0x2b8>)
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	4b8f      	ldr	r3, [pc, #572]	@ (800088c <LCD_Init+0x2b8>)
 8000650:	4995      	ldr	r1, [pc, #596]	@ (80008a8 <LCD_Init+0x2d4>)
 8000652:	400a      	ands	r2, r1
 8000654:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 11U );
 8000656:	4b8d      	ldr	r3, [pc, #564]	@ (800088c <LCD_Init+0x2b8>)
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	4b8c      	ldr	r3, [pc, #560]	@ (800088c <LCD_Init+0x2b8>)
 800065c:	4993      	ldr	r1, [pc, #588]	@ (80008ac <LCD_Init+0x2d8>)
 800065e:	400a      	ands	r2, r1
 8000660:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 22U );
 8000662:	4b8a      	ldr	r3, [pc, #552]	@ (800088c <LCD_Init+0x2b8>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b89      	ldr	r3, [pc, #548]	@ (800088c <LCD_Init+0x2b8>)
 8000668:	4991      	ldr	r1, [pc, #580]	@ (80008b0 <LCD_Init+0x2dc>)
 800066a:	400a      	ands	r2, r1
 800066c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 22U );
 800066e:	4b87      	ldr	r3, [pc, #540]	@ (800088c <LCD_Init+0x2b8>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b86      	ldr	r3, [pc, #536]	@ (800088c <LCD_Init+0x2b8>)
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	03c9      	lsls	r1, r1, #15
 8000678:	430a      	orrs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]

/**
  * Configuración de los pines de datos (D4-D7) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 24U );
 800067c:	4b83      	ldr	r3, [pc, #524]	@ (800088c <LCD_Init+0x2b8>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	4b82      	ldr	r3, [pc, #520]	@ (800088c <LCD_Init+0x2b8>)
 8000682:	498c      	ldr	r1, [pc, #560]	@ (80008b4 <LCD_Init+0x2e0>)
 8000684:	400a      	ands	r2, r1
 8000686:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 12U );
 8000688:	4b80      	ldr	r3, [pc, #512]	@ (800088c <LCD_Init+0x2b8>)
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	4b7f      	ldr	r3, [pc, #508]	@ (800088c <LCD_Init+0x2b8>)
 800068e:	498a      	ldr	r1, [pc, #552]	@ (80008b8 <LCD_Init+0x2e4>)
 8000690:	400a      	ands	r2, r1
 8000692:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 24U );
 8000694:	4b7d      	ldr	r3, [pc, #500]	@ (800088c <LCD_Init+0x2b8>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b7c      	ldr	r3, [pc, #496]	@ (800088c <LCD_Init+0x2b8>)
 800069a:	4988      	ldr	r1, [pc, #544]	@ (80008bc <LCD_Init+0x2e8>)
 800069c:	400a      	ands	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 24U );
 80006a0:	4b7a      	ldr	r3, [pc, #488]	@ (800088c <LCD_Init+0x2b8>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b79      	ldr	r3, [pc, #484]	@ (800088c <LCD_Init+0x2b8>)
 80006a6:	2180      	movs	r1, #128	@ 0x80
 80006a8:	0449      	lsls	r1, r1, #17
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 26U );
 80006ae:	4b77      	ldr	r3, [pc, #476]	@ (800088c <LCD_Init+0x2b8>)
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	4b76      	ldr	r3, [pc, #472]	@ (800088c <LCD_Init+0x2b8>)
 80006b4:	4982      	ldr	r1, [pc, #520]	@ (80008c0 <LCD_Init+0x2ec>)
 80006b6:	400a      	ands	r2, r1
 80006b8:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 13U );
 80006ba:	4b74      	ldr	r3, [pc, #464]	@ (800088c <LCD_Init+0x2b8>)
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	4b73      	ldr	r3, [pc, #460]	@ (800088c <LCD_Init+0x2b8>)
 80006c0:	4980      	ldr	r1, [pc, #512]	@ (80008c4 <LCD_Init+0x2f0>)
 80006c2:	400a      	ands	r2, r1
 80006c4:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 26U );
 80006c6:	4b71      	ldr	r3, [pc, #452]	@ (800088c <LCD_Init+0x2b8>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b70      	ldr	r3, [pc, #448]	@ (800088c <LCD_Init+0x2b8>)
 80006cc:	497e      	ldr	r1, [pc, #504]	@ (80008c8 <LCD_Init+0x2f4>)
 80006ce:	400a      	ands	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 26U );
 80006d2:	4b6e      	ldr	r3, [pc, #440]	@ (800088c <LCD_Init+0x2b8>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4b6d      	ldr	r3, [pc, #436]	@ (800088c <LCD_Init+0x2b8>)
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	04c9      	lsls	r1, r1, #19
 80006dc:	430a      	orrs	r2, r1
 80006de:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 28U );
 80006e0:	4b6a      	ldr	r3, [pc, #424]	@ (800088c <LCD_Init+0x2b8>)
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	4b69      	ldr	r3, [pc, #420]	@ (800088c <LCD_Init+0x2b8>)
 80006e6:	4979      	ldr	r1, [pc, #484]	@ (80008cc <LCD_Init+0x2f8>)
 80006e8:	400a      	ands	r2, r1
 80006ea:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 14U );
 80006ec:	4b67      	ldr	r3, [pc, #412]	@ (800088c <LCD_Init+0x2b8>)
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	4b66      	ldr	r3, [pc, #408]	@ (800088c <LCD_Init+0x2b8>)
 80006f2:	4977      	ldr	r1, [pc, #476]	@ (80008d0 <LCD_Init+0x2fc>)
 80006f4:	400a      	ands	r2, r1
 80006f6:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 28U );
 80006f8:	4b64      	ldr	r3, [pc, #400]	@ (800088c <LCD_Init+0x2b8>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b63      	ldr	r3, [pc, #396]	@ (800088c <LCD_Init+0x2b8>)
 80006fe:	4975      	ldr	r1, [pc, #468]	@ (80008d4 <LCD_Init+0x300>)
 8000700:	400a      	ands	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 28U );
 8000704:	4b61      	ldr	r3, [pc, #388]	@ (800088c <LCD_Init+0x2b8>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b60      	ldr	r3, [pc, #384]	@ (800088c <LCD_Init+0x2b8>)
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	0549      	lsls	r1, r1, #21
 800070e:	430a      	orrs	r2, r1
 8000710:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8000712:	4b5e      	ldr	r3, [pc, #376]	@ (800088c <LCD_Init+0x2b8>)
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	4b5d      	ldr	r3, [pc, #372]	@ (800088c <LCD_Init+0x2b8>)
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	0892      	lsrs	r2, r2, #2
 800071c:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 800071e:	4b5b      	ldr	r3, [pc, #364]	@ (800088c <LCD_Init+0x2b8>)
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	4b5a      	ldr	r3, [pc, #360]	@ (800088c <LCD_Init+0x2b8>)
 8000724:	496c      	ldr	r1, [pc, #432]	@ (80008d8 <LCD_Init+0x304>)
 8000726:	400a      	ands	r2, r1
 8000728:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 30U );
 800072a:	4b58      	ldr	r3, [pc, #352]	@ (800088c <LCD_Init+0x2b8>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b57      	ldr	r3, [pc, #348]	@ (800088c <LCD_Init+0x2b8>)
 8000730:	0052      	lsls	r2, r2, #1
 8000732:	0852      	lsrs	r2, r2, #1
 8000734:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8000736:	4b55      	ldr	r3, [pc, #340]	@ (800088c <LCD_Init+0x2b8>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b54      	ldr	r3, [pc, #336]	@ (800088c <LCD_Init+0x2b8>)
 800073c:	2180      	movs	r1, #128	@ 0x80
 800073e:	05c9      	lsls	r1, r1, #23
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOB->BSRR	 =	 LCD_RS_PIN_LOW;
 8000744:	4b51      	ldr	r3, [pc, #324]	@ (800088c <LCD_Init+0x2b8>)
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	0492      	lsls	r2, r2, #18
 800074a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_RW_PIN_LOW;
 800074c:	4b4f      	ldr	r3, [pc, #316]	@ (800088c <LCD_Init+0x2b8>)
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	04d2      	lsls	r2, r2, #19
 8000752:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_EN_PIN_LOW;
 8000754:	4b4d      	ldr	r3, [pc, #308]	@ (800088c <LCD_Init+0x2b8>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	0512      	lsls	r2, r2, #20
 800075a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 800075c:	4b4b      	ldr	r3, [pc, #300]	@ (800088c <LCD_Init+0x2b8>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	0552      	lsls	r2, r2, #21
 8000762:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_LOW;
 8000764:	4b49      	ldr	r3, [pc, #292]	@ (800088c <LCD_Init+0x2b8>)
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	0592      	lsls	r2, r2, #22
 800076a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 800076c:	4b47      	ldr	r3, [pc, #284]	@ (800088c <LCD_Init+0x2b8>)
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	05d2      	lsls	r2, r2, #23
 8000772:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000774:	4b45      	ldr	r3, [pc, #276]	@ (800088c <LCD_Init+0x2b8>)
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	0612      	lsls	r2, r2, #24
 800077a:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 40ms
	delay_ms(50);
 800077c:	2032      	movs	r0, #50	@ 0x32
 800077e:	f000 fc17 	bl	8000fb0 <SysTick_Delay>

	/* Special case of 'Function Set'	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8000782:	4b42      	ldr	r3, [pc, #264]	@ (800088c <LCD_Init+0x2b8>)
 8000784:	2280      	movs	r2, #128	@ 0x80
 8000786:	0152      	lsls	r2, r2, #5
 8000788:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 800078a:	4b40      	ldr	r3, [pc, #256]	@ (800088c <LCD_Init+0x2b8>)
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	0192      	lsls	r2, r2, #6
 8000790:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000792:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <LCD_Init+0x2b8>)
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	05d2      	lsls	r2, r2, #23
 8000798:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 800079a:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <LCD_Init+0x2b8>)
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	0612      	lsls	r2, r2, #24
 80007a0:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80007a2:	f000 fa2b 	bl	8000bfc <LCD_Pulse_EN>
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 4.1ms
	delay_ms(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f000 fc02 	bl	8000fb0 <SysTick_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 80007ac:	4b37      	ldr	r3, [pc, #220]	@ (800088c <LCD_Init+0x2b8>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	0152      	lsls	r2, r2, #5
 80007b2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80007b4:	4b35      	ldr	r3, [pc, #212]	@ (800088c <LCD_Init+0x2b8>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	0192      	lsls	r2, r2, #6
 80007ba:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <LCD_Init+0x2b8>)
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	05d2      	lsls	r2, r2, #23
 80007c2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 80007c4:	4b31      	ldr	r3, [pc, #196]	@ (800088c <LCD_Init+0x2b8>)
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	0612      	lsls	r2, r2, #24
 80007ca:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80007cc:	f000 fa16 	bl	8000bfc <LCD_Pulse_EN>
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 53us
	delay_ms(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 fbed 	bl	8000fb0 <SysTick_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <LCD_Init+0x2b8>)
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	0152      	lsls	r2, r2, #5
 80007dc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <LCD_Init+0x2b8>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	0192      	lsls	r2, r2, #6
 80007e4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 80007e6:	4b29      	ldr	r3, [pc, #164]	@ (800088c <LCD_Init+0x2b8>)
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	05d2      	lsls	r2, r2, #23
 80007ec:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <LCD_Init+0x2b8>)
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	0612      	lsls	r2, r2, #24
 80007f4:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80007f6:	f000 fa01 	bl	8000bfc <LCD_Pulse_EN>
	delay_ms(2);//while( LCD_Busy( ) );
 80007fa:	2002      	movs	r0, #2
 80007fc:	f000 fbd8 	bl	8000fb0 <SysTick_Delay>

	/* Initial 'Function Set' to change 4-bit mode	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <LCD_Init+0x2b8>)
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	0552      	lsls	r2, r2, #21
 8000806:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8000808:	4b20      	ldr	r3, [pc, #128]	@ (800088c <LCD_Init+0x2b8>)
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	0192      	lsls	r2, r2, #6
 800080e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <LCD_Init+0x2b8>)
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	05d2      	lsls	r2, r2, #23
 8000816:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <LCD_Init+0x2b8>)
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	0612      	lsls	r2, r2, #24
 800081e:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000820:	f000 f9ec 	bl	8000bfc <LCD_Pulse_EN>
	delay_ms(2);//while( LCD_Busy( ) );
 8000824:	2002      	movs	r0, #2
 8000826:	f000 fbc3 	bl	8000fb0 <SysTick_Delay>
	/* 'Function Set' (I=1, N and F as required)	*/
	LCD_Write_Cmd( 0x28U );
 800082a:	2028      	movs	r0, #40	@ 0x28
 800082c:	f000 f8bc 	bl	80009a8 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/
	LCD_Write_Cmd( 0x08U );
 8000830:	2008      	movs	r0, #8
 8000832:	f000 f8b9 	bl	80009a8 <LCD_Write_Cmd>
	/* 'Clear Display'	*/
	LCD_Write_Cmd( 0x01U );//
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f8b6 	bl	80009a8 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)	*/
	LCD_Write_Cmd( 0x06U );
 800083c:	2006      	movs	r0, #6
 800083e:	f000 f8b3 	bl	80009a8 <LCD_Write_Cmd>
	/* Initialization Ends	*/
	LCD_Write_Cmd( 0x0FU );
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f8b0 	bl	80009a8 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );
 8000848:	2040      	movs	r0, #64	@ 0x40
 800084a:	f000 f8ad 	bl	80009a8 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <LCD_Init+0x308>)
 8000850:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	e00c      	b.n	8000872 <LCD_Init+0x29e>
		LCD_Put_Char( *p );
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b25b      	sxtb	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f8b7 	bl	80009d4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	2b3f      	cmp	r3, #63	@ 0x3f
 8000876:	d9ef      	bls.n	8000858 <LCD_Init+0x284>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8000878:	2080      	movs	r0, #128	@ 0x80
 800087a:	f000 f895 	bl	80009a8 <LCD_Write_Cmd>
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	40021000 	.word	0x40021000
 800088c:	50000400 	.word	0x50000400
 8000890:	fff3ffff 	.word	0xfff3ffff
 8000894:	fffffdff 	.word	0xfffffdff
 8000898:	fff7ffff 	.word	0xfff7ffff
 800089c:	ffcfffff 	.word	0xffcfffff
 80008a0:	fffffbff 	.word	0xfffffbff
 80008a4:	ffdfffff 	.word	0xffdfffff
 80008a8:	ff3fffff 	.word	0xff3fffff
 80008ac:	fffff7ff 	.word	0xfffff7ff
 80008b0:	ff7fffff 	.word	0xff7fffff
 80008b4:	fcffffff 	.word	0xfcffffff
 80008b8:	ffffefff 	.word	0xffffefff
 80008bc:	fdffffff 	.word	0xfdffffff
 80008c0:	f3ffffff 	.word	0xf3ffffff
 80008c4:	ffffdfff 	.word	0xffffdfff
 80008c8:	f7ffffff 	.word	0xf7ffffff
 80008cc:	cfffffff 	.word	0xcfffffff
 80008d0:	ffffbfff 	.word	0xffffbfff
 80008d4:	dfffffff 	.word	0xdfffffff
 80008d8:	ffff7fff 	.word	0xffff7fff
 80008dc:	08002508 	.word	0x08002508

080008e0 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	0002      	movs	r2, r0
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	701a      	strb	r2, [r3, #0]
	if( ( val & 0x01U ) == 0x01U )
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	4013      	ands	r3, r2
 80008f4:	d004      	beq.n	8000900 <LCD_Out_Data4+0x20>
		GPIOB->BSRR	=	LCD_D4_PIN_HIGH;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <LCD_Out_Data4+0x84>)
 80008f8:	2280      	movs	r2, #128	@ 0x80
 80008fa:	0152      	lsls	r2, r2, #5
 80008fc:	619a      	str	r2, [r3, #24]
 80008fe:	e003      	b.n	8000908 <LCD_Out_Data4+0x28>
	else
		GPIOB->BSRR	=	LCD_D4_PIN_LOW;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <LCD_Out_Data4+0x84>)
 8000902:	2280      	movs	r2, #128	@ 0x80
 8000904:	0552      	lsls	r2, r2, #21
 8000906:	619a      	str	r2, [r3, #24]

	if( ( val & 0x02U ) == 0x02U )
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2202      	movs	r2, #2
 800090e:	4013      	ands	r3, r2
 8000910:	d004      	beq.n	800091c <LCD_Out_Data4+0x3c>
		GPIOB->BSRR	=	LCD_D5_PIN_HIGH;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <LCD_Out_Data4+0x84>)
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	0192      	lsls	r2, r2, #6
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	e003      	b.n	8000924 <LCD_Out_Data4+0x44>
	else
		GPIOB->BSRR	=	LCD_D5_PIN_LOW;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <LCD_Out_Data4+0x84>)
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	0592      	lsls	r2, r2, #22
 8000922:	619a      	str	r2, [r3, #24]

	if( ( val & 0x04U ) == 0x04U )
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2204      	movs	r2, #4
 800092a:	4013      	ands	r3, r2
 800092c:	d004      	beq.n	8000938 <LCD_Out_Data4+0x58>
		GPIOB->BSRR	=	LCD_D6_PIN_HIGH;
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <LCD_Out_Data4+0x84>)
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	01d2      	lsls	r2, r2, #7
 8000934:	619a      	str	r2, [r3, #24]
 8000936:	e003      	b.n	8000940 <LCD_Out_Data4+0x60>
	else
		GPIOB->BSRR	=	LCD_D6_PIN_LOW;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <LCD_Out_Data4+0x84>)
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	05d2      	lsls	r2, r2, #23
 800093e:	619a      	str	r2, [r3, #24]

	if( ( val & 0x08U ) == 0x08U )
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2208      	movs	r2, #8
 8000946:	4013      	ands	r3, r2
 8000948:	d004      	beq.n	8000954 <LCD_Out_Data4+0x74>
		GPIOB->BSRR	=	LCD_D7_PIN_HIGH;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <LCD_Out_Data4+0x84>)
 800094c:	2280      	movs	r2, #128	@ 0x80
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	619a      	str	r2, [r3, #24]
	else
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
}
 8000952:	e003      	b.n	800095c <LCD_Out_Data4+0x7c>
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <LCD_Out_Data4+0x84>)
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	0612      	lsls	r2, r2, #24
 800095a:	619a      	str	r2, [r3, #24]
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	50000400 	.word	0x50000400

08000968 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	0002      	movs	r2, r0
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	701a      	strb	r2, [r3, #0]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	b2db      	uxtb	r3, r3
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff ffaf 	bl	80008e0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000982:	f000 f93b 	bl	8000bfc <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	220f      	movs	r2, #15
 800098c:	4013      	ands	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ffa5 	bl	80008e0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000996:	f000 f931 	bl	8000bfc <LCD_Pulse_EN>
	delay_ms(2);//while( LCD_Busy( ) );
 800099a:	2002      	movs	r0, #2
 800099c:	f000 fb08 	bl	8000fb0 <SysTick_Delay>
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_LOW;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <LCD_Write_Cmd+0x28>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	0492      	lsls	r2, r2, #18
 80009ba:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( val );
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffd1 	bl	8000968 <LCD_Write_Byte>
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	50000400 	.word	0x50000400

080009d4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_HIGH;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <LCD_Put_Char+0x28>)
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( c );
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ffbb 	bl	8000968 <LCD_Write_Byte>
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	50000400 	.word	0x50000400

08000a00 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	1c0a      	adds	r2, r1, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	uint8_t address;
	column--;
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
	line--;
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	3a01      	subs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
	address = ( line * 0x40U ) + column;
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	019b      	lsls	r3, r3, #6
 8000a2c:	b2d9      	uxtb	r1, r3
 8000a2e:	200f      	movs	r0, #15
 8000a30:	183b      	adds	r3, r7, r0
 8000a32:	1dba      	adds	r2, r7, #6
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	188a      	adds	r2, r1, r2
 8000a38:	701a      	strb	r2, [r3, #0]
	address = 0x80U + ( address & 0x7FU );
 8000a3a:	0001      	movs	r1, r0
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	227f      	movs	r2, #127	@ 0x7f
 8000a42:	4013      	ands	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	3a80      	subs	r2, #128	@ 0x80
 8000a4a:	701a      	strb	r2, [r3, #0]
	LCD_Write_Cmd( address );
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ffa9 	bl	80009a8 <LCD_Write_Cmd>
}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 8000a5e:	b590      	push	{r4, r7, lr}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8000a66:	230e      	movs	r3, #14
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	e012      	b.n	8000a96 <LCD_Put_Str+0x38>
		LCD_Put_Char( str[ i ] );
 8000a70:	240e      	movs	r4, #14
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	5e9b      	ldrsh	r3, [r3, r2]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ffa8 	bl	80009d4 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	5e9b      	ldrsh	r3, [r3, r2]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	801a      	strh	r2, [r3, #0]
 8000a96:	220e      	movs	r2, #14
 8000a98:	18bb      	adds	r3, r7, r2
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	5e5b      	ldrsh	r3, [r3, r1]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	dc07      	bgt.n	8000ab2 <LCD_Put_Str+0x54>
 8000aa2:	18bb      	adds	r3, r7, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	5e9b      	ldrsh	r3, [r3, r2]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1de      	bne.n	8000a70 <LCD_Put_Str+0x12>
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b005      	add	sp, #20
 8000ab8:	bd90      	pop	{r4, r7, pc}

08000aba <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b087      	sub	sp, #28
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	1dbb      	adds	r3, r7, #6
 8000ac4:	801a      	strh	r2, [r3, #0]
	int16_t p;
	int16_t f = 0;
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2200      	movs	r2, #0
 8000acc:	801a      	strh	r2, [r3, #0]
	int8_t ch[ 5 ];

	for( int16_t i = 0; i < 5; i++ ){
 8000ace:	2312      	movs	r3, #18
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
 8000ad6:	e085      	b.n	8000be4 <LCD_Put_Num+0x12a>
		p = 1;
 8000ad8:	2316      	movs	r3, #22
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2201      	movs	r2, #1
 8000ade:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	2310      	movs	r3, #16
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	801a      	strh	r2, [r3, #0]
 8000af2:	e012      	b.n	8000b1a <LCD_Put_Num+0x60>
			p = p * 10;
 8000af4:	2116      	movs	r1, #22
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	1c1a      	adds	r2, r3, #0
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	18db      	adds	r3, r3, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 8000b08:	2110      	movs	r1, #16
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	5e9b      	ldrsh	r3, [r3, r2]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	801a      	strh	r2, [r3, #0]
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	2200      	movs	r2, #0
 8000b20:	5e9b      	ldrsh	r3, [r3, r2]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dce6      	bgt.n	8000af4 <LCD_Put_Num+0x3a>
		ch[ i ] = ( num / p );
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	5e9a      	ldrsh	r2, [r3, r2]
 8000b2c:	2416      	movs	r4, #22
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2100      	movs	r1, #0
 8000b32:	5e5b      	ldrsh	r3, [r3, r1]
 8000b34:	0019      	movs	r1, r3
 8000b36:	0010      	movs	r0, r2
 8000b38:	f7ff fb7c 	bl	8000234 <__divsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2312      	movs	r3, #18
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	5e5b      	ldrsh	r3, [r3, r1]
 8000b48:	b251      	sxtb	r1, r2
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	54d1      	strb	r1, [r2, r3]
		if( num >= p && !f )
 8000b50:	1dba      	adds	r2, r7, #6
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2100      	movs	r1, #0
 8000b56:	5e52      	ldrsh	r2, [r2, r1]
 8000b58:	2100      	movs	r1, #0
 8000b5a:	5e5b      	ldrsh	r3, [r3, r1]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	db08      	blt.n	8000b72 <LCD_Put_Num+0xb8>
 8000b60:	2214      	movs	r2, #20
 8000b62:	18bb      	adds	r3, r7, r2
 8000b64:	2100      	movs	r1, #0
 8000b66:	5e5b      	ldrsh	r3, [r3, r1]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <LCD_Put_Num+0xb8>
			f = 1;
 8000b6c:	18bb      	adds	r3, r7, r2
 8000b6e:	2201      	movs	r2, #1
 8000b70:	801a      	strh	r2, [r3, #0]
		num = num - ch[ i ] * p;
 8000b72:	1dbb      	adds	r3, r7, #6
 8000b74:	881a      	ldrh	r2, [r3, #0]
 8000b76:	2012      	movs	r0, #18
 8000b78:	183b      	adds	r3, r7, r0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	5e5b      	ldrsh	r3, [r3, r1]
 8000b7e:	2408      	movs	r4, #8
 8000b80:	1939      	adds	r1, r7, r4
 8000b82:	56cb      	ldrsb	r3, [r1, r3]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2116      	movs	r1, #22
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	8809      	ldrh	r1, [r1, #0]
 8000b8c:	434b      	muls	r3, r1
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	1dbb      	adds	r3, r7, #6
 8000b96:	801a      	strh	r2, [r3, #0]
		ch[ i ] = ch[ i ] + 48;
 8000b98:	183b      	adds	r3, r7, r0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	5e9b      	ldrsh	r3, [r3, r2]
 8000b9e:	193a      	adds	r2, r7, r4
 8000ba0:	56d3      	ldrsb	r3, [r2, r3]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	3330      	adds	r3, #48	@ 0x30
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	183b      	adds	r3, r7, r0
 8000baa:	2100      	movs	r1, #0
 8000bac:	5e5b      	ldrsh	r3, [r3, r1]
 8000bae:	b251      	sxtb	r1, r2
 8000bb0:	193a      	adds	r2, r7, r4
 8000bb2:	54d1      	strb	r1, [r2, r3]
		if( f )
 8000bb4:	2314      	movs	r3, #20
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	5e9b      	ldrsh	r3, [r3, r2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d008      	beq.n	8000bd2 <LCD_Put_Num+0x118>
			LCD_Put_Char( ch[ i ] );
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8000bc6:	193a      	adds	r2, r7, r4
 8000bc8:	56d3      	ldrsb	r3, [r2, r3]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff01 	bl	80009d4 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 8000bd2:	2112      	movs	r1, #18
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	5e9b      	ldrsh	r3, [r3, r2]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	801a      	strh	r2, [r3, #0]
 8000be4:	2312      	movs	r3, #18
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	5e9b      	ldrsh	r3, [r3, r2]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	dc00      	bgt.n	8000bf2 <LCD_Put_Num+0x138>
 8000bf0:	e772      	b.n	8000ad8 <LCD_Put_Num+0x1e>
	}
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b007      	add	sp, #28
 8000bfa:	bd90      	pop	{r4, r7, pc}

08000bfc <LCD_Pulse_EN>:
		return 0;
	}
}

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;//
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <LCD_Pulse_EN+0x34>)
 8000c02:	2280      	movs	r2, #128	@ 0x80
 8000c04:	0512      	lsls	r2, r2, #20
 8000c06:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	10us
	delay_ms(2);
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 f9d1 	bl	8000fb0 <SysTick_Delay>

	GPIOB->BSRR	=	LCD_EN_PIN_HIGH;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <LCD_Pulse_EN+0x34>)
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	10us
	delay_ms(2);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f000 f9ca 	bl	8000fb0 <SysTick_Delay>

	GPIOB->BSRR	=	LCD_EN_PIN_LOW;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <LCD_Pulse_EN+0x34>)
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	0512      	lsls	r2, r2, #20
 8000c22:	619a      	str	r2, [r3, #24]
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	1ms
	delay_ms(2);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f000 f9c3 	bl	8000fb0 <SysTick_Delay>
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	50000400 	.word	0x50000400

08000c34 <main>:
    int speed;
    int rpm;
    int gear;
} last_values = {-1, -1, -1};

int main(void) {
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	b091      	sub	sp, #68	@ 0x44
 8000c38:	af02      	add	r7, sp, #8
    // Inicialización de hardware
    USER_RCC_Init();
 8000c3a:	f000 f90d 	bl	8000e58 <USER_RCC_Init>
    USER_GPIO_Init();
 8000c3e:	f000 f94b 	bl	8000ed8 <USER_GPIO_Init>
    USER_USART1_Init();
 8000c42:	f000 f9dd 	bl	8001000 <USER_USART1_Init>
    USER_SysTick_Init();
 8000c46:	f000 f99d 	bl	8000f84 <USER_SysTick_Init>
    USER_ADC_Init();
 8000c4a:	f7ff fbdf 	bl	800040c <USER_ADC_Init>
    LCD_Init();
 8000c4e:	f7ff fcc1 	bl	80005d4 <LCD_Init>

    // Mensaje inicial
    LCD_Clear();
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fea8 	bl	80009a8 <LCD_Write_Cmd>
    LCD_Set_Cursor(1, 1);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fed0 	bl	8000a00 <LCD_Set_Cursor>
    LCD_Put_Str("Iniciando...");
 8000c60:	4b53      	ldr	r3, [pc, #332]	@ (8000db0 <main+0x17c>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fefb 	bl	8000a5e <LCD_Put_Str>
    SysTick_Delay(1000);
 8000c68:	23fa      	movs	r3, #250	@ 0xfa
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f99f 	bl	8000fb0 <SysTick_Delay>
    LCD_Clear();
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fe98 	bl	80009a8 <LCD_Write_Cmd>

    // Dibujar encabezados fijos
    LCD_Set_Cursor(1, 1);
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fec0 	bl	8000a00 <LCD_Set_Cursor>
    LCD_Put_Str("VEL:");
 8000c80:	4b4c      	ldr	r3, [pc, #304]	@ (8000db4 <main+0x180>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff feeb 	bl	8000a5e <LCD_Put_Str>
    LCD_Set_Cursor(1, 12);
 8000c88:	210c      	movs	r1, #12
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff feb8 	bl	8000a00 <LCD_Set_Cursor>
    LCD_Put_Str("km/h");
 8000c90:	4b49      	ldr	r3, [pc, #292]	@ (8000db8 <main+0x184>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fee3 	bl	8000a5e <LCD_Put_Str>
    LCD_Set_Cursor(2, 1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff feb0 	bl	8000a00 <LCD_Set_Cursor>
    LCD_Put_Str("RPM:");
 8000ca0:	4b46      	ldr	r3, [pc, #280]	@ (8000dbc <main+0x188>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff fedb 	bl	8000a5e <LCD_Put_Str>
    LCD_Set_Cursor(2, 12);
 8000ca8:	210c      	movs	r1, #12
 8000caa:	2002      	movs	r0, #2
 8000cac:	f7ff fea8 	bl	8000a00 <LCD_Set_Cursor>
    LCD_Put_Str("G:");
 8000cb0:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <main+0x18c>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fed3 	bl	8000a5e <LCD_Put_Str>

    while (1) {
        // Lectura de entradas
        uint8_t btn_state = (GPIOA->IDR & (1 << 5)) ? 1 : 0;
 8000cb8:	23a0      	movs	r3, #160	@ 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4193      	sbcs	r3, r2
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	2537      	movs	r5, #55	@ 0x37
 8000cca:	197b      	adds	r3, r7, r5
 8000ccc:	701a      	strb	r2, [r3, #0]
        uint16_t adc_val = USER_ADC_Read();
 8000cce:	2634      	movs	r6, #52	@ 0x34
 8000cd0:	19bc      	adds	r4, r7, r6
 8000cd2:	f7ff fc5d 	bl	8000590 <USER_ADC_Read>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	8023      	strh	r3, [r4, #0]

        // Enviar datos al ESP32
        char txbuf[32];
        snprintf(txbuf, sizeof(txbuf), "%u,%u\n", adc_val, btn_state);
 8000cda:	19bb      	adds	r3, r7, r6
 8000cdc:	8819      	ldrh	r1, [r3, #0]
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4a38      	ldr	r2, [pc, #224]	@ (8000dc4 <main+0x190>)
 8000ce4:	1d38      	adds	r0, r7, #4
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	000b      	movs	r3, r1
 8000cea:	2120      	movs	r1, #32
 8000cec:	f000 fa56 	bl	800119c <sniprintf>
        USER_USART1_Transmit((uint8_t *)txbuf, strlen(txbuf));
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fa02 	bl	80000fc <strlen>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 f9fb 	bl	80010fc <USER_USART1_Transmit>

        // Recepción de datos del ESP32
        while (USART1->ISR & (1 << 5)) {
 8000d06:	e048      	b.n	8000d9a <main+0x166>
            char c = USART1->RDR & 0xFF;
 8000d08:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <main+0x194>)
 8000d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d0c:	2133      	movs	r1, #51	@ 0x33
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	701a      	strb	r2, [r3, #0]

            if (c == '\n' || uart_rx_index >= sizeof(uart_rx_buffer) - 1) {
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b0a      	cmp	r3, #10
 8000d18:	d003      	beq.n	8000d22 <main+0xee>
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <main+0x198>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d20:	d92f      	bls.n	8000d82 <main+0x14e>
                uart_rx_buffer[uart_rx_index] = '\0';
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <main+0x198>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <main+0x19c>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	5499      	strb	r1, [r3, r2]

                // Limpiar retorno de carro si existe
                if (uart_rx_index > 0 && uart_rx_buffer[uart_rx_index - 1] == '\r') {
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <main+0x198>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00c      	beq.n	8000d50 <main+0x11c>
 8000d36:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <main+0x198>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a24      	ldr	r2, [pc, #144]	@ (8000dd0 <main+0x19c>)
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	d105      	bne.n	8000d50 <main+0x11c>
                    uart_rx_buffer[uart_rx_index - 1] = '\0';
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <main+0x198>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <main+0x19c>)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	54d1      	strb	r1, [r2, r3]
                }

                // Parsear datos (formato: "SPD:xxx RPM:xxxx G:x")
                int speed, rpm, gear;
                if (sscanf(uart_rx_buffer, "SPD:%d RPM:%d G:%d", &speed, &rpm, &gear) == 3) {
 8000d50:	2328      	movs	r3, #40	@ 0x28
 8000d52:	18fc      	adds	r4, r7, r3
 8000d54:	232c      	movs	r3, #44	@ 0x2c
 8000d56:	18fa      	adds	r2, r7, r3
 8000d58:	491e      	ldr	r1, [pc, #120]	@ (8000dd4 <main+0x1a0>)
 8000d5a:	481d      	ldr	r0, [pc, #116]	@ (8000dd0 <main+0x19c>)
 8000d5c:	2324      	movs	r3, #36	@ 0x24
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	0023      	movs	r3, r4
 8000d64:	f000 fa50 	bl	8001208 <siscanf>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d105      	bne.n	8000d7a <main+0x146>
                    update_display(speed, rpm, gear);
 8000d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 f82f 	bl	8000dd8 <update_display>
                }

                uart_rx_index = 0;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <main+0x198>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
            if (c == '\n' || uart_rx_index >= sizeof(uart_rx_buffer) - 1) {
 8000d80:	e00b      	b.n	8000d9a <main+0x166>
            } else {
                uart_rx_buffer[uart_rx_index++] = c;
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <main+0x198>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	b2d1      	uxtb	r1, r2
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <main+0x198>)
 8000d8c:	7011      	strb	r1, [r2, #0]
 8000d8e:	0019      	movs	r1, r3
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <main+0x19c>)
 8000d92:	2233      	movs	r2, #51	@ 0x33
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	545a      	strb	r2, [r3, r1]
        while (USART1->ISR & (1 << 5)) {
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <main+0x194>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	4013      	ands	r3, r2
 8000da2:	d1b1      	bne.n	8000d08 <main+0xd4>
            }
        }

        SysTick_Delay(300); // Delay reducido para mayor capacidad de respuesta
 8000da4:	2396      	movs	r3, #150	@ 0x96
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f901 	bl	8000fb0 <SysTick_Delay>
    while (1) {
 8000dae:	e783      	b.n	8000cb8 <main+0x84>
 8000db0:	080024b4 	.word	0x080024b4
 8000db4:	080024c4 	.word	0x080024c4
 8000db8:	080024cc 	.word	0x080024cc
 8000dbc:	080024d4 	.word	0x080024d4
 8000dc0:	080024dc 	.word	0x080024dc
 8000dc4:	080024e0 	.word	0x080024e0
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	200000b8 	.word	0x200000b8
 8000dd0:	20000078 	.word	0x20000078
 8000dd4:	080024e8 	.word	0x080024e8

08000dd8 <update_display>:
    }
}

void update_display(int speed, int rpm, int gear) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
    // Actualizar velocidad si cambió
    if (speed != last_values.speed) {
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <update_display+0x7c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d00b      	beq.n	8000e06 <update_display+0x2e>
        LCD_Set_Cursor(1, 5);
 8000dee:	2105      	movs	r1, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff fe05 	bl	8000a00 <LCD_Set_Cursor>
        LCD_Put_Num(speed);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff fe5d 	bl	8000aba <LCD_Put_Num>
        last_values.speed = speed;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <update_display+0x7c>)
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	601a      	str	r2, [r3, #0]
    }

    // Actualizar RPM si cambió
    if (rpm != last_values.rpm) {
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <update_display+0x7c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d00b      	beq.n	8000e28 <update_display+0x50>
        LCD_Set_Cursor(2, 5);
 8000e10:	2105      	movs	r1, #5
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fdf4 	bl	8000a00 <LCD_Set_Cursor>
        LCD_Put_Num(rpm);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fe4c 	bl	8000aba <LCD_Put_Num>
        last_values.rpm = rpm;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <update_display+0x7c>)
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	605a      	str	r2, [r3, #4]
    }

    // Actualizar marcha si cambió
    if (gear != last_values.gear) {
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <update_display+0x7c>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d00b      	beq.n	8000e4a <update_display+0x72>
        LCD_Set_Cursor(2, 14);
 8000e32:	210e      	movs	r1, #14
 8000e34:	2002      	movs	r0, #2
 8000e36:	f7ff fde3 	bl	8000a00 <LCD_Set_Cursor>
        LCD_Put_Num(gear);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fe3b 	bl	8000aba <LCD_Put_Num>
        last_values.gear = gear;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <update_display+0x7c>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
    }
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	20000000 	.word	0x20000000

08000e58 <USER_RCC_Init>:

// Funciones de inicialización (igual que en tu versión original)
void USER_RCC_Init(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    FLASH->ACR &= ~(0x7UL << 0U);
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <USER_RCC_Init+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <USER_RCC_Init+0x70>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	438a      	bics	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
    FLASH->ACR |=  (0x1UL << 0U);
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <USER_RCC_Init+0x70>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <USER_RCC_Init+0x70>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
    while ((FLASH->ACR & (0x7UL << 0U)) != 0x001UL);
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <USER_RCC_Init+0x70>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f9      	bne.n	8000e76 <USER_RCC_Init+0x1e>

    RCC->CR &= ~(0x7UL << 11U);
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000e88:	4911      	ldr	r1, [pc, #68]	@ (8000ed0 <USER_RCC_Init+0x78>)
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
    while (!(RCC->CR & (1 << 10U)));
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f9      	beq.n	8000e90 <USER_RCC_Init+0x38>
    RCC->CR |= (1 << 8);  // Enable HSI
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000ea2:	2180      	movs	r1, #128	@ 0x80
 8000ea4:	0049      	lsls	r1, r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]

    RCC->CFGR &= ~(0x7UL << 0U);
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	609a      	str	r2, [r3, #8]
    RCC->CFGR &= ~(1 << 11U);
 8000eb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <USER_RCC_Init+0x74>)
 8000ebc:	4905      	ldr	r1, [pc, #20]	@ (8000ed4 <USER_RCC_Init+0x7c>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	609a      	str	r2, [r3, #8]
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40022000 	.word	0x40022000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	ffffc7ff 	.word	0xffffc7ff
 8000ed4:	fffff7ff 	.word	0xfffff7ff

08000ed8 <USER_GPIO_Init>:

void USER_GPIO_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    RCC->IOPENR |= (1 << 0);
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <USER_GPIO_Init+0x38>)
 8000ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <USER_GPIO_Init+0x38>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIOA->MODER &= ~(0x3UL << (5 * 2));
 8000ee8:	23a0      	movs	r3, #160	@ 0xa0
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	23a0      	movs	r3, #160	@ 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <USER_GPIO_Init+0x3c>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(0x3UL << (5 * 2));
 8000ef8:	23a0      	movs	r3, #160	@ 0xa0
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	23a0      	movs	r3, #160	@ 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	4904      	ldr	r1, [pc, #16]	@ (8000f14 <USER_GPIO_Init+0x3c>)
 8000f04:	400a      	ands	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40021000 	.word	0x40021000
 8000f14:	fffff3ff 	.word	0xfffff3ff

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f000 f98a 	bl	8001260 <__errno>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	425b      	negs	r3, r3
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	18d2      	adds	r2, r2, r3
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b006      	add	sp, #24
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20003000 	.word	0x20003000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200000bc 	.word	0x200000bc
 8000f80:	20000208 	.word	0x20000208

08000f84 <USER_SysTick_Init>:
#include <stdint.h>
#include "main.h"
#include "user_core.h"

void USER_SysTick_Init( void ){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  // Reloj del sistema = 48 MHz
  // SysTick es de 24 bits, así que máximo 2^24-1 = 16,777,215
  // Para 1ms: 48,000,000 / 1000 ciclos
  Systick->RVR  = 48000 - 1;//          Carga para 1ms
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <USER_SysTick_Init+0x24>)
 8000f8a:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <USER_SysTick_Init+0x28>)
 8000f8c:	605a      	str	r2, [r3, #4]
  Systick->CVR  = 0;//                  Reinicia el contador
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <USER_SysTick_Init+0x24>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  Systick->CSR |=  ( 0x1UL <<  2U );//  Selecciona el reloj del procesador como el Systick
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <USER_SysTick_Init+0x24>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <USER_SysTick_Init+0x24>)
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	e000e010 	.word	0xe000e010
 8000fac:	0000bb7f 	.word	0x0000bb7f

08000fb0 <SysTick_Delay>:

void SysTick_Delay( uint32_t time ) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  Systick->CSR |=  ( 0x1UL <<  0U );//  Inicia el Systick
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <SysTick_Delay+0x4c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <SysTick_Delay+0x4c>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
  for(uint32_t i = 0; i < time; i++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e009      	b.n	8000fde <SysTick_Delay+0x2e>
    // Espera a que el bit COUNTFLAG se ponga en 1 (cuando se desborda)
    while(!( Systick->CSR & ( 0x1UL << 16U )));
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <SysTick_Delay+0x4c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d0f9      	beq.n	8000fcc <SysTick_Delay+0x1c>
  for(uint32_t i = 0; i < time; i++){
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d3f1      	bcc.n	8000fca <SysTick_Delay+0x1a>
  }
  Systick->CSR &= ~( 0x1UL <<  0U );//  Detiene el SysTick
 8000fe6:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <SysTick_Delay+0x4c>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <SysTick_Delay+0x4c>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <USER_USART1_Init>:
#include "main.h"
#include "user_uart.h"

static void USART1_SendByte(uint8_t byte);

void USER_USART1_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    // Activar reloj de GPIOA y USART1
    RCC->IOPENR  |= (1 << 0);   // GPIOAEN
 8001004:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <USER_USART1_Init+0xb4>)
 8001006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001008:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <USER_USART1_Init+0xb4>)
 800100a:	2101      	movs	r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR2 |= (1 << 14);  // USART1EN
 8001010:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <USER_USART1_Init+0xb4>)
 8001012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <USER_USART1_Init+0xb4>)
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	01c9      	lsls	r1, r1, #7
 800101a:	430a      	orrs	r2, r1
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40

    // Configurar PA9 (TX) y PA10 (RX) en modo alterno AF1
    GPIOA->AFRH &= ~((0xF << 4) | (0xF << 8));
 800101e:	23a0      	movs	r3, #160	@ 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001024:	23a0      	movs	r3, #160	@ 0xa0
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	4923      	ldr	r1, [pc, #140]	@ (80010b8 <USER_USART1_Init+0xb8>)
 800102a:	400a      	ands	r2, r1
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFRH |=  (0x1 << 4) | (0x1 << 8);
 800102e:	23a0      	movs	r3, #160	@ 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	23a0      	movs	r3, #160	@ 0xa0
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	2188      	movs	r1, #136	@ 0x88
 800103a:	0049      	lsls	r1, r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24

    GPIOA->PUPDR &= ~((0x3 << 18) | (0x3 << 20));
 8001040:	23a0      	movs	r3, #160	@ 0xa0
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	23a0      	movs	r3, #160	@ 0xa0
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	491c      	ldr	r1, [pc, #112]	@ (80010bc <USER_USART1_Init+0xbc>)
 800104c:	400a      	ands	r2, r1
 800104e:	60da      	str	r2, [r3, #12]
    GPIOA->OTYPER &= ~((1 << 9) | (1 << 10));
 8001050:	23a0      	movs	r3, #160	@ 0xa0
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	23a0      	movs	r3, #160	@ 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	4919      	ldr	r1, [pc, #100]	@ (80010c0 <USER_USART1_Init+0xc0>)
 800105c:	400a      	ands	r2, r1
 800105e:	605a      	str	r2, [r3, #4]

    GPIOA->MODER &= ~((0x3 << 18) | (0x3 << 20));
 8001060:	23a0      	movs	r3, #160	@ 0xa0
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	23a0      	movs	r3, #160	@ 0xa0
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	4914      	ldr	r1, [pc, #80]	@ (80010bc <USER_USART1_Init+0xbc>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  (0x2 << 18) | (0x2 << 20);
 8001070:	23a0      	movs	r3, #160	@ 0xa0
 8001072:	05db      	lsls	r3, r3, #23
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	23a0      	movs	r3, #160	@ 0xa0
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	21a0      	movs	r1, #160	@ 0xa0
 800107c:	0389      	lsls	r1, r1, #14
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    // Configuración USART1: 8 bits, 1 stop bit, baudrate
    USART1->CR1 &= ~((1 << 28) | (1 << 12));
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <USER_USART1_Init+0xc4>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <USER_USART1_Init+0xc4>)
 8001088:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <USER_USART1_Init+0xc8>)
 800108a:	400a      	ands	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
    USART1->CR2 &= ~(0x3 << 12);
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <USER_USART1_Init+0xc4>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <USER_USART1_Init+0xc4>)
 8001094:	490d      	ldr	r1, [pc, #52]	@ (80010cc <USER_USART1_Init+0xcc>)
 8001096:	400a      	ands	r2, r1
 8001098:	605a      	str	r2, [r3, #4]
    USART1->BRR  = 417;  // Para 115200 baudios @ 48 MHz
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <USER_USART1_Init+0xc4>)
 800109c:	22a2      	movs	r2, #162	@ 0xa2
 800109e:	32ff      	adds	r2, #255	@ 0xff
 80010a0:	60da      	str	r2, [r3, #12]

    // Habilitar USART, transmisión y recepción
    USART1->CR1 |= (1 << 0) | (1 << 2) | (1 << 3);
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <USER_USART1_Init+0xc4>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <USER_USART1_Init+0xc4>)
 80010a8:	210d      	movs	r1, #13
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	fffff00f 	.word	0xfffff00f
 80010bc:	ffc3ffff 	.word	0xffc3ffff
 80010c0:	fffff9ff 	.word	0xfffff9ff
 80010c4:	40013800 	.word	0x40013800
 80010c8:	efffefff 	.word	0xefffefff
 80010cc:	ffffcfff 	.word	0xffffcfff

080010d0 <USART1_SendByte>:

static void USART1_SendByte(uint8_t byte) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]
    while (!(USART1->ISR & (1 << 7)));  // Espera a que el TDR esté libre
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <USART1_SendByte+0x28>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	4013      	ands	r3, r2
 80010e6:	d0fa      	beq.n	80010de <USART1_SendByte+0xe>
    USART1->TDR = byte;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <USART1_SendByte+0x28>)
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013800 	.word	0x40013800

080010fc <USER_USART1_Transmit>:

void USER_USART1_Transmit(uint8_t *pData, uint16_t size) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	000a      	movs	r2, r1
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; ++i) {
 800110a:	230e      	movs	r3, #14
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2200      	movs	r2, #0
 8001110:	801a      	strh	r2, [r3, #0]
 8001112:	e00d      	b.n	8001130 <USER_USART1_Transmit+0x34>
        USART1_SendByte(pData[i]);
 8001114:	240e      	movs	r4, #14
 8001116:	193b      	adds	r3, r7, r4
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ffd5 	bl	80010d0 <USART1_SendByte>
    for (uint16_t i = 0; i < size; ++i) {
 8001126:	193b      	adds	r3, r7, r4
 8001128:	193a      	adds	r2, r7, r4
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	3201      	adds	r2, #1
 800112e:	801a      	strh	r2, [r3, #0]
 8001130:	230e      	movs	r3, #14
 8001132:	18fa      	adds	r2, r7, r3
 8001134:	1cbb      	adds	r3, r7, #2
 8001136:	8812      	ldrh	r2, [r2, #0]
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3ea      	bcc.n	8001114 <USER_USART1_Transmit+0x18>
    }
}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b005      	add	sp, #20
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800114c:	e000      	b.n	8001150 <Reset_Handler+0x8>
 800114e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001176:	f000 f879 	bl	800126c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff fd5b 	bl	8000c34 <main>

0800117e <LoopForever>:

LoopForever:
  b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800118c:	080026a0 	.word	0x080026a0
  ldr r2, =_sbss
 8001190:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001194:	20000208 	.word	0x20000208

08001198 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <sniprintf>:
 800119c:	b40c      	push	{r2, r3}
 800119e:	b530      	push	{r4, r5, lr}
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <sniprintf+0x68>)
 80011a2:	000c      	movs	r4, r1
 80011a4:	681d      	ldr	r5, [r3, #0]
 80011a6:	b09d      	sub	sp, #116	@ 0x74
 80011a8:	2900      	cmp	r1, #0
 80011aa:	da08      	bge.n	80011be <sniprintf+0x22>
 80011ac:	238b      	movs	r3, #139	@ 0x8b
 80011ae:	2001      	movs	r0, #1
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	4240      	negs	r0, r0
 80011b4:	b01d      	add	sp, #116	@ 0x74
 80011b6:	bc30      	pop	{r4, r5}
 80011b8:	bc08      	pop	{r3}
 80011ba:	b002      	add	sp, #8
 80011bc:	4718      	bx	r3
 80011be:	2382      	movs	r3, #130	@ 0x82
 80011c0:	466a      	mov	r2, sp
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	8293      	strh	r3, [r2, #20]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9002      	str	r0, [sp, #8]
 80011ca:	931b      	str	r3, [sp, #108]	@ 0x6c
 80011cc:	9006      	str	r0, [sp, #24]
 80011ce:	4299      	cmp	r1, r3
 80011d0:	d000      	beq.n	80011d4 <sniprintf+0x38>
 80011d2:	1e4b      	subs	r3, r1, #1
 80011d4:	9304      	str	r3, [sp, #16]
 80011d6:	9307      	str	r3, [sp, #28]
 80011d8:	2301      	movs	r3, #1
 80011da:	466a      	mov	r2, sp
 80011dc:	425b      	negs	r3, r3
 80011de:	82d3      	strh	r3, [r2, #22]
 80011e0:	0028      	movs	r0, r5
 80011e2:	ab21      	add	r3, sp, #132	@ 0x84
 80011e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80011e6:	a902      	add	r1, sp, #8
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	f000 f9c1 	bl	8001570 <_svfiprintf_r>
 80011ee:	1c43      	adds	r3, r0, #1
 80011f0:	da01      	bge.n	80011f6 <sniprintf+0x5a>
 80011f2:	238b      	movs	r3, #139	@ 0x8b
 80011f4:	602b      	str	r3, [r5, #0]
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d0dc      	beq.n	80011b4 <sniprintf+0x18>
 80011fa:	2200      	movs	r2, #0
 80011fc:	9b02      	ldr	r3, [sp, #8]
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e7d8      	b.n	80011b4 <sniprintf+0x18>
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	2000000c 	.word	0x2000000c

08001208 <siscanf>:
 8001208:	b40e      	push	{r1, r2, r3}
 800120a:	b570      	push	{r4, r5, r6, lr}
 800120c:	2381      	movs	r3, #129	@ 0x81
 800120e:	b09d      	sub	sp, #116	@ 0x74
 8001210:	466a      	mov	r2, sp
 8001212:	2500      	movs	r5, #0
 8001214:	ac21      	add	r4, sp, #132	@ 0x84
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	cc40      	ldmia	r4!, {r6}
 800121a:	8293      	strh	r3, [r2, #20]
 800121c:	951b      	str	r5, [sp, #108]	@ 0x6c
 800121e:	9002      	str	r0, [sp, #8]
 8001220:	9006      	str	r0, [sp, #24]
 8001222:	f7fe ff6b 	bl	80000fc <strlen>
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <siscanf+0x4c>)
 8001228:	466a      	mov	r2, sp
 800122a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800122c:	2301      	movs	r3, #1
 800122e:	9003      	str	r0, [sp, #12]
 8001230:	9007      	str	r0, [sp, #28]
 8001232:	4809      	ldr	r0, [pc, #36]	@ (8001258 <siscanf+0x50>)
 8001234:	425b      	negs	r3, r3
 8001236:	82d3      	strh	r3, [r2, #22]
 8001238:	a902      	add	r1, sp, #8
 800123a:	0023      	movs	r3, r4
 800123c:	0032      	movs	r2, r6
 800123e:	6800      	ldr	r0, [r0, #0]
 8001240:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001242:	9514      	str	r5, [sp, #80]	@ 0x50
 8001244:	9401      	str	r4, [sp, #4]
 8001246:	f000 faed 	bl	8001824 <__ssvfiscanf_r>
 800124a:	b01d      	add	sp, #116	@ 0x74
 800124c:	bc70      	pop	{r4, r5, r6}
 800124e:	bc08      	pop	{r3}
 8001250:	b003      	add	sp, #12
 8001252:	4718      	bx	r3
 8001254:	0800125d 	.word	0x0800125d
 8001258:	2000000c 	.word	0x2000000c

0800125c <__seofread>:
 800125c:	2000      	movs	r0, #0
 800125e:	4770      	bx	lr

08001260 <__errno>:
 8001260:	4b01      	ldr	r3, [pc, #4]	@ (8001268 <__errno+0x8>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	4770      	bx	lr
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	2000000c 	.word	0x2000000c

0800126c <__libc_init_array>:
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	2600      	movs	r6, #0
 8001270:	4c0c      	ldr	r4, [pc, #48]	@ (80012a4 <__libc_init_array+0x38>)
 8001272:	4d0d      	ldr	r5, [pc, #52]	@ (80012a8 <__libc_init_array+0x3c>)
 8001274:	1b64      	subs	r4, r4, r5
 8001276:	10a4      	asrs	r4, r4, #2
 8001278:	42a6      	cmp	r6, r4
 800127a:	d109      	bne.n	8001290 <__libc_init_array+0x24>
 800127c:	2600      	movs	r6, #0
 800127e:	f001 f90d 	bl	800249c <_init>
 8001282:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <__libc_init_array+0x40>)
 8001284:	4d0a      	ldr	r5, [pc, #40]	@ (80012b0 <__libc_init_array+0x44>)
 8001286:	1b64      	subs	r4, r4, r5
 8001288:	10a4      	asrs	r4, r4, #2
 800128a:	42a6      	cmp	r6, r4
 800128c:	d105      	bne.n	800129a <__libc_init_array+0x2e>
 800128e:	bd70      	pop	{r4, r5, r6, pc}
 8001290:	00b3      	lsls	r3, r6, #2
 8001292:	58eb      	ldr	r3, [r5, r3]
 8001294:	4798      	blx	r3
 8001296:	3601      	adds	r6, #1
 8001298:	e7ee      	b.n	8001278 <__libc_init_array+0xc>
 800129a:	00b3      	lsls	r3, r6, #2
 800129c:	58eb      	ldr	r3, [r5, r3]
 800129e:	4798      	blx	r3
 80012a0:	3601      	adds	r6, #1
 80012a2:	e7f2      	b.n	800128a <__libc_init_array+0x1e>
 80012a4:	08002698 	.word	0x08002698
 80012a8:	08002698 	.word	0x08002698
 80012ac:	0800269c 	.word	0x0800269c
 80012b0:	08002698 	.word	0x08002698

080012b4 <__retarget_lock_acquire_recursive>:
 80012b4:	4770      	bx	lr

080012b6 <__retarget_lock_release_recursive>:
 80012b6:	4770      	bx	lr

080012b8 <_free_r>:
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	0005      	movs	r5, r0
 80012bc:	1e0c      	subs	r4, r1, #0
 80012be:	d010      	beq.n	80012e2 <_free_r+0x2a>
 80012c0:	3c04      	subs	r4, #4
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da00      	bge.n	80012ca <_free_r+0x12>
 80012c8:	18e4      	adds	r4, r4, r3
 80012ca:	0028      	movs	r0, r5
 80012cc:	f000 f8e0 	bl	8001490 <__malloc_lock>
 80012d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <_free_r+0x90>)
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <_free_r+0x2c>
 80012d8:	6063      	str	r3, [r4, #4]
 80012da:	6014      	str	r4, [r2, #0]
 80012dc:	0028      	movs	r0, r5
 80012de:	f000 f8df 	bl	80014a0 <__malloc_unlock>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	42a3      	cmp	r3, r4
 80012e6:	d908      	bls.n	80012fa <_free_r+0x42>
 80012e8:	6820      	ldr	r0, [r4, #0]
 80012ea:	1821      	adds	r1, r4, r0
 80012ec:	428b      	cmp	r3, r1
 80012ee:	d1f3      	bne.n	80012d8 <_free_r+0x20>
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	1809      	adds	r1, r1, r0
 80012f6:	6021      	str	r1, [r4, #0]
 80012f8:	e7ee      	b.n	80012d8 <_free_r+0x20>
 80012fa:	001a      	movs	r2, r3
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_free_r+0x4e>
 8001302:	42a3      	cmp	r3, r4
 8001304:	d9f9      	bls.n	80012fa <_free_r+0x42>
 8001306:	6811      	ldr	r1, [r2, #0]
 8001308:	1850      	adds	r0, r2, r1
 800130a:	42a0      	cmp	r0, r4
 800130c:	d10b      	bne.n	8001326 <_free_r+0x6e>
 800130e:	6820      	ldr	r0, [r4, #0]
 8001310:	1809      	adds	r1, r1, r0
 8001312:	1850      	adds	r0, r2, r1
 8001314:	6011      	str	r1, [r2, #0]
 8001316:	4283      	cmp	r3, r0
 8001318:	d1e0      	bne.n	80012dc <_free_r+0x24>
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	1841      	adds	r1, r0, r1
 8001320:	6011      	str	r1, [r2, #0]
 8001322:	6053      	str	r3, [r2, #4]
 8001324:	e7da      	b.n	80012dc <_free_r+0x24>
 8001326:	42a0      	cmp	r0, r4
 8001328:	d902      	bls.n	8001330 <_free_r+0x78>
 800132a:	230c      	movs	r3, #12
 800132c:	602b      	str	r3, [r5, #0]
 800132e:	e7d5      	b.n	80012dc <_free_r+0x24>
 8001330:	6820      	ldr	r0, [r4, #0]
 8001332:	1821      	adds	r1, r4, r0
 8001334:	428b      	cmp	r3, r1
 8001336:	d103      	bne.n	8001340 <_free_r+0x88>
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	1809      	adds	r1, r1, r0
 800133e:	6021      	str	r1, [r4, #0]
 8001340:	6063      	str	r3, [r4, #4]
 8001342:	6054      	str	r4, [r2, #4]
 8001344:	e7ca      	b.n	80012dc <_free_r+0x24>
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	20000204 	.word	0x20000204

0800134c <sbrk_aligned>:
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	4e0f      	ldr	r6, [pc, #60]	@ (800138c <sbrk_aligned+0x40>)
 8001350:	000d      	movs	r5, r1
 8001352:	6831      	ldr	r1, [r6, #0]
 8001354:	0004      	movs	r4, r0
 8001356:	2900      	cmp	r1, #0
 8001358:	d102      	bne.n	8001360 <sbrk_aligned+0x14>
 800135a:	f000 ff2d 	bl	80021b8 <_sbrk_r>
 800135e:	6030      	str	r0, [r6, #0]
 8001360:	0029      	movs	r1, r5
 8001362:	0020      	movs	r0, r4
 8001364:	f000 ff28 	bl	80021b8 <_sbrk_r>
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	d103      	bne.n	8001374 <sbrk_aligned+0x28>
 800136c:	2501      	movs	r5, #1
 800136e:	426d      	negs	r5, r5
 8001370:	0028      	movs	r0, r5
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	2303      	movs	r3, #3
 8001376:	1cc5      	adds	r5, r0, #3
 8001378:	439d      	bics	r5, r3
 800137a:	42a8      	cmp	r0, r5
 800137c:	d0f8      	beq.n	8001370 <sbrk_aligned+0x24>
 800137e:	1a29      	subs	r1, r5, r0
 8001380:	0020      	movs	r0, r4
 8001382:	f000 ff19 	bl	80021b8 <_sbrk_r>
 8001386:	3001      	adds	r0, #1
 8001388:	d1f2      	bne.n	8001370 <sbrk_aligned+0x24>
 800138a:	e7ef      	b.n	800136c <sbrk_aligned+0x20>
 800138c:	20000200 	.word	0x20000200

08001390 <_malloc_r>:
 8001390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001392:	2203      	movs	r2, #3
 8001394:	1ccb      	adds	r3, r1, #3
 8001396:	4393      	bics	r3, r2
 8001398:	3308      	adds	r3, #8
 800139a:	0005      	movs	r5, r0
 800139c:	001f      	movs	r7, r3
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d234      	bcs.n	800140c <_malloc_r+0x7c>
 80013a2:	270c      	movs	r7, #12
 80013a4:	42b9      	cmp	r1, r7
 80013a6:	d833      	bhi.n	8001410 <_malloc_r+0x80>
 80013a8:	0028      	movs	r0, r5
 80013aa:	f000 f871 	bl	8001490 <__malloc_lock>
 80013ae:	4e37      	ldr	r6, [pc, #220]	@ (800148c <_malloc_r+0xfc>)
 80013b0:	6833      	ldr	r3, [r6, #0]
 80013b2:	001c      	movs	r4, r3
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d12f      	bne.n	8001418 <_malloc_r+0x88>
 80013b8:	0039      	movs	r1, r7
 80013ba:	0028      	movs	r0, r5
 80013bc:	f7ff ffc6 	bl	800134c <sbrk_aligned>
 80013c0:	0004      	movs	r4, r0
 80013c2:	1c43      	adds	r3, r0, #1
 80013c4:	d15f      	bne.n	8001486 <_malloc_r+0xf6>
 80013c6:	6834      	ldr	r4, [r6, #0]
 80013c8:	9400      	str	r4, [sp, #0]
 80013ca:	9b00      	ldr	r3, [sp, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d14a      	bne.n	8001466 <_malloc_r+0xd6>
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d052      	beq.n	800147a <_malloc_r+0xea>
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	0028      	movs	r0, r5
 80013d8:	18e3      	adds	r3, r4, r3
 80013da:	9900      	ldr	r1, [sp, #0]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f000 feeb 	bl	80021b8 <_sbrk_r>
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	4283      	cmp	r3, r0
 80013e6:	d148      	bne.n	800147a <_malloc_r+0xea>
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	0028      	movs	r0, r5
 80013ec:	1aff      	subs	r7, r7, r3
 80013ee:	0039      	movs	r1, r7
 80013f0:	f7ff ffac 	bl	800134c <sbrk_aligned>
 80013f4:	3001      	adds	r0, #1
 80013f6:	d040      	beq.n	800147a <_malloc_r+0xea>
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	19db      	adds	r3, r3, r7
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	6833      	ldr	r3, [r6, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	2a00      	cmp	r2, #0
 8001404:	d133      	bne.n	800146e <_malloc_r+0xde>
 8001406:	9b00      	ldr	r3, [sp, #0]
 8001408:	6033      	str	r3, [r6, #0]
 800140a:	e019      	b.n	8001440 <_malloc_r+0xb0>
 800140c:	2b00      	cmp	r3, #0
 800140e:	dac9      	bge.n	80013a4 <_malloc_r+0x14>
 8001410:	230c      	movs	r3, #12
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	2000      	movs	r0, #0
 8001416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001418:	6821      	ldr	r1, [r4, #0]
 800141a:	1bc9      	subs	r1, r1, r7
 800141c:	d420      	bmi.n	8001460 <_malloc_r+0xd0>
 800141e:	290b      	cmp	r1, #11
 8001420:	d90a      	bls.n	8001438 <_malloc_r+0xa8>
 8001422:	19e2      	adds	r2, r4, r7
 8001424:	6027      	str	r7, [r4, #0]
 8001426:	42a3      	cmp	r3, r4
 8001428:	d104      	bne.n	8001434 <_malloc_r+0xa4>
 800142a:	6032      	str	r2, [r6, #0]
 800142c:	6863      	ldr	r3, [r4, #4]
 800142e:	6011      	str	r1, [r2, #0]
 8001430:	6053      	str	r3, [r2, #4]
 8001432:	e005      	b.n	8001440 <_malloc_r+0xb0>
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	e7f9      	b.n	800142c <_malloc_r+0x9c>
 8001438:	6862      	ldr	r2, [r4, #4]
 800143a:	42a3      	cmp	r3, r4
 800143c:	d10e      	bne.n	800145c <_malloc_r+0xcc>
 800143e:	6032      	str	r2, [r6, #0]
 8001440:	0028      	movs	r0, r5
 8001442:	f000 f82d 	bl	80014a0 <__malloc_unlock>
 8001446:	0020      	movs	r0, r4
 8001448:	2207      	movs	r2, #7
 800144a:	300b      	adds	r0, #11
 800144c:	1d23      	adds	r3, r4, #4
 800144e:	4390      	bics	r0, r2
 8001450:	1ac2      	subs	r2, r0, r3
 8001452:	4298      	cmp	r0, r3
 8001454:	d0df      	beq.n	8001416 <_malloc_r+0x86>
 8001456:	1a1b      	subs	r3, r3, r0
 8001458:	50a3      	str	r3, [r4, r2]
 800145a:	e7dc      	b.n	8001416 <_malloc_r+0x86>
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	e7ef      	b.n	8001440 <_malloc_r+0xb0>
 8001460:	0023      	movs	r3, r4
 8001462:	6864      	ldr	r4, [r4, #4]
 8001464:	e7a6      	b.n	80013b4 <_malloc_r+0x24>
 8001466:	9c00      	ldr	r4, [sp, #0]
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	e7ad      	b.n	80013ca <_malloc_r+0x3a>
 800146e:	001a      	movs	r2, r3
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	42a3      	cmp	r3, r4
 8001474:	d1fb      	bne.n	800146e <_malloc_r+0xde>
 8001476:	2300      	movs	r3, #0
 8001478:	e7da      	b.n	8001430 <_malloc_r+0xa0>
 800147a:	230c      	movs	r3, #12
 800147c:	0028      	movs	r0, r5
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	f000 f80e 	bl	80014a0 <__malloc_unlock>
 8001484:	e7c6      	b.n	8001414 <_malloc_r+0x84>
 8001486:	6007      	str	r7, [r0, #0]
 8001488:	e7da      	b.n	8001440 <_malloc_r+0xb0>
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	20000204 	.word	0x20000204

08001490 <__malloc_lock>:
 8001490:	b510      	push	{r4, lr}
 8001492:	4802      	ldr	r0, [pc, #8]	@ (800149c <__malloc_lock+0xc>)
 8001494:	f7ff ff0e 	bl	80012b4 <__retarget_lock_acquire_recursive>
 8001498:	bd10      	pop	{r4, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	200001fc 	.word	0x200001fc

080014a0 <__malloc_unlock>:
 80014a0:	b510      	push	{r4, lr}
 80014a2:	4802      	ldr	r0, [pc, #8]	@ (80014ac <__malloc_unlock+0xc>)
 80014a4:	f7ff ff07 	bl	80012b6 <__retarget_lock_release_recursive>
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	200001fc 	.word	0x200001fc

080014b0 <__ssputs_r>:
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	688e      	ldr	r6, [r1, #8]
 80014b4:	b085      	sub	sp, #20
 80014b6:	001f      	movs	r7, r3
 80014b8:	000c      	movs	r4, r1
 80014ba:	680b      	ldr	r3, [r1, #0]
 80014bc:	9002      	str	r0, [sp, #8]
 80014be:	9203      	str	r2, [sp, #12]
 80014c0:	42be      	cmp	r6, r7
 80014c2:	d830      	bhi.n	8001526 <__ssputs_r+0x76>
 80014c4:	210c      	movs	r1, #12
 80014c6:	5e62      	ldrsh	r2, [r4, r1]
 80014c8:	2190      	movs	r1, #144	@ 0x90
 80014ca:	00c9      	lsls	r1, r1, #3
 80014cc:	420a      	tst	r2, r1
 80014ce:	d028      	beq.n	8001522 <__ssputs_r+0x72>
 80014d0:	2003      	movs	r0, #3
 80014d2:	6921      	ldr	r1, [r4, #16]
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	6963      	ldr	r3, [r4, #20]
 80014da:	4343      	muls	r3, r0
 80014dc:	9801      	ldr	r0, [sp, #4]
 80014de:	0fdd      	lsrs	r5, r3, #31
 80014e0:	18ed      	adds	r5, r5, r3
 80014e2:	1c7b      	adds	r3, r7, #1
 80014e4:	181b      	adds	r3, r3, r0
 80014e6:	106d      	asrs	r5, r5, #1
 80014e8:	42ab      	cmp	r3, r5
 80014ea:	d900      	bls.n	80014ee <__ssputs_r+0x3e>
 80014ec:	001d      	movs	r5, r3
 80014ee:	0552      	lsls	r2, r2, #21
 80014f0:	d528      	bpl.n	8001544 <__ssputs_r+0x94>
 80014f2:	0029      	movs	r1, r5
 80014f4:	9802      	ldr	r0, [sp, #8]
 80014f6:	f7ff ff4b 	bl	8001390 <_malloc_r>
 80014fa:	1e06      	subs	r6, r0, #0
 80014fc:	d02c      	beq.n	8001558 <__ssputs_r+0xa8>
 80014fe:	9a01      	ldr	r2, [sp, #4]
 8001500:	6921      	ldr	r1, [r4, #16]
 8001502:	f000 fe76 	bl	80021f2 <memcpy>
 8001506:	89a2      	ldrh	r2, [r4, #12]
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <__ssputs_r+0xbc>)
 800150a:	401a      	ands	r2, r3
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	4313      	orrs	r3, r2
 8001510:	81a3      	strh	r3, [r4, #12]
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	6126      	str	r6, [r4, #16]
 8001516:	18f6      	adds	r6, r6, r3
 8001518:	6026      	str	r6, [r4, #0]
 800151a:	003e      	movs	r6, r7
 800151c:	6165      	str	r5, [r4, #20]
 800151e:	1aed      	subs	r5, r5, r3
 8001520:	60a5      	str	r5, [r4, #8]
 8001522:	42be      	cmp	r6, r7
 8001524:	d900      	bls.n	8001528 <__ssputs_r+0x78>
 8001526:	003e      	movs	r6, r7
 8001528:	0032      	movs	r2, r6
 800152a:	9903      	ldr	r1, [sp, #12]
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	f000 fe31 	bl	8002194 <memmove>
 8001532:	2000      	movs	r0, #0
 8001534:	68a3      	ldr	r3, [r4, #8]
 8001536:	1b9b      	subs	r3, r3, r6
 8001538:	60a3      	str	r3, [r4, #8]
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	199b      	adds	r3, r3, r6
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	b005      	add	sp, #20
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	002a      	movs	r2, r5
 8001546:	9802      	ldr	r0, [sp, #8]
 8001548:	f000 fe5c 	bl	8002204 <_realloc_r>
 800154c:	1e06      	subs	r6, r0, #0
 800154e:	d1e0      	bne.n	8001512 <__ssputs_r+0x62>
 8001550:	6921      	ldr	r1, [r4, #16]
 8001552:	9802      	ldr	r0, [sp, #8]
 8001554:	f7ff feb0 	bl	80012b8 <_free_r>
 8001558:	230c      	movs	r3, #12
 800155a:	2001      	movs	r0, #1
 800155c:	9a02      	ldr	r2, [sp, #8]
 800155e:	4240      	negs	r0, r0
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	89a2      	ldrh	r2, [r4, #12]
 8001564:	3334      	adds	r3, #52	@ 0x34
 8001566:	4313      	orrs	r3, r2
 8001568:	81a3      	strh	r3, [r4, #12]
 800156a:	e7e9      	b.n	8001540 <__ssputs_r+0x90>
 800156c:	fffffb7f 	.word	0xfffffb7f

08001570 <_svfiprintf_r>:
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b0a1      	sub	sp, #132	@ 0x84
 8001574:	9003      	str	r0, [sp, #12]
 8001576:	001d      	movs	r5, r3
 8001578:	898b      	ldrh	r3, [r1, #12]
 800157a:	000f      	movs	r7, r1
 800157c:	0016      	movs	r6, r2
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	d511      	bpl.n	80015a6 <_svfiprintf_r+0x36>
 8001582:	690b      	ldr	r3, [r1, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10e      	bne.n	80015a6 <_svfiprintf_r+0x36>
 8001588:	2140      	movs	r1, #64	@ 0x40
 800158a:	f7ff ff01 	bl	8001390 <_malloc_r>
 800158e:	6038      	str	r0, [r7, #0]
 8001590:	6138      	str	r0, [r7, #16]
 8001592:	2800      	cmp	r0, #0
 8001594:	d105      	bne.n	80015a2 <_svfiprintf_r+0x32>
 8001596:	230c      	movs	r3, #12
 8001598:	9a03      	ldr	r2, [sp, #12]
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	2001      	movs	r0, #1
 800159e:	4240      	negs	r0, r0
 80015a0:	e0cf      	b.n	8001742 <_svfiprintf_r+0x1d2>
 80015a2:	2340      	movs	r3, #64	@ 0x40
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	2300      	movs	r3, #0
 80015a8:	ac08      	add	r4, sp, #32
 80015aa:	6163      	str	r3, [r4, #20]
 80015ac:	3320      	adds	r3, #32
 80015ae:	7663      	strb	r3, [r4, #25]
 80015b0:	3310      	adds	r3, #16
 80015b2:	76a3      	strb	r3, [r4, #26]
 80015b4:	9507      	str	r5, [sp, #28]
 80015b6:	0035      	movs	r5, r6
 80015b8:	782b      	ldrb	r3, [r5, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <_svfiprintf_r+0x52>
 80015be:	2b25      	cmp	r3, #37	@ 0x25
 80015c0:	d148      	bne.n	8001654 <_svfiprintf_r+0xe4>
 80015c2:	1bab      	subs	r3, r5, r6
 80015c4:	9305      	str	r3, [sp, #20]
 80015c6:	42b5      	cmp	r5, r6
 80015c8:	d00b      	beq.n	80015e2 <_svfiprintf_r+0x72>
 80015ca:	0032      	movs	r2, r6
 80015cc:	0039      	movs	r1, r7
 80015ce:	9803      	ldr	r0, [sp, #12]
 80015d0:	f7ff ff6e 	bl	80014b0 <__ssputs_r>
 80015d4:	3001      	adds	r0, #1
 80015d6:	d100      	bne.n	80015da <_svfiprintf_r+0x6a>
 80015d8:	e0ae      	b.n	8001738 <_svfiprintf_r+0x1c8>
 80015da:	6963      	ldr	r3, [r4, #20]
 80015dc:	9a05      	ldr	r2, [sp, #20]
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	6163      	str	r3, [r4, #20]
 80015e2:	782b      	ldrb	r3, [r5, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d100      	bne.n	80015ea <_svfiprintf_r+0x7a>
 80015e8:	e0a6      	b.n	8001738 <_svfiprintf_r+0x1c8>
 80015ea:	2201      	movs	r2, #1
 80015ec:	2300      	movs	r3, #0
 80015ee:	4252      	negs	r2, r2
 80015f0:	6062      	str	r2, [r4, #4]
 80015f2:	a904      	add	r1, sp, #16
 80015f4:	3254      	adds	r2, #84	@ 0x54
 80015f6:	1852      	adds	r2, r2, r1
 80015f8:	1c6e      	adds	r6, r5, #1
 80015fa:	6023      	str	r3, [r4, #0]
 80015fc:	60e3      	str	r3, [r4, #12]
 80015fe:	60a3      	str	r3, [r4, #8]
 8001600:	7013      	strb	r3, [r2, #0]
 8001602:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001604:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <_svfiprintf_r+0x1e8>)
 8001606:	2205      	movs	r2, #5
 8001608:	0018      	movs	r0, r3
 800160a:	7831      	ldrb	r1, [r6, #0]
 800160c:	9305      	str	r3, [sp, #20]
 800160e:	f000 fde5 	bl	80021dc <memchr>
 8001612:	1c75      	adds	r5, r6, #1
 8001614:	2800      	cmp	r0, #0
 8001616:	d11f      	bne.n	8001658 <_svfiprintf_r+0xe8>
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	06d3      	lsls	r3, r2, #27
 800161c:	d504      	bpl.n	8001628 <_svfiprintf_r+0xb8>
 800161e:	2353      	movs	r3, #83	@ 0x53
 8001620:	a904      	add	r1, sp, #16
 8001622:	185b      	adds	r3, r3, r1
 8001624:	2120      	movs	r1, #32
 8001626:	7019      	strb	r1, [r3, #0]
 8001628:	0713      	lsls	r3, r2, #28
 800162a:	d504      	bpl.n	8001636 <_svfiprintf_r+0xc6>
 800162c:	2353      	movs	r3, #83	@ 0x53
 800162e:	a904      	add	r1, sp, #16
 8001630:	185b      	adds	r3, r3, r1
 8001632:	212b      	movs	r1, #43	@ 0x2b
 8001634:	7019      	strb	r1, [r3, #0]
 8001636:	7833      	ldrb	r3, [r6, #0]
 8001638:	2b2a      	cmp	r3, #42	@ 0x2a
 800163a:	d016      	beq.n	800166a <_svfiprintf_r+0xfa>
 800163c:	0035      	movs	r5, r6
 800163e:	2100      	movs	r1, #0
 8001640:	200a      	movs	r0, #10
 8001642:	68e3      	ldr	r3, [r4, #12]
 8001644:	782a      	ldrb	r2, [r5, #0]
 8001646:	1c6e      	adds	r6, r5, #1
 8001648:	3a30      	subs	r2, #48	@ 0x30
 800164a:	2a09      	cmp	r2, #9
 800164c:	d950      	bls.n	80016f0 <_svfiprintf_r+0x180>
 800164e:	2900      	cmp	r1, #0
 8001650:	d111      	bne.n	8001676 <_svfiprintf_r+0x106>
 8001652:	e017      	b.n	8001684 <_svfiprintf_r+0x114>
 8001654:	3501      	adds	r5, #1
 8001656:	e7af      	b.n	80015b8 <_svfiprintf_r+0x48>
 8001658:	9b05      	ldr	r3, [sp, #20]
 800165a:	6822      	ldr	r2, [r4, #0]
 800165c:	1ac0      	subs	r0, r0, r3
 800165e:	2301      	movs	r3, #1
 8001660:	4083      	lsls	r3, r0
 8001662:	4313      	orrs	r3, r2
 8001664:	002e      	movs	r6, r5
 8001666:	6023      	str	r3, [r4, #0]
 8001668:	e7cc      	b.n	8001604 <_svfiprintf_r+0x94>
 800166a:	9b07      	ldr	r3, [sp, #28]
 800166c:	1d19      	adds	r1, r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	9107      	str	r1, [sp, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db01      	blt.n	800167a <_svfiprintf_r+0x10a>
 8001676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001678:	e004      	b.n	8001684 <_svfiprintf_r+0x114>
 800167a:	425b      	negs	r3, r3
 800167c:	60e3      	str	r3, [r4, #12]
 800167e:	2302      	movs	r3, #2
 8001680:	4313      	orrs	r3, r2
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	782b      	ldrb	r3, [r5, #0]
 8001686:	2b2e      	cmp	r3, #46	@ 0x2e
 8001688:	d10c      	bne.n	80016a4 <_svfiprintf_r+0x134>
 800168a:	786b      	ldrb	r3, [r5, #1]
 800168c:	2b2a      	cmp	r3, #42	@ 0x2a
 800168e:	d134      	bne.n	80016fa <_svfiprintf_r+0x18a>
 8001690:	9b07      	ldr	r3, [sp, #28]
 8001692:	3502      	adds	r5, #2
 8001694:	1d1a      	adds	r2, r3, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	9207      	str	r2, [sp, #28]
 800169a:	2b00      	cmp	r3, #0
 800169c:	da01      	bge.n	80016a2 <_svfiprintf_r+0x132>
 800169e:	2301      	movs	r3, #1
 80016a0:	425b      	negs	r3, r3
 80016a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80016a4:	4e2d      	ldr	r6, [pc, #180]	@ (800175c <_svfiprintf_r+0x1ec>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	0030      	movs	r0, r6
 80016aa:	7829      	ldrb	r1, [r5, #0]
 80016ac:	f000 fd96 	bl	80021dc <memchr>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d006      	beq.n	80016c2 <_svfiprintf_r+0x152>
 80016b4:	2340      	movs	r3, #64	@ 0x40
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	4083      	lsls	r3, r0
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	3501      	adds	r5, #1
 80016be:	4313      	orrs	r3, r2
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	7829      	ldrb	r1, [r5, #0]
 80016c4:	2206      	movs	r2, #6
 80016c6:	4826      	ldr	r0, [pc, #152]	@ (8001760 <_svfiprintf_r+0x1f0>)
 80016c8:	1c6e      	adds	r6, r5, #1
 80016ca:	7621      	strb	r1, [r4, #24]
 80016cc:	f000 fd86 	bl	80021dc <memchr>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d038      	beq.n	8001746 <_svfiprintf_r+0x1d6>
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <_svfiprintf_r+0x1f4>)
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d122      	bne.n	8001720 <_svfiprintf_r+0x1b0>
 80016da:	2207      	movs	r2, #7
 80016dc:	9b07      	ldr	r3, [sp, #28]
 80016de:	3307      	adds	r3, #7
 80016e0:	4393      	bics	r3, r2
 80016e2:	3308      	adds	r3, #8
 80016e4:	9307      	str	r3, [sp, #28]
 80016e6:	6963      	ldr	r3, [r4, #20]
 80016e8:	9a04      	ldr	r2, [sp, #16]
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	6163      	str	r3, [r4, #20]
 80016ee:	e762      	b.n	80015b6 <_svfiprintf_r+0x46>
 80016f0:	4343      	muls	r3, r0
 80016f2:	0035      	movs	r5, r6
 80016f4:	2101      	movs	r1, #1
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	e7a4      	b.n	8001644 <_svfiprintf_r+0xd4>
 80016fa:	2300      	movs	r3, #0
 80016fc:	200a      	movs	r0, #10
 80016fe:	0019      	movs	r1, r3
 8001700:	3501      	adds	r5, #1
 8001702:	6063      	str	r3, [r4, #4]
 8001704:	782a      	ldrb	r2, [r5, #0]
 8001706:	1c6e      	adds	r6, r5, #1
 8001708:	3a30      	subs	r2, #48	@ 0x30
 800170a:	2a09      	cmp	r2, #9
 800170c:	d903      	bls.n	8001716 <_svfiprintf_r+0x1a6>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0c8      	beq.n	80016a4 <_svfiprintf_r+0x134>
 8001712:	9109      	str	r1, [sp, #36]	@ 0x24
 8001714:	e7c6      	b.n	80016a4 <_svfiprintf_r+0x134>
 8001716:	4341      	muls	r1, r0
 8001718:	0035      	movs	r5, r6
 800171a:	2301      	movs	r3, #1
 800171c:	1889      	adds	r1, r1, r2
 800171e:	e7f1      	b.n	8001704 <_svfiprintf_r+0x194>
 8001720:	aa07      	add	r2, sp, #28
 8001722:	9200      	str	r2, [sp, #0]
 8001724:	0021      	movs	r1, r4
 8001726:	003a      	movs	r2, r7
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <_svfiprintf_r+0x1f8>)
 800172a:	9803      	ldr	r0, [sp, #12]
 800172c:	e000      	b.n	8001730 <_svfiprintf_r+0x1c0>
 800172e:	bf00      	nop
 8001730:	9004      	str	r0, [sp, #16]
 8001732:	9b04      	ldr	r3, [sp, #16]
 8001734:	3301      	adds	r3, #1
 8001736:	d1d6      	bne.n	80016e6 <_svfiprintf_r+0x176>
 8001738:	89bb      	ldrh	r3, [r7, #12]
 800173a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800173c:	065b      	lsls	r3, r3, #25
 800173e:	d500      	bpl.n	8001742 <_svfiprintf_r+0x1d2>
 8001740:	e72c      	b.n	800159c <_svfiprintf_r+0x2c>
 8001742:	b021      	add	sp, #132	@ 0x84
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001746:	aa07      	add	r2, sp, #28
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	0021      	movs	r1, r4
 800174c:	003a      	movs	r2, r7
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <_svfiprintf_r+0x1f8>)
 8001750:	9803      	ldr	r0, [sp, #12]
 8001752:	f000 fa3b 	bl	8001bcc <_printf_i>
 8001756:	e7eb      	b.n	8001730 <_svfiprintf_r+0x1c0>
 8001758:	08002548 	.word	0x08002548
 800175c:	0800254e 	.word	0x0800254e
 8001760:	08002552 	.word	0x08002552
 8001764:	00000000 	.word	0x00000000
 8001768:	080014b1 	.word	0x080014b1

0800176c <_sungetc_r>:
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	0014      	movs	r4, r2
 8001770:	1c4b      	adds	r3, r1, #1
 8001772:	d103      	bne.n	800177c <_sungetc_r+0x10>
 8001774:	2501      	movs	r5, #1
 8001776:	426d      	negs	r5, r5
 8001778:	0028      	movs	r0, r5
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	8993      	ldrh	r3, [r2, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	4393      	bics	r3, r2
 8001782:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001784:	81a3      	strh	r3, [r4, #12]
 8001786:	b2ce      	uxtb	r6, r1
 8001788:	6863      	ldr	r3, [r4, #4]
 800178a:	b2cd      	uxtb	r5, r1
 800178c:	2a00      	cmp	r2, #0
 800178e:	d010      	beq.n	80017b2 <_sungetc_r+0x46>
 8001790:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001792:	429a      	cmp	r2, r3
 8001794:	dd07      	ble.n	80017a6 <_sungetc_r+0x3a>
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	6023      	str	r3, [r4, #0]
 800179c:	701e      	strb	r6, [r3, #0]
 800179e:	6863      	ldr	r3, [r4, #4]
 80017a0:	3301      	adds	r3, #1
 80017a2:	6063      	str	r3, [r4, #4]
 80017a4:	e7e8      	b.n	8001778 <_sungetc_r+0xc>
 80017a6:	0021      	movs	r1, r4
 80017a8:	f000 fcb6 	bl	8002118 <__submore>
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d0f2      	beq.n	8001796 <_sungetc_r+0x2a>
 80017b0:	e7e0      	b.n	8001774 <_sungetc_r+0x8>
 80017b2:	6921      	ldr	r1, [r4, #16]
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d007      	beq.n	80017ca <_sungetc_r+0x5e>
 80017ba:	4291      	cmp	r1, r2
 80017bc:	d205      	bcs.n	80017ca <_sungetc_r+0x5e>
 80017be:	1e51      	subs	r1, r2, #1
 80017c0:	7808      	ldrb	r0, [r1, #0]
 80017c2:	42a8      	cmp	r0, r5
 80017c4:	d101      	bne.n	80017ca <_sungetc_r+0x5e>
 80017c6:	6021      	str	r1, [r4, #0]
 80017c8:	e7ea      	b.n	80017a0 <_sungetc_r+0x34>
 80017ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80017cc:	0023      	movs	r3, r4
 80017ce:	3344      	adds	r3, #68	@ 0x44
 80017d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80017d2:	2303      	movs	r3, #3
 80017d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80017d6:	0023      	movs	r3, r4
 80017d8:	3346      	adds	r3, #70	@ 0x46
 80017da:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80017dc:	701e      	strb	r6, [r3, #0]
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	e7de      	b.n	80017a2 <_sungetc_r+0x36>

080017e4 <__ssrefill_r>:
 80017e4:	b510      	push	{r4, lr}
 80017e6:	000c      	movs	r4, r1
 80017e8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80017ea:	2900      	cmp	r1, #0
 80017ec:	d00e      	beq.n	800180c <__ssrefill_r+0x28>
 80017ee:	0023      	movs	r3, r4
 80017f0:	3344      	adds	r3, #68	@ 0x44
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d001      	beq.n	80017fa <__ssrefill_r+0x16>
 80017f6:	f7ff fd5f 	bl	80012b8 <_free_r>
 80017fa:	2000      	movs	r0, #0
 80017fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017fe:	6360      	str	r0, [r4, #52]	@ 0x34
 8001800:	6063      	str	r3, [r4, #4]
 8001802:	4283      	cmp	r3, r0
 8001804:	d002      	beq.n	800180c <__ssrefill_r+0x28>
 8001806:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	bd10      	pop	{r4, pc}
 800180c:	6923      	ldr	r3, [r4, #16]
 800180e:	2001      	movs	r0, #1
 8001810:	6023      	str	r3, [r4, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	89a2      	ldrh	r2, [r4, #12]
 8001816:	6063      	str	r3, [r4, #4]
 8001818:	3320      	adds	r3, #32
 800181a:	4313      	orrs	r3, r2
 800181c:	81a3      	strh	r3, [r4, #12]
 800181e:	4240      	negs	r0, r0
 8001820:	e7f3      	b.n	800180a <__ssrefill_r+0x26>
	...

08001824 <__ssvfiscanf_r>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	4cab      	ldr	r4, [pc, #684]	@ (8001ad4 <__ssvfiscanf_r+0x2b0>)
 8001828:	44a5      	add	sp, r4
 800182a:	000c      	movs	r4, r1
 800182c:	2100      	movs	r1, #0
 800182e:	9000      	str	r0, [sp, #0]
 8001830:	20be      	movs	r0, #190	@ 0xbe
 8001832:	9146      	str	r1, [sp, #280]	@ 0x118
 8001834:	9147      	str	r1, [sp, #284]	@ 0x11c
 8001836:	a903      	add	r1, sp, #12
 8001838:	9148      	str	r1, [sp, #288]	@ 0x120
 800183a:	49a7      	ldr	r1, [pc, #668]	@ (8001ad8 <__ssvfiscanf_r+0x2b4>)
 800183c:	0040      	lsls	r0, r0, #1
 800183e:	ad43      	add	r5, sp, #268	@ 0x10c
 8001840:	5029      	str	r1, [r5, r0]
 8001842:	49a6      	ldr	r1, [pc, #664]	@ (8001adc <__ssvfiscanf_r+0x2b8>)
 8001844:	3004      	adds	r0, #4
 8001846:	ad43      	add	r5, sp, #268	@ 0x10c
 8001848:	5029      	str	r1, [r5, r0]
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	7816      	ldrb	r6, [r2, #0]
 800184e:	2e00      	cmp	r6, #0
 8001850:	d100      	bne.n	8001854 <__ssvfiscanf_r+0x30>
 8001852:	e13c      	b.n	8001ace <__ssvfiscanf_r+0x2aa>
 8001854:	2308      	movs	r3, #8
 8001856:	2008      	movs	r0, #8
 8001858:	4da1      	ldr	r5, [pc, #644]	@ (8001ae0 <__ssvfiscanf_r+0x2bc>)
 800185a:	1c57      	adds	r7, r2, #1
 800185c:	5da9      	ldrb	r1, [r5, r6]
 800185e:	400b      	ands	r3, r1
 8001860:	4201      	tst	r1, r0
 8001862:	d01d      	beq.n	80018a0 <__ssvfiscanf_r+0x7c>
 8001864:	0006      	movs	r6, r0
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd0f      	ble.n	800188c <__ssvfiscanf_r+0x68>
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	5caa      	ldrb	r2, [r5, r2]
 8001872:	4232      	tst	r2, r6
 8001874:	d101      	bne.n	800187a <__ssvfiscanf_r+0x56>
 8001876:	003a      	movs	r2, r7
 8001878:	e7e8      	b.n	800184c <__ssvfiscanf_r+0x28>
 800187a:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800187c:	3301      	adds	r3, #1
 800187e:	3201      	adds	r2, #1
 8001880:	9247      	str	r2, [sp, #284]	@ 0x11c
 8001882:	6862      	ldr	r2, [r4, #4]
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	3a01      	subs	r2, #1
 8001888:	6062      	str	r2, [r4, #4]
 800188a:	e7ec      	b.n	8001866 <__ssvfiscanf_r+0x42>
 800188c:	22c0      	movs	r2, #192	@ 0xc0
 800188e:	ab43      	add	r3, sp, #268	@ 0x10c
 8001890:	0052      	lsls	r2, r2, #1
 8001892:	0021      	movs	r1, r4
 8001894:	589b      	ldr	r3, [r3, r2]
 8001896:	9800      	ldr	r0, [sp, #0]
 8001898:	4798      	blx	r3
 800189a:	2800      	cmp	r0, #0
 800189c:	d0e6      	beq.n	800186c <__ssvfiscanf_r+0x48>
 800189e:	e7ea      	b.n	8001876 <__ssvfiscanf_r+0x52>
 80018a0:	2e25      	cmp	r6, #37	@ 0x25
 80018a2:	d162      	bne.n	800196a <__ssvfiscanf_r+0x146>
 80018a4:	9345      	str	r3, [sp, #276]	@ 0x114
 80018a6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80018a8:	7853      	ldrb	r3, [r2, #1]
 80018aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80018ac:	d102      	bne.n	80018b4 <__ssvfiscanf_r+0x90>
 80018ae:	3b1a      	subs	r3, #26
 80018b0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80018b2:	1c97      	adds	r7, r2, #2
 80018b4:	003d      	movs	r5, r7
 80018b6:	220a      	movs	r2, #10
 80018b8:	7829      	ldrb	r1, [r5, #0]
 80018ba:	1c6f      	adds	r7, r5, #1
 80018bc:	000b      	movs	r3, r1
 80018be:	3b30      	subs	r3, #48	@ 0x30
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d91f      	bls.n	8001904 <__ssvfiscanf_r+0xe0>
 80018c4:	4b87      	ldr	r3, [pc, #540]	@ (8001ae4 <__ssvfiscanf_r+0x2c0>)
 80018c6:	2203      	movs	r2, #3
 80018c8:	0018      	movs	r0, r3
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f000 fc86 	bl	80021dc <memchr>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d007      	beq.n	80018e4 <__ssvfiscanf_r+0xc0>
 80018d4:	9b01      	ldr	r3, [sp, #4]
 80018d6:	003d      	movs	r5, r7
 80018d8:	1ac0      	subs	r0, r0, r3
 80018da:	2301      	movs	r3, #1
 80018dc:	4083      	lsls	r3, r0
 80018de:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80018e0:	4313      	orrs	r3, r2
 80018e2:	9343      	str	r3, [sp, #268]	@ 0x10c
 80018e4:	782b      	ldrb	r3, [r5, #0]
 80018e6:	1c6f      	adds	r7, r5, #1
 80018e8:	2b78      	cmp	r3, #120	@ 0x78
 80018ea:	d806      	bhi.n	80018fa <__ssvfiscanf_r+0xd6>
 80018ec:	2b57      	cmp	r3, #87	@ 0x57
 80018ee:	d810      	bhi.n	8001912 <__ssvfiscanf_r+0xee>
 80018f0:	2b25      	cmp	r3, #37	@ 0x25
 80018f2:	d03a      	beq.n	800196a <__ssvfiscanf_r+0x146>
 80018f4:	d834      	bhi.n	8001960 <__ssvfiscanf_r+0x13c>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d055      	beq.n	80019a6 <__ssvfiscanf_r+0x182>
 80018fa:	2303      	movs	r3, #3
 80018fc:	9349      	str	r3, [sp, #292]	@ 0x124
 80018fe:	3307      	adds	r3, #7
 8001900:	9344      	str	r3, [sp, #272]	@ 0x110
 8001902:	e069      	b.n	80019d8 <__ssvfiscanf_r+0x1b4>
 8001904:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8001906:	003d      	movs	r5, r7
 8001908:	4353      	muls	r3, r2
 800190a:	3b30      	subs	r3, #48	@ 0x30
 800190c:	185b      	adds	r3, r3, r1
 800190e:	9345      	str	r3, [sp, #276]	@ 0x114
 8001910:	e7d2      	b.n	80018b8 <__ssvfiscanf_r+0x94>
 8001912:	0018      	movs	r0, r3
 8001914:	3858      	subs	r0, #88	@ 0x58
 8001916:	2820      	cmp	r0, #32
 8001918:	d8ef      	bhi.n	80018fa <__ssvfiscanf_r+0xd6>
 800191a:	f7fe fbf7 	bl	800010c <__gnu_thumb1_case_shi>
 800191e:	004b      	.short	0x004b
 8001920:	ffeeffee 	.word	0xffeeffee
 8001924:	ffee007d 	.word	0xffee007d
 8001928:	ffeeffee 	.word	0xffeeffee
 800192c:	ffeeffee 	.word	0xffeeffee
 8001930:	ffeeffee 	.word	0xffeeffee
 8001934:	007b0088 	.word	0x007b0088
 8001938:	00240024 	.word	0x00240024
 800193c:	ffee0024 	.word	0xffee0024
 8001940:	ffee0055 	.word	0xffee0055
 8001944:	ffeeffee 	.word	0xffeeffee
 8001948:	0090ffee 	.word	0x0090ffee
 800194c:	00470059 	.word	0x00470059
 8001950:	ffeeffee 	.word	0xffeeffee
 8001954:	ffee008e 	.word	0xffee008e
 8001958:	ffee007b 	.word	0xffee007b
 800195c:	004bffee 	.word	0x004bffee
 8001960:	3b45      	subs	r3, #69	@ 0x45
 8001962:	2b02      	cmp	r3, #2
 8001964:	d8c9      	bhi.n	80018fa <__ssvfiscanf_r+0xd6>
 8001966:	2305      	movs	r3, #5
 8001968:	e035      	b.n	80019d6 <__ssvfiscanf_r+0x1b2>
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd0d      	ble.n	800198c <__ssvfiscanf_r+0x168>
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	42b2      	cmp	r2, r6
 8001976:	d000      	beq.n	800197a <__ssvfiscanf_r+0x156>
 8001978:	e0a9      	b.n	8001ace <__ssvfiscanf_r+0x2aa>
 800197a:	3301      	adds	r3, #1
 800197c:	6862      	ldr	r2, [r4, #4]
 800197e:	6023      	str	r3, [r4, #0]
 8001980:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8001982:	3a01      	subs	r2, #1
 8001984:	3301      	adds	r3, #1
 8001986:	6062      	str	r2, [r4, #4]
 8001988:	9347      	str	r3, [sp, #284]	@ 0x11c
 800198a:	e774      	b.n	8001876 <__ssvfiscanf_r+0x52>
 800198c:	23c0      	movs	r3, #192	@ 0xc0
 800198e:	aa43      	add	r2, sp, #268	@ 0x10c
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	0021      	movs	r1, r4
 8001994:	58d3      	ldr	r3, [r2, r3]
 8001996:	9800      	ldr	r0, [sp, #0]
 8001998:	4798      	blx	r3
 800199a:	2800      	cmp	r0, #0
 800199c:	d0e8      	beq.n	8001970 <__ssvfiscanf_r+0x14c>
 800199e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d000      	beq.n	80019a6 <__ssvfiscanf_r+0x182>
 80019a4:	e08b      	b.n	8001abe <__ssvfiscanf_r+0x29a>
 80019a6:	2001      	movs	r0, #1
 80019a8:	4240      	negs	r0, r0
 80019aa:	e08c      	b.n	8001ac6 <__ssvfiscanf_r+0x2a2>
 80019ac:	2220      	movs	r2, #32
 80019ae:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80019b0:	430a      	orrs	r2, r1
 80019b2:	9243      	str	r2, [sp, #268]	@ 0x10c
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	430a      	orrs	r2, r1
 80019bc:	9243      	str	r2, [sp, #268]	@ 0x10c
 80019be:	2210      	movs	r2, #16
 80019c0:	9244      	str	r2, [sp, #272]	@ 0x110
 80019c2:	2b6e      	cmp	r3, #110	@ 0x6e
 80019c4:	d902      	bls.n	80019cc <__ssvfiscanf_r+0x1a8>
 80019c6:	e005      	b.n	80019d4 <__ssvfiscanf_r+0x1b0>
 80019c8:	2300      	movs	r3, #0
 80019ca:	9344      	str	r3, [sp, #272]	@ 0x110
 80019cc:	2303      	movs	r3, #3
 80019ce:	e002      	b.n	80019d6 <__ssvfiscanf_r+0x1b2>
 80019d0:	2308      	movs	r3, #8
 80019d2:	9344      	str	r3, [sp, #272]	@ 0x110
 80019d4:	2304      	movs	r3, #4
 80019d6:	9349      	str	r3, [sp, #292]	@ 0x124
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	dd3e      	ble.n	8001a5c <__ssvfiscanf_r+0x238>
 80019de:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80019e0:	065b      	lsls	r3, r3, #25
 80019e2:	d408      	bmi.n	80019f6 <__ssvfiscanf_r+0x1d2>
 80019e4:	26c0      	movs	r6, #192	@ 0xc0
 80019e6:	2508      	movs	r5, #8
 80019e8:	0076      	lsls	r6, r6, #1
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	493c      	ldr	r1, [pc, #240]	@ (8001ae0 <__ssvfiscanf_r+0x2bc>)
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	5c8a      	ldrb	r2, [r1, r2]
 80019f2:	422a      	tst	r2, r5
 80019f4:	d13c      	bne.n	8001a70 <__ssvfiscanf_r+0x24c>
 80019f6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	dc4c      	bgt.n	8001a96 <__ssvfiscanf_r+0x272>
 80019fc:	0022      	movs	r2, r4
 80019fe:	9800      	ldr	r0, [sp, #0]
 8001a00:	ab02      	add	r3, sp, #8
 8001a02:	a943      	add	r1, sp, #268	@ 0x10c
 8001a04:	f000 f9ee 	bl	8001de4 <_scanf_chars>
 8001a08:	2801      	cmp	r0, #1
 8001a0a:	d060      	beq.n	8001ace <__ssvfiscanf_r+0x2aa>
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d000      	beq.n	8001a12 <__ssvfiscanf_r+0x1ee>
 8001a10:	e731      	b.n	8001876 <__ssvfiscanf_r+0x52>
 8001a12:	e7c4      	b.n	800199e <__ssvfiscanf_r+0x17a>
 8001a14:	220a      	movs	r2, #10
 8001a16:	e7d3      	b.n	80019c0 <__ssvfiscanf_r+0x19c>
 8001a18:	0039      	movs	r1, r7
 8001a1a:	a803      	add	r0, sp, #12
 8001a1c:	f000 fb42 	bl	80020a4 <__sccl>
 8001a20:	2340      	movs	r3, #64	@ 0x40
 8001a22:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8001a24:	0007      	movs	r7, r0
 8001a26:	4313      	orrs	r3, r2
 8001a28:	9343      	str	r3, [sp, #268]	@ 0x10c
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e7d3      	b.n	80019d6 <__ssvfiscanf_r+0x1b2>
 8001a2e:	2340      	movs	r3, #64	@ 0x40
 8001a30:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8001a32:	4313      	orrs	r3, r2
 8001a34:	9343      	str	r3, [sp, #268]	@ 0x10c
 8001a36:	2300      	movs	r3, #0
 8001a38:	e7cd      	b.n	80019d6 <__ssvfiscanf_r+0x1b2>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e7cb      	b.n	80019d6 <__ssvfiscanf_r+0x1b2>
 8001a3e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8001a40:	06d3      	lsls	r3, r2, #27
 8001a42:	d500      	bpl.n	8001a46 <__ssvfiscanf_r+0x222>
 8001a44:	e717      	b.n	8001876 <__ssvfiscanf_r+0x52>
 8001a46:	9b02      	ldr	r3, [sp, #8]
 8001a48:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8001a4a:	1d18      	adds	r0, r3, #4
 8001a4c:	9002      	str	r0, [sp, #8]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	07d5      	lsls	r5, r2, #31
 8001a52:	d501      	bpl.n	8001a58 <__ssvfiscanf_r+0x234>
 8001a54:	8019      	strh	r1, [r3, #0]
 8001a56:	e70e      	b.n	8001876 <__ssvfiscanf_r+0x52>
 8001a58:	6019      	str	r1, [r3, #0]
 8001a5a:	e70c      	b.n	8001876 <__ssvfiscanf_r+0x52>
 8001a5c:	23c0      	movs	r3, #192	@ 0xc0
 8001a5e:	aa43      	add	r2, sp, #268	@ 0x10c
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	0021      	movs	r1, r4
 8001a64:	58d3      	ldr	r3, [r2, r3]
 8001a66:	9800      	ldr	r0, [sp, #0]
 8001a68:	4798      	blx	r3
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d0b7      	beq.n	80019de <__ssvfiscanf_r+0x1ba>
 8001a6e:	e796      	b.n	800199e <__ssvfiscanf_r+0x17a>
 8001a70:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8001a72:	3201      	adds	r2, #1
 8001a74:	9247      	str	r2, [sp, #284]	@ 0x11c
 8001a76:	6862      	ldr	r2, [r4, #4]
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	6062      	str	r2, [r4, #4]
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	dd02      	ble.n	8001a86 <__ssvfiscanf_r+0x262>
 8001a80:	3301      	adds	r3, #1
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	e7b1      	b.n	80019ea <__ssvfiscanf_r+0x1c6>
 8001a86:	ab43      	add	r3, sp, #268	@ 0x10c
 8001a88:	0021      	movs	r1, r4
 8001a8a:	599b      	ldr	r3, [r3, r6]
 8001a8c:	9800      	ldr	r0, [sp, #0]
 8001a8e:	4798      	blx	r3
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0aa      	beq.n	80019ea <__ssvfiscanf_r+0x1c6>
 8001a94:	e783      	b.n	800199e <__ssvfiscanf_r+0x17a>
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	dc06      	bgt.n	8001aa8 <__ssvfiscanf_r+0x284>
 8001a9a:	0022      	movs	r2, r4
 8001a9c:	9800      	ldr	r0, [sp, #0]
 8001a9e:	ab02      	add	r3, sp, #8
 8001aa0:	a943      	add	r1, sp, #268	@ 0x10c
 8001aa2:	f000 f9ff 	bl	8001ea4 <_scanf_i>
 8001aa6:	e7af      	b.n	8001a08 <__ssvfiscanf_r+0x1e4>
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <__ssvfiscanf_r+0x2c4>)
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <__ssvfiscanf_r+0x28c>
 8001aae:	e6e2      	b.n	8001876 <__ssvfiscanf_r+0x52>
 8001ab0:	0022      	movs	r2, r4
 8001ab2:	9800      	ldr	r0, [sp, #0]
 8001ab4:	ab02      	add	r3, sp, #8
 8001ab6:	a943      	add	r1, sp, #268	@ 0x10c
 8001ab8:	e000      	b.n	8001abc <__ssvfiscanf_r+0x298>
 8001aba:	bf00      	nop
 8001abc:	e7a4      	b.n	8001a08 <__ssvfiscanf_r+0x1e4>
 8001abe:	89a3      	ldrh	r3, [r4, #12]
 8001ac0:	065b      	lsls	r3, r3, #25
 8001ac2:	d500      	bpl.n	8001ac6 <__ssvfiscanf_r+0x2a2>
 8001ac4:	e76f      	b.n	80019a6 <__ssvfiscanf_r+0x182>
 8001ac6:	23a5      	movs	r3, #165	@ 0xa5
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	449d      	add	sp, r3
 8001acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ace:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8001ad0:	e7f9      	b.n	8001ac6 <__ssvfiscanf_r+0x2a2>
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	fffffd6c 	.word	0xfffffd6c
 8001ad8:	0800176d 	.word	0x0800176d
 8001adc:	080017e5 	.word	0x080017e5
 8001ae0:	08002597 	.word	0x08002597
 8001ae4:	0800254e 	.word	0x0800254e
 8001ae8:	00000000 	.word	0x00000000

08001aec <_printf_common>:
 8001aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001aee:	0016      	movs	r6, r2
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	688a      	ldr	r2, [r1, #8]
 8001af4:	690b      	ldr	r3, [r1, #16]
 8001af6:	000c      	movs	r4, r1
 8001af8:	9000      	str	r0, [sp, #0]
 8001afa:	4293      	cmp	r3, r2
 8001afc:	da00      	bge.n	8001b00 <_printf_common+0x14>
 8001afe:	0013      	movs	r3, r2
 8001b00:	0022      	movs	r2, r4
 8001b02:	6033      	str	r3, [r6, #0]
 8001b04:	3243      	adds	r2, #67	@ 0x43
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	d001      	beq.n	8001b10 <_printf_common+0x24>
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	6033      	str	r3, [r6, #0]
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	069b      	lsls	r3, r3, #26
 8001b14:	d502      	bpl.n	8001b1c <_printf_common+0x30>
 8001b16:	6833      	ldr	r3, [r6, #0]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	6033      	str	r3, [r6, #0]
 8001b1c:	6822      	ldr	r2, [r4, #0]
 8001b1e:	2306      	movs	r3, #6
 8001b20:	0015      	movs	r5, r2
 8001b22:	401d      	ands	r5, r3
 8001b24:	421a      	tst	r2, r3
 8001b26:	d027      	beq.n	8001b78 <_printf_common+0x8c>
 8001b28:	0023      	movs	r3, r4
 8001b2a:	3343      	adds	r3, #67	@ 0x43
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	1e5a      	subs	r2, r3, #1
 8001b30:	4193      	sbcs	r3, r2
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	0692      	lsls	r2, r2, #26
 8001b36:	d430      	bmi.n	8001b9a <_printf_common+0xae>
 8001b38:	0022      	movs	r2, r4
 8001b3a:	9901      	ldr	r1, [sp, #4]
 8001b3c:	9800      	ldr	r0, [sp, #0]
 8001b3e:	9d08      	ldr	r5, [sp, #32]
 8001b40:	3243      	adds	r2, #67	@ 0x43
 8001b42:	47a8      	blx	r5
 8001b44:	3001      	adds	r0, #1
 8001b46:	d025      	beq.n	8001b94 <_printf_common+0xa8>
 8001b48:	2206      	movs	r2, #6
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d105      	bne.n	8001b60 <_printf_common+0x74>
 8001b54:	6833      	ldr	r3, [r6, #0]
 8001b56:	68e5      	ldr	r5, [r4, #12]
 8001b58:	1aed      	subs	r5, r5, r3
 8001b5a:	43eb      	mvns	r3, r5
 8001b5c:	17db      	asrs	r3, r3, #31
 8001b5e:	401d      	ands	r5, r3
 8001b60:	68a3      	ldr	r3, [r4, #8]
 8001b62:	6922      	ldr	r2, [r4, #16]
 8001b64:	4293      	cmp	r3, r2
 8001b66:	dd01      	ble.n	8001b6c <_printf_common+0x80>
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	18ed      	adds	r5, r5, r3
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	42b5      	cmp	r5, r6
 8001b70:	d120      	bne.n	8001bb4 <_printf_common+0xc8>
 8001b72:	2000      	movs	r0, #0
 8001b74:	e010      	b.n	8001b98 <_printf_common+0xac>
 8001b76:	3501      	adds	r5, #1
 8001b78:	68e3      	ldr	r3, [r4, #12]
 8001b7a:	6832      	ldr	r2, [r6, #0]
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	42ab      	cmp	r3, r5
 8001b80:	ddd2      	ble.n	8001b28 <_printf_common+0x3c>
 8001b82:	0022      	movs	r2, r4
 8001b84:	2301      	movs	r3, #1
 8001b86:	9901      	ldr	r1, [sp, #4]
 8001b88:	9800      	ldr	r0, [sp, #0]
 8001b8a:	9f08      	ldr	r7, [sp, #32]
 8001b8c:	3219      	adds	r2, #25
 8001b8e:	47b8      	blx	r7
 8001b90:	3001      	adds	r0, #1
 8001b92:	d1f0      	bne.n	8001b76 <_printf_common+0x8a>
 8001b94:	2001      	movs	r0, #1
 8001b96:	4240      	negs	r0, r0
 8001b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b9a:	2030      	movs	r0, #48	@ 0x30
 8001b9c:	18e1      	adds	r1, r4, r3
 8001b9e:	3143      	adds	r1, #67	@ 0x43
 8001ba0:	7008      	strb	r0, [r1, #0]
 8001ba2:	0021      	movs	r1, r4
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	3145      	adds	r1, #69	@ 0x45
 8001ba8:	7809      	ldrb	r1, [r1, #0]
 8001baa:	18a2      	adds	r2, r4, r2
 8001bac:	3243      	adds	r2, #67	@ 0x43
 8001bae:	3302      	adds	r3, #2
 8001bb0:	7011      	strb	r1, [r2, #0]
 8001bb2:	e7c1      	b.n	8001b38 <_printf_common+0x4c>
 8001bb4:	0022      	movs	r2, r4
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9901      	ldr	r1, [sp, #4]
 8001bba:	9800      	ldr	r0, [sp, #0]
 8001bbc:	9f08      	ldr	r7, [sp, #32]
 8001bbe:	321a      	adds	r2, #26
 8001bc0:	47b8      	blx	r7
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	d0e6      	beq.n	8001b94 <_printf_common+0xa8>
 8001bc6:	3601      	adds	r6, #1
 8001bc8:	e7d1      	b.n	8001b6e <_printf_common+0x82>
	...

08001bcc <_printf_i>:
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b08b      	sub	sp, #44	@ 0x2c
 8001bd0:	9206      	str	r2, [sp, #24]
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	3243      	adds	r2, #67	@ 0x43
 8001bd6:	9307      	str	r3, [sp, #28]
 8001bd8:	9005      	str	r0, [sp, #20]
 8001bda:	9203      	str	r2, [sp, #12]
 8001bdc:	7e0a      	ldrb	r2, [r1, #24]
 8001bde:	000c      	movs	r4, r1
 8001be0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001be2:	2a78      	cmp	r2, #120	@ 0x78
 8001be4:	d809      	bhi.n	8001bfa <_printf_i+0x2e>
 8001be6:	2a62      	cmp	r2, #98	@ 0x62
 8001be8:	d80b      	bhi.n	8001c02 <_printf_i+0x36>
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d100      	bne.n	8001bf0 <_printf_i+0x24>
 8001bee:	e0ba      	b.n	8001d66 <_printf_i+0x19a>
 8001bf0:	497a      	ldr	r1, [pc, #488]	@ (8001ddc <_printf_i+0x210>)
 8001bf2:	9104      	str	r1, [sp, #16]
 8001bf4:	2a58      	cmp	r2, #88	@ 0x58
 8001bf6:	d100      	bne.n	8001bfa <_printf_i+0x2e>
 8001bf8:	e08e      	b.n	8001d18 <_printf_i+0x14c>
 8001bfa:	0025      	movs	r5, r4
 8001bfc:	3542      	adds	r5, #66	@ 0x42
 8001bfe:	702a      	strb	r2, [r5, #0]
 8001c00:	e022      	b.n	8001c48 <_printf_i+0x7c>
 8001c02:	0010      	movs	r0, r2
 8001c04:	3863      	subs	r0, #99	@ 0x63
 8001c06:	2815      	cmp	r0, #21
 8001c08:	d8f7      	bhi.n	8001bfa <_printf_i+0x2e>
 8001c0a:	f7fe fa7f 	bl	800010c <__gnu_thumb1_case_shi>
 8001c0e:	0016      	.short	0x0016
 8001c10:	fff6001f 	.word	0xfff6001f
 8001c14:	fff6fff6 	.word	0xfff6fff6
 8001c18:	001ffff6 	.word	0x001ffff6
 8001c1c:	fff6fff6 	.word	0xfff6fff6
 8001c20:	fff6fff6 	.word	0xfff6fff6
 8001c24:	0036009f 	.word	0x0036009f
 8001c28:	fff6007e 	.word	0xfff6007e
 8001c2c:	00b0fff6 	.word	0x00b0fff6
 8001c30:	0036fff6 	.word	0x0036fff6
 8001c34:	fff6fff6 	.word	0xfff6fff6
 8001c38:	0082      	.short	0x0082
 8001c3a:	0025      	movs	r5, r4
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	3542      	adds	r5, #66	@ 0x42
 8001c40:	1d11      	adds	r1, r2, #4
 8001c42:	6019      	str	r1, [r3, #0]
 8001c44:	6813      	ldr	r3, [r2, #0]
 8001c46:	702b      	strb	r3, [r5, #0]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e09e      	b.n	8001d8a <_printf_i+0x1be>
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	6809      	ldr	r1, [r1, #0]
 8001c50:	1d02      	adds	r2, r0, #4
 8001c52:	060d      	lsls	r5, r1, #24
 8001c54:	d50b      	bpl.n	8001c6e <_printf_i+0xa2>
 8001c56:	6806      	ldr	r6, [r0, #0]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	2e00      	cmp	r6, #0
 8001c5c:	da03      	bge.n	8001c66 <_printf_i+0x9a>
 8001c5e:	232d      	movs	r3, #45	@ 0x2d
 8001c60:	9a03      	ldr	r2, [sp, #12]
 8001c62:	4276      	negs	r6, r6
 8001c64:	7013      	strb	r3, [r2, #0]
 8001c66:	4b5d      	ldr	r3, [pc, #372]	@ (8001ddc <_printf_i+0x210>)
 8001c68:	270a      	movs	r7, #10
 8001c6a:	9304      	str	r3, [sp, #16]
 8001c6c:	e018      	b.n	8001ca0 <_printf_i+0xd4>
 8001c6e:	6806      	ldr	r6, [r0, #0]
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	0649      	lsls	r1, r1, #25
 8001c74:	d5f1      	bpl.n	8001c5a <_printf_i+0x8e>
 8001c76:	b236      	sxth	r6, r6
 8001c78:	e7ef      	b.n	8001c5a <_printf_i+0x8e>
 8001c7a:	6808      	ldr	r0, [r1, #0]
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	c940      	ldmia	r1!, {r6}
 8001c80:	0605      	lsls	r5, r0, #24
 8001c82:	d402      	bmi.n	8001c8a <_printf_i+0xbe>
 8001c84:	0640      	lsls	r0, r0, #25
 8001c86:	d500      	bpl.n	8001c8a <_printf_i+0xbe>
 8001c88:	b2b6      	uxth	r6, r6
 8001c8a:	6019      	str	r1, [r3, #0]
 8001c8c:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <_printf_i+0x210>)
 8001c8e:	270a      	movs	r7, #10
 8001c90:	9304      	str	r3, [sp, #16]
 8001c92:	2a6f      	cmp	r2, #111	@ 0x6f
 8001c94:	d100      	bne.n	8001c98 <_printf_i+0xcc>
 8001c96:	3f02      	subs	r7, #2
 8001c98:	0023      	movs	r3, r4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	3343      	adds	r3, #67	@ 0x43
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	60a3      	str	r3, [r4, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db06      	blt.n	8001cb6 <_printf_i+0xea>
 8001ca8:	2104      	movs	r1, #4
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	9d03      	ldr	r5, [sp, #12]
 8001cae:	438a      	bics	r2, r1
 8001cb0:	6022      	str	r2, [r4, #0]
 8001cb2:	4333      	orrs	r3, r6
 8001cb4:	d00c      	beq.n	8001cd0 <_printf_i+0x104>
 8001cb6:	9d03      	ldr	r5, [sp, #12]
 8001cb8:	0030      	movs	r0, r6
 8001cba:	0039      	movs	r1, r7
 8001cbc:	f7fe fab6 	bl	800022c <__aeabi_uidivmod>
 8001cc0:	9b04      	ldr	r3, [sp, #16]
 8001cc2:	3d01      	subs	r5, #1
 8001cc4:	5c5b      	ldrb	r3, [r3, r1]
 8001cc6:	702b      	strb	r3, [r5, #0]
 8001cc8:	0033      	movs	r3, r6
 8001cca:	0006      	movs	r6, r0
 8001ccc:	429f      	cmp	r7, r3
 8001cce:	d9f3      	bls.n	8001cb8 <_printf_i+0xec>
 8001cd0:	2f08      	cmp	r7, #8
 8001cd2:	d109      	bne.n	8001ce8 <_printf_i+0x11c>
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	07db      	lsls	r3, r3, #31
 8001cd8:	d506      	bpl.n	8001ce8 <_printf_i+0x11c>
 8001cda:	6862      	ldr	r2, [r4, #4]
 8001cdc:	6923      	ldr	r3, [r4, #16]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dc02      	bgt.n	8001ce8 <_printf_i+0x11c>
 8001ce2:	2330      	movs	r3, #48	@ 0x30
 8001ce4:	3d01      	subs	r5, #1
 8001ce6:	702b      	strb	r3, [r5, #0]
 8001ce8:	9b03      	ldr	r3, [sp, #12]
 8001cea:	1b5b      	subs	r3, r3, r5
 8001cec:	6123      	str	r3, [r4, #16]
 8001cee:	9b07      	ldr	r3, [sp, #28]
 8001cf0:	0021      	movs	r1, r4
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	9805      	ldr	r0, [sp, #20]
 8001cf6:	9b06      	ldr	r3, [sp, #24]
 8001cf8:	aa09      	add	r2, sp, #36	@ 0x24
 8001cfa:	f7ff fef7 	bl	8001aec <_printf_common>
 8001cfe:	3001      	adds	r0, #1
 8001d00:	d148      	bne.n	8001d94 <_printf_i+0x1c8>
 8001d02:	2001      	movs	r0, #1
 8001d04:	4240      	negs	r0, r0
 8001d06:	b00b      	add	sp, #44	@ 0x2c
 8001d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	6809      	ldr	r1, [r1, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	6022      	str	r2, [r4, #0]
 8001d12:	2278      	movs	r2, #120	@ 0x78
 8001d14:	4932      	ldr	r1, [pc, #200]	@ (8001de0 <_printf_i+0x214>)
 8001d16:	9104      	str	r1, [sp, #16]
 8001d18:	0021      	movs	r1, r4
 8001d1a:	3145      	adds	r1, #69	@ 0x45
 8001d1c:	700a      	strb	r2, [r1, #0]
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	c940      	ldmia	r1!, {r6}
 8001d24:	0610      	lsls	r0, r2, #24
 8001d26:	d402      	bmi.n	8001d2e <_printf_i+0x162>
 8001d28:	0650      	lsls	r0, r2, #25
 8001d2a:	d500      	bpl.n	8001d2e <_printf_i+0x162>
 8001d2c:	b2b6      	uxth	r6, r6
 8001d2e:	6019      	str	r1, [r3, #0]
 8001d30:	07d3      	lsls	r3, r2, #31
 8001d32:	d502      	bpl.n	8001d3a <_printf_i+0x16e>
 8001d34:	2320      	movs	r3, #32
 8001d36:	4313      	orrs	r3, r2
 8001d38:	6023      	str	r3, [r4, #0]
 8001d3a:	2e00      	cmp	r6, #0
 8001d3c:	d001      	beq.n	8001d42 <_printf_i+0x176>
 8001d3e:	2710      	movs	r7, #16
 8001d40:	e7aa      	b.n	8001c98 <_printf_i+0xcc>
 8001d42:	2220      	movs	r2, #32
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	4393      	bics	r3, r2
 8001d48:	6023      	str	r3, [r4, #0]
 8001d4a:	e7f8      	b.n	8001d3e <_printf_i+0x172>
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	680d      	ldr	r5, [r1, #0]
 8001d50:	1d10      	adds	r0, r2, #4
 8001d52:	6949      	ldr	r1, [r1, #20]
 8001d54:	6018      	str	r0, [r3, #0]
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	062e      	lsls	r6, r5, #24
 8001d5a:	d501      	bpl.n	8001d60 <_printf_i+0x194>
 8001d5c:	6019      	str	r1, [r3, #0]
 8001d5e:	e002      	b.n	8001d66 <_printf_i+0x19a>
 8001d60:	066d      	lsls	r5, r5, #25
 8001d62:	d5fb      	bpl.n	8001d5c <_printf_i+0x190>
 8001d64:	8019      	strh	r1, [r3, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9d03      	ldr	r5, [sp, #12]
 8001d6a:	6123      	str	r3, [r4, #16]
 8001d6c:	e7bf      	b.n	8001cee <_printf_i+0x122>
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	1d11      	adds	r1, r2, #4
 8001d72:	6019      	str	r1, [r3, #0]
 8001d74:	6815      	ldr	r5, [r2, #0]
 8001d76:	2100      	movs	r1, #0
 8001d78:	0028      	movs	r0, r5
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	f000 fa2e 	bl	80021dc <memchr>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d001      	beq.n	8001d88 <_printf_i+0x1bc>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	6060      	str	r0, [r4, #4]
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	6123      	str	r3, [r4, #16]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9a03      	ldr	r2, [sp, #12]
 8001d90:	7013      	strb	r3, [r2, #0]
 8001d92:	e7ac      	b.n	8001cee <_printf_i+0x122>
 8001d94:	002a      	movs	r2, r5
 8001d96:	6923      	ldr	r3, [r4, #16]
 8001d98:	9906      	ldr	r1, [sp, #24]
 8001d9a:	9805      	ldr	r0, [sp, #20]
 8001d9c:	9d07      	ldr	r5, [sp, #28]
 8001d9e:	47a8      	blx	r5
 8001da0:	3001      	adds	r0, #1
 8001da2:	d0ae      	beq.n	8001d02 <_printf_i+0x136>
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	079b      	lsls	r3, r3, #30
 8001da8:	d415      	bmi.n	8001dd6 <_printf_i+0x20a>
 8001daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001dac:	68e0      	ldr	r0, [r4, #12]
 8001dae:	4298      	cmp	r0, r3
 8001db0:	daa9      	bge.n	8001d06 <_printf_i+0x13a>
 8001db2:	0018      	movs	r0, r3
 8001db4:	e7a7      	b.n	8001d06 <_printf_i+0x13a>
 8001db6:	0022      	movs	r2, r4
 8001db8:	2301      	movs	r3, #1
 8001dba:	9906      	ldr	r1, [sp, #24]
 8001dbc:	9805      	ldr	r0, [sp, #20]
 8001dbe:	9e07      	ldr	r6, [sp, #28]
 8001dc0:	3219      	adds	r2, #25
 8001dc2:	47b0      	blx	r6
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	d09c      	beq.n	8001d02 <_printf_i+0x136>
 8001dc8:	3501      	adds	r5, #1
 8001dca:	68e3      	ldr	r3, [r4, #12]
 8001dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	42ab      	cmp	r3, r5
 8001dd2:	dcf0      	bgt.n	8001db6 <_printf_i+0x1ea>
 8001dd4:	e7e9      	b.n	8001daa <_printf_i+0x1de>
 8001dd6:	2500      	movs	r5, #0
 8001dd8:	e7f7      	b.n	8001dca <_printf_i+0x1fe>
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	08002559 	.word	0x08002559
 8001de0:	0800256a 	.word	0x0800256a

08001de4 <_scanf_chars>:
 8001de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001de6:	0015      	movs	r5, r2
 8001de8:	688a      	ldr	r2, [r1, #8]
 8001dea:	000c      	movs	r4, r1
 8001dec:	9001      	str	r0, [sp, #4]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d104      	bne.n	8001dfc <_scanf_chars+0x18>
 8001df2:	698a      	ldr	r2, [r1, #24]
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	d117      	bne.n	8001e28 <_scanf_chars+0x44>
 8001df8:	3201      	adds	r2, #1
 8001dfa:	60a2      	str	r2, [r4, #8]
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	06d2      	lsls	r2, r2, #27
 8001e00:	d403      	bmi.n	8001e0a <_scanf_chars+0x26>
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	1d11      	adds	r1, r2, #4
 8001e06:	6019      	str	r1, [r3, #0]
 8001e08:	6817      	ldr	r7, [r2, #0]
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	69a0      	ldr	r0, [r4, #24]
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d016      	beq.n	8001e40 <_scanf_chars+0x5c>
 8001e12:	2801      	cmp	r0, #1
 8001e14:	d10b      	bne.n	8001e2e <_scanf_chars+0x4a>
 8001e16:	682b      	ldr	r3, [r5, #0]
 8001e18:	6962      	ldr	r2, [r4, #20]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <_scanf_chars+0x5c>
 8001e22:	2e00      	cmp	r6, #0
 8001e24:	d03b      	beq.n	8001e9e <_scanf_chars+0xba>
 8001e26:	e029      	b.n	8001e7c <_scanf_chars+0x98>
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	e7e5      	b.n	8001dfa <_scanf_chars+0x16>
 8001e2e:	2802      	cmp	r0, #2
 8001e30:	d124      	bne.n	8001e7c <_scanf_chars+0x98>
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea0 <_scanf_chars+0xbc>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4213      	tst	r3, r2
 8001e3e:	d11d      	bne.n	8001e7c <_scanf_chars+0x98>
 8001e40:	2210      	movs	r2, #16
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	3601      	adds	r6, #1
 8001e46:	4213      	tst	r3, r2
 8001e48:	d103      	bne.n	8001e52 <_scanf_chars+0x6e>
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	703b      	strb	r3, [r7, #0]
 8001e50:	3701      	adds	r7, #1
 8001e52:	682a      	ldr	r2, [r5, #0]
 8001e54:	686b      	ldr	r3, [r5, #4]
 8001e56:	3201      	adds	r2, #1
 8001e58:	602a      	str	r2, [r5, #0]
 8001e5a:	68a2      	ldr	r2, [r4, #8]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	606b      	str	r3, [r5, #4]
 8001e62:	60a2      	str	r2, [r4, #8]
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d009      	beq.n	8001e7c <_scanf_chars+0x98>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dccf      	bgt.n	8001e0c <_scanf_chars+0x28>
 8001e6c:	23c0      	movs	r3, #192	@ 0xc0
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	0029      	movs	r1, r5
 8001e72:	58e3      	ldr	r3, [r4, r3]
 8001e74:	9801      	ldr	r0, [sp, #4]
 8001e76:	4798      	blx	r3
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d0c7      	beq.n	8001e0c <_scanf_chars+0x28>
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	2310      	movs	r3, #16
 8001e80:	0011      	movs	r1, r2
 8001e82:	4019      	ands	r1, r3
 8001e84:	421a      	tst	r2, r3
 8001e86:	d106      	bne.n	8001e96 <_scanf_chars+0xb2>
 8001e88:	68e3      	ldr	r3, [r4, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60e3      	str	r3, [r4, #12]
 8001e8e:	69a3      	ldr	r3, [r4, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d000      	beq.n	8001e96 <_scanf_chars+0xb2>
 8001e94:	7039      	strb	r1, [r7, #0]
 8001e96:	2000      	movs	r0, #0
 8001e98:	6923      	ldr	r3, [r4, #16]
 8001e9a:	199b      	adds	r3, r3, r6
 8001e9c:	6123      	str	r3, [r4, #16]
 8001e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ea0:	08002597 	.word	0x08002597

08001ea4 <_scanf_i>:
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	@ 0x2c
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	4b78      	ldr	r3, [pc, #480]	@ (800208c <_scanf_i+0x1e8>)
 8001eac:	0016      	movs	r6, r2
 8001eae:	9004      	str	r0, [sp, #16]
 8001eb0:	aa07      	add	r2, sp, #28
 8001eb2:	cba1      	ldmia	r3!, {r0, r5, r7}
 8001eb4:	c2a1      	stmia	r2!, {r0, r5, r7}
 8001eb6:	4a76      	ldr	r2, [pc, #472]	@ (8002090 <_scanf_i+0x1ec>)
 8001eb8:	698b      	ldr	r3, [r1, #24]
 8001eba:	000c      	movs	r4, r1
 8001ebc:	9205      	str	r2, [sp, #20]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d101      	bne.n	8001ec6 <_scanf_i+0x22>
 8001ec2:	4b74      	ldr	r3, [pc, #464]	@ (8002094 <_scanf_i+0x1f0>)
 8001ec4:	9305      	str	r3, [sp, #20]
 8001ec6:	22ae      	movs	r2, #174	@ 0xae
 8001ec8:	2000      	movs	r0, #0
 8001eca:	68a3      	ldr	r3, [r4, #8]
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	9003      	str	r0, [sp, #12]
 8001ed2:	4291      	cmp	r1, r2
 8001ed4:	d905      	bls.n	8001ee2 <_scanf_i+0x3e>
 8001ed6:	3b5e      	subs	r3, #94	@ 0x5e
 8001ed8:	3bff      	subs	r3, #255	@ 0xff
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	235e      	movs	r3, #94	@ 0x5e
 8001ede:	33ff      	adds	r3, #255	@ 0xff
 8001ee0:	60a3      	str	r3, [r4, #8]
 8001ee2:	0023      	movs	r3, r4
 8001ee4:	331c      	adds	r3, #28
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	23d0      	movs	r3, #208	@ 0xd0
 8001eea:	2700      	movs	r7, #0
 8001eec:	6822      	ldr	r2, [r4, #0]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	9b00      	ldr	r3, [sp, #0]
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	6833      	ldr	r3, [r6, #0]
 8001efa:	a807      	add	r0, sp, #28
 8001efc:	7819      	ldrb	r1, [r3, #0]
 8001efe:	00bb      	lsls	r3, r7, #2
 8001f00:	2202      	movs	r2, #2
 8001f02:	5818      	ldr	r0, [r3, r0]
 8001f04:	f000 f96a 	bl	80021dc <memchr>
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d029      	beq.n	8001f60 <_scanf_i+0xbc>
 8001f0c:	2f01      	cmp	r7, #1
 8001f0e:	d15e      	bne.n	8001fce <_scanf_i+0x12a>
 8001f10:	6863      	ldr	r3, [r4, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <_scanf_i+0x80>
 8001f16:	3308      	adds	r3, #8
 8001f18:	6822      	ldr	r2, [r4, #0]
 8001f1a:	6063      	str	r3, [r4, #4]
 8001f1c:	33f9      	adds	r3, #249	@ 0xf9
 8001f1e:	33ff      	adds	r3, #255	@ 0xff
 8001f20:	4313      	orrs	r3, r2
 8001f22:	6023      	str	r3, [r4, #0]
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	4a5c      	ldr	r2, [pc, #368]	@ (8002098 <_scanf_i+0x1f4>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	68a3      	ldr	r3, [r4, #8]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	60a2      	str	r2, [r4, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <_scanf_i+0xbc>
 8001f36:	6833      	ldr	r3, [r6, #0]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	6032      	str	r2, [r6, #0]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	9a02      	ldr	r2, [sp, #8]
 8001f40:	7013      	strb	r3, [r2, #0]
 8001f42:	6873      	ldr	r3, [r6, #4]
 8001f44:	1c55      	adds	r5, r2, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6073      	str	r3, [r6, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	dc07      	bgt.n	8001f5e <_scanf_i+0xba>
 8001f4e:	23c0      	movs	r3, #192	@ 0xc0
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	0031      	movs	r1, r6
 8001f54:	58e3      	ldr	r3, [r4, r3]
 8001f56:	9804      	ldr	r0, [sp, #16]
 8001f58:	4798      	blx	r3
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d17e      	bne.n	800205c <_scanf_i+0x1b8>
 8001f5e:	9502      	str	r5, [sp, #8]
 8001f60:	3701      	adds	r7, #1
 8001f62:	2f03      	cmp	r7, #3
 8001f64:	d1c8      	bne.n	8001ef8 <_scanf_i+0x54>
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <_scanf_i+0xcc>
 8001f6c:	330a      	adds	r3, #10
 8001f6e:	6063      	str	r3, [r4, #4]
 8001f70:	2700      	movs	r7, #0
 8001f72:	6863      	ldr	r3, [r4, #4]
 8001f74:	4949      	ldr	r1, [pc, #292]	@ (800209c <_scanf_i+0x1f8>)
 8001f76:	6960      	ldr	r0, [r4, #20]
 8001f78:	1ac9      	subs	r1, r1, r3
 8001f7a:	f000 f893 	bl	80020a4 <__sccl>
 8001f7e:	9d02      	ldr	r5, [sp, #8]
 8001f80:	68a3      	ldr	r3, [r4, #8]
 8001f82:	6820      	ldr	r0, [r4, #0]
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03f      	beq.n	800200a <_scanf_i+0x166>
 8001f8a:	6831      	ldr	r1, [r6, #0]
 8001f8c:	6963      	ldr	r3, [r4, #20]
 8001f8e:	780a      	ldrb	r2, [r1, #0]
 8001f90:	5c9b      	ldrb	r3, [r3, r2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d039      	beq.n	800200a <_scanf_i+0x166>
 8001f96:	2a30      	cmp	r2, #48	@ 0x30
 8001f98:	d128      	bne.n	8001fec <_scanf_i+0x148>
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4218      	tst	r0, r3
 8001fa0:	d024      	beq.n	8001fec <_scanf_i+0x148>
 8001fa2:	9b03      	ldr	r3, [sp, #12]
 8001fa4:	3701      	adds	r7, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <_scanf_i+0x112>
 8001faa:	001a      	movs	r2, r3
 8001fac:	9b02      	ldr	r3, [sp, #8]
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	9203      	str	r2, [sp, #12]
 8001fb4:	60a3      	str	r3, [r4, #8]
 8001fb6:	6873      	ldr	r3, [r6, #4]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	6073      	str	r3, [r6, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dd1c      	ble.n	8001ffa <_scanf_i+0x156>
 8001fc0:	6833      	ldr	r3, [r6, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	6033      	str	r3, [r6, #0]
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60a3      	str	r3, [r4, #8]
 8001fcc:	e7d8      	b.n	8001f80 <_scanf_i+0xdc>
 8001fce:	2f02      	cmp	r7, #2
 8001fd0:	d1ac      	bne.n	8001f2c <_scanf_i+0x88>
 8001fd2:	23c0      	movs	r3, #192	@ 0xc0
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	6822      	ldr	r2, [r4, #0]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0089      	lsls	r1, r1, #2
 8001fde:	428b      	cmp	r3, r1
 8001fe0:	d1c1      	bne.n	8001f66 <_scanf_i+0xc2>
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	6063      	str	r3, [r4, #4]
 8001fe6:	33f0      	adds	r3, #240	@ 0xf0
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	e79e      	b.n	8001f2a <_scanf_i+0x86>
 8001fec:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <_scanf_i+0x1fc>)
 8001fee:	4003      	ands	r3, r0
 8001ff0:	6023      	str	r3, [r4, #0]
 8001ff2:	780b      	ldrb	r3, [r1, #0]
 8001ff4:	702b      	strb	r3, [r5, #0]
 8001ff6:	3501      	adds	r5, #1
 8001ff8:	e7dd      	b.n	8001fb6 <_scanf_i+0x112>
 8001ffa:	23c0      	movs	r3, #192	@ 0xc0
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	0031      	movs	r1, r6
 8002000:	58e3      	ldr	r3, [r4, r3]
 8002002:	9804      	ldr	r0, [sp, #16]
 8002004:	4798      	blx	r3
 8002006:	2800      	cmp	r0, #0
 8002008:	d0dd      	beq.n	8001fc6 <_scanf_i+0x122>
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	d50e      	bpl.n	800202e <_scanf_i+0x18a>
 8002010:	9b00      	ldr	r3, [sp, #0]
 8002012:	429d      	cmp	r5, r3
 8002014:	d907      	bls.n	8002026 <_scanf_i+0x182>
 8002016:	23be      	movs	r3, #190	@ 0xbe
 8002018:	3d01      	subs	r5, #1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	0032      	movs	r2, r6
 800201e:	7829      	ldrb	r1, [r5, #0]
 8002020:	58e3      	ldr	r3, [r4, r3]
 8002022:	9804      	ldr	r0, [sp, #16]
 8002024:	4798      	blx	r3
 8002026:	9b00      	ldr	r3, [sp, #0]
 8002028:	2001      	movs	r0, #1
 800202a:	429d      	cmp	r5, r3
 800202c:	d029      	beq.n	8002082 <_scanf_i+0x1de>
 800202e:	6821      	ldr	r1, [r4, #0]
 8002030:	2310      	movs	r3, #16
 8002032:	000a      	movs	r2, r1
 8002034:	401a      	ands	r2, r3
 8002036:	4219      	tst	r1, r3
 8002038:	d11c      	bne.n	8002074 <_scanf_i+0x1d0>
 800203a:	702a      	strb	r2, [r5, #0]
 800203c:	6863      	ldr	r3, [r4, #4]
 800203e:	9900      	ldr	r1, [sp, #0]
 8002040:	9804      	ldr	r0, [sp, #16]
 8002042:	9e05      	ldr	r6, [sp, #20]
 8002044:	47b0      	blx	r6
 8002046:	9b01      	ldr	r3, [sp, #4]
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0691      	lsls	r1, r2, #26
 800204e:	d507      	bpl.n	8002060 <_scanf_i+0x1bc>
 8002050:	9901      	ldr	r1, [sp, #4]
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	600a      	str	r2, [r1, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6018      	str	r0, [r3, #0]
 800205a:	e008      	b.n	800206e <_scanf_i+0x1ca>
 800205c:	2700      	movs	r7, #0
 800205e:	e7d4      	b.n	800200a <_scanf_i+0x166>
 8002060:	1d19      	adds	r1, r3, #4
 8002062:	07d6      	lsls	r6, r2, #31
 8002064:	d50f      	bpl.n	8002086 <_scanf_i+0x1e2>
 8002066:	9a01      	ldr	r2, [sp, #4]
 8002068:	6011      	str	r1, [r2, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	8018      	strh	r0, [r3, #0]
 800206e:	68e3      	ldr	r3, [r4, #12]
 8002070:	3301      	adds	r3, #1
 8002072:	60e3      	str	r3, [r4, #12]
 8002074:	2000      	movs	r0, #0
 8002076:	9b00      	ldr	r3, [sp, #0]
 8002078:	1aed      	subs	r5, r5, r3
 800207a:	6923      	ldr	r3, [r4, #16]
 800207c:	19ed      	adds	r5, r5, r7
 800207e:	195b      	adds	r3, r3, r5
 8002080:	6123      	str	r3, [r4, #16]
 8002082:	b00b      	add	sp, #44	@ 0x2c
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	9a01      	ldr	r2, [sp, #4]
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	e7e4      	b.n	8002056 <_scanf_i+0x1b2>
 800208c:	080024fc 	.word	0x080024fc
 8002090:	08002485 	.word	0x08002485
 8002094:	08002379 	.word	0x08002379
 8002098:	fffffaff 	.word	0xfffffaff
 800209c:	0800258b 	.word	0x0800258b
 80020a0:	fffff6ff 	.word	0xfffff6ff

080020a4 <__sccl>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	780b      	ldrb	r3, [r1, #0]
 80020a8:	0004      	movs	r4, r0
 80020aa:	2b5e      	cmp	r3, #94	@ 0x5e
 80020ac:	d019      	beq.n	80020e2 <__sccl+0x3e>
 80020ae:	1c4d      	adds	r5, r1, #1
 80020b0:	2100      	movs	r1, #0
 80020b2:	0022      	movs	r2, r4
 80020b4:	1c60      	adds	r0, r4, #1
 80020b6:	30ff      	adds	r0, #255	@ 0xff
 80020b8:	7011      	strb	r1, [r2, #0]
 80020ba:	3201      	adds	r2, #1
 80020bc:	4282      	cmp	r2, r0
 80020be:	d1fb      	bne.n	80020b8 <__sccl+0x14>
 80020c0:	1e68      	subs	r0, r5, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d026      	beq.n	8002114 <__sccl+0x70>
 80020c6:	2601      	movs	r6, #1
 80020c8:	404e      	eors	r6, r1
 80020ca:	0028      	movs	r0, r5
 80020cc:	54e6      	strb	r6, [r4, r3]
 80020ce:	7801      	ldrb	r1, [r0, #0]
 80020d0:	1c45      	adds	r5, r0, #1
 80020d2:	292d      	cmp	r1, #45	@ 0x2d
 80020d4:	d009      	beq.n	80020ea <__sccl+0x46>
 80020d6:	295d      	cmp	r1, #93	@ 0x5d
 80020d8:	d01b      	beq.n	8002112 <__sccl+0x6e>
 80020da:	2900      	cmp	r1, #0
 80020dc:	d01a      	beq.n	8002114 <__sccl+0x70>
 80020de:	000b      	movs	r3, r1
 80020e0:	e7f3      	b.n	80020ca <__sccl+0x26>
 80020e2:	784b      	ldrb	r3, [r1, #1]
 80020e4:	1c8d      	adds	r5, r1, #2
 80020e6:	2101      	movs	r1, #1
 80020e8:	e7e3      	b.n	80020b2 <__sccl+0xe>
 80020ea:	7842      	ldrb	r2, [r0, #1]
 80020ec:	2a5d      	cmp	r2, #93	@ 0x5d
 80020ee:	d0f6      	beq.n	80020de <__sccl+0x3a>
 80020f0:	4293      	cmp	r3, r2
 80020f2:	dcf4      	bgt.n	80020de <__sccl+0x3a>
 80020f4:	0019      	movs	r1, r3
 80020f6:	3002      	adds	r0, #2
 80020f8:	3101      	adds	r1, #1
 80020fa:	5466      	strb	r6, [r4, r1]
 80020fc:	428a      	cmp	r2, r1
 80020fe:	dcfb      	bgt.n	80020f8 <__sccl+0x54>
 8002100:	1c59      	adds	r1, r3, #1
 8002102:	4293      	cmp	r3, r2
 8002104:	db02      	blt.n	800210c <__sccl+0x68>
 8002106:	2200      	movs	r2, #0
 8002108:	188b      	adds	r3, r1, r2
 800210a:	e7e0      	b.n	80020ce <__sccl+0x2a>
 800210c:	1ad2      	subs	r2, r2, r3
 800210e:	3a01      	subs	r2, #1
 8002110:	e7fa      	b.n	8002108 <__sccl+0x64>
 8002112:	0028      	movs	r0, r5
 8002114:	bd70      	pop	{r4, r5, r6, pc}
	...

08002118 <__submore>:
 8002118:	000b      	movs	r3, r1
 800211a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800211c:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800211e:	3344      	adds	r3, #68	@ 0x44
 8002120:	000c      	movs	r4, r1
 8002122:	429d      	cmp	r5, r3
 8002124:	d11c      	bne.n	8002160 <__submore+0x48>
 8002126:	2680      	movs	r6, #128	@ 0x80
 8002128:	00f6      	lsls	r6, r6, #3
 800212a:	0031      	movs	r1, r6
 800212c:	f7ff f930 	bl	8001390 <_malloc_r>
 8002130:	2800      	cmp	r0, #0
 8002132:	d102      	bne.n	800213a <__submore+0x22>
 8002134:	2001      	movs	r0, #1
 8002136:	4240      	negs	r0, r0
 8002138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800213a:	0023      	movs	r3, r4
 800213c:	6360      	str	r0, [r4, #52]	@ 0x34
 800213e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8002140:	3346      	adds	r3, #70	@ 0x46
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <__submore+0x70>)
 8002146:	54c2      	strb	r2, [r0, r3]
 8002148:	0023      	movs	r3, r4
 800214a:	3345      	adds	r3, #69	@ 0x45
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <__submore+0x74>)
 8002150:	54c2      	strb	r2, [r0, r3]
 8002152:	782a      	ldrb	r2, [r5, #0]
 8002154:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <__submore+0x78>)
 8002156:	54c2      	strb	r2, [r0, r3]
 8002158:	18c0      	adds	r0, r0, r3
 800215a:	6020      	str	r0, [r4, #0]
 800215c:	2000      	movs	r0, #0
 800215e:	e7eb      	b.n	8002138 <__submore+0x20>
 8002160:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8002162:	0029      	movs	r1, r5
 8002164:	0073      	lsls	r3, r6, #1
 8002166:	001a      	movs	r2, r3
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	f000 f84b 	bl	8002204 <_realloc_r>
 800216e:	1e05      	subs	r5, r0, #0
 8002170:	d0e0      	beq.n	8002134 <__submore+0x1c>
 8002172:	1987      	adds	r7, r0, r6
 8002174:	0001      	movs	r1, r0
 8002176:	0032      	movs	r2, r6
 8002178:	0038      	movs	r0, r7
 800217a:	f000 f83a 	bl	80021f2 <memcpy>
 800217e:	9b01      	ldr	r3, [sp, #4]
 8002180:	6027      	str	r7, [r4, #0]
 8002182:	6365      	str	r5, [r4, #52]	@ 0x34
 8002184:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002186:	e7e9      	b.n	800215c <__submore+0x44>
 8002188:	000003ff 	.word	0x000003ff
 800218c:	000003fe 	.word	0x000003fe
 8002190:	000003fd 	.word	0x000003fd

08002194 <memmove>:
 8002194:	b510      	push	{r4, lr}
 8002196:	4288      	cmp	r0, r1
 8002198:	d902      	bls.n	80021a0 <memmove+0xc>
 800219a:	188b      	adds	r3, r1, r2
 800219c:	4298      	cmp	r0, r3
 800219e:	d308      	bcc.n	80021b2 <memmove+0x1e>
 80021a0:	2300      	movs	r3, #0
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d007      	beq.n	80021b6 <memmove+0x22>
 80021a6:	5ccc      	ldrb	r4, [r1, r3]
 80021a8:	54c4      	strb	r4, [r0, r3]
 80021aa:	3301      	adds	r3, #1
 80021ac:	e7f9      	b.n	80021a2 <memmove+0xe>
 80021ae:	5c8b      	ldrb	r3, [r1, r2]
 80021b0:	5483      	strb	r3, [r0, r2]
 80021b2:	3a01      	subs	r2, #1
 80021b4:	d2fb      	bcs.n	80021ae <memmove+0x1a>
 80021b6:	bd10      	pop	{r4, pc}

080021b8 <_sbrk_r>:
 80021b8:	2300      	movs	r3, #0
 80021ba:	b570      	push	{r4, r5, r6, lr}
 80021bc:	4d06      	ldr	r5, [pc, #24]	@ (80021d8 <_sbrk_r+0x20>)
 80021be:	0004      	movs	r4, r0
 80021c0:	0008      	movs	r0, r1
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	f7fe fea8 	bl	8000f18 <_sbrk>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d103      	bne.n	80021d4 <_sbrk_r+0x1c>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d000      	beq.n	80021d4 <_sbrk_r+0x1c>
 80021d2:	6023      	str	r3, [r4, #0]
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	200001f8 	.word	0x200001f8

080021dc <memchr>:
 80021dc:	b2c9      	uxtb	r1, r1
 80021de:	1882      	adds	r2, r0, r2
 80021e0:	4290      	cmp	r0, r2
 80021e2:	d101      	bne.n	80021e8 <memchr+0xc>
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr
 80021e8:	7803      	ldrb	r3, [r0, #0]
 80021ea:	428b      	cmp	r3, r1
 80021ec:	d0fb      	beq.n	80021e6 <memchr+0xa>
 80021ee:	3001      	adds	r0, #1
 80021f0:	e7f6      	b.n	80021e0 <memchr+0x4>

080021f2 <memcpy>:
 80021f2:	2300      	movs	r3, #0
 80021f4:	b510      	push	{r4, lr}
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d100      	bne.n	80021fc <memcpy+0xa>
 80021fa:	bd10      	pop	{r4, pc}
 80021fc:	5ccc      	ldrb	r4, [r1, r3]
 80021fe:	54c4      	strb	r4, [r0, r3]
 8002200:	3301      	adds	r3, #1
 8002202:	e7f8      	b.n	80021f6 <memcpy+0x4>

08002204 <_realloc_r>:
 8002204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002206:	0006      	movs	r6, r0
 8002208:	000c      	movs	r4, r1
 800220a:	0015      	movs	r5, r2
 800220c:	2900      	cmp	r1, #0
 800220e:	d105      	bne.n	800221c <_realloc_r+0x18>
 8002210:	0011      	movs	r1, r2
 8002212:	f7ff f8bd 	bl	8001390 <_malloc_r>
 8002216:	0004      	movs	r4, r0
 8002218:	0020      	movs	r0, r4
 800221a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800221c:	2a00      	cmp	r2, #0
 800221e:	d103      	bne.n	8002228 <_realloc_r+0x24>
 8002220:	f7ff f84a 	bl	80012b8 <_free_r>
 8002224:	002c      	movs	r4, r5
 8002226:	e7f7      	b.n	8002218 <_realloc_r+0x14>
 8002228:	f000 f930 	bl	800248c <_malloc_usable_size_r>
 800222c:	0007      	movs	r7, r0
 800222e:	4285      	cmp	r5, r0
 8002230:	d802      	bhi.n	8002238 <_realloc_r+0x34>
 8002232:	0843      	lsrs	r3, r0, #1
 8002234:	42ab      	cmp	r3, r5
 8002236:	d3ef      	bcc.n	8002218 <_realloc_r+0x14>
 8002238:	0029      	movs	r1, r5
 800223a:	0030      	movs	r0, r6
 800223c:	f7ff f8a8 	bl	8001390 <_malloc_r>
 8002240:	9001      	str	r0, [sp, #4]
 8002242:	2800      	cmp	r0, #0
 8002244:	d101      	bne.n	800224a <_realloc_r+0x46>
 8002246:	9c01      	ldr	r4, [sp, #4]
 8002248:	e7e6      	b.n	8002218 <_realloc_r+0x14>
 800224a:	002a      	movs	r2, r5
 800224c:	42bd      	cmp	r5, r7
 800224e:	d900      	bls.n	8002252 <_realloc_r+0x4e>
 8002250:	003a      	movs	r2, r7
 8002252:	0021      	movs	r1, r4
 8002254:	9801      	ldr	r0, [sp, #4]
 8002256:	f7ff ffcc 	bl	80021f2 <memcpy>
 800225a:	0021      	movs	r1, r4
 800225c:	0030      	movs	r0, r6
 800225e:	f7ff f82b 	bl	80012b8 <_free_r>
 8002262:	e7f0      	b.n	8002246 <_realloc_r+0x42>

08002264 <_strtol_l.isra.0>:
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	b085      	sub	sp, #20
 8002268:	0017      	movs	r7, r2
 800226a:	001e      	movs	r6, r3
 800226c:	9003      	str	r0, [sp, #12]
 800226e:	9101      	str	r1, [sp, #4]
 8002270:	2b24      	cmp	r3, #36	@ 0x24
 8002272:	d823      	bhi.n	80022bc <_strtol_l.isra.0+0x58>
 8002274:	000c      	movs	r4, r1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d020      	beq.n	80022bc <_strtol_l.isra.0+0x58>
 800227a:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <_strtol_l.isra.0+0x10c>)
 800227c:	2208      	movs	r2, #8
 800227e:	469c      	mov	ip, r3
 8002280:	0023      	movs	r3, r4
 8002282:	4661      	mov	r1, ip
 8002284:	781d      	ldrb	r5, [r3, #0]
 8002286:	3401      	adds	r4, #1
 8002288:	5d48      	ldrb	r0, [r1, r5]
 800228a:	0001      	movs	r1, r0
 800228c:	4011      	ands	r1, r2
 800228e:	4210      	tst	r0, r2
 8002290:	d1f6      	bne.n	8002280 <_strtol_l.isra.0+0x1c>
 8002292:	2d2d      	cmp	r5, #45	@ 0x2d
 8002294:	d119      	bne.n	80022ca <_strtol_l.isra.0+0x66>
 8002296:	7825      	ldrb	r5, [r4, #0]
 8002298:	1c9c      	adds	r4, r3, #2
 800229a:	2301      	movs	r3, #1
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2210      	movs	r2, #16
 80022a0:	0033      	movs	r3, r6
 80022a2:	4393      	bics	r3, r2
 80022a4:	d11d      	bne.n	80022e2 <_strtol_l.isra.0+0x7e>
 80022a6:	2d30      	cmp	r5, #48	@ 0x30
 80022a8:	d115      	bne.n	80022d6 <_strtol_l.isra.0+0x72>
 80022aa:	2120      	movs	r1, #32
 80022ac:	7823      	ldrb	r3, [r4, #0]
 80022ae:	438b      	bics	r3, r1
 80022b0:	2b58      	cmp	r3, #88	@ 0x58
 80022b2:	d110      	bne.n	80022d6 <_strtol_l.isra.0+0x72>
 80022b4:	7865      	ldrb	r5, [r4, #1]
 80022b6:	3402      	adds	r4, #2
 80022b8:	2610      	movs	r6, #16
 80022ba:	e012      	b.n	80022e2 <_strtol_l.isra.0+0x7e>
 80022bc:	f7fe ffd0 	bl	8001260 <__errno>
 80022c0:	2316      	movs	r3, #22
 80022c2:	6003      	str	r3, [r0, #0]
 80022c4:	2000      	movs	r0, #0
 80022c6:	b005      	add	sp, #20
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ca:	9100      	str	r1, [sp, #0]
 80022cc:	2d2b      	cmp	r5, #43	@ 0x2b
 80022ce:	d1e6      	bne.n	800229e <_strtol_l.isra.0+0x3a>
 80022d0:	7825      	ldrb	r5, [r4, #0]
 80022d2:	1c9c      	adds	r4, r3, #2
 80022d4:	e7e3      	b.n	800229e <_strtol_l.isra.0+0x3a>
 80022d6:	2e00      	cmp	r6, #0
 80022d8:	d1ee      	bne.n	80022b8 <_strtol_l.isra.0+0x54>
 80022da:	360a      	adds	r6, #10
 80022dc:	2d30      	cmp	r5, #48	@ 0x30
 80022de:	d100      	bne.n	80022e2 <_strtol_l.isra.0+0x7e>
 80022e0:	3e02      	subs	r6, #2
 80022e2:	4a24      	ldr	r2, [pc, #144]	@ (8002374 <_strtol_l.isra.0+0x110>)
 80022e4:	9b00      	ldr	r3, [sp, #0]
 80022e6:	4694      	mov	ip, r2
 80022e8:	4463      	add	r3, ip
 80022ea:	0031      	movs	r1, r6
 80022ec:	0018      	movs	r0, r3
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	f7fd ff9c 	bl	800022c <__aeabi_uidivmod>
 80022f4:	2200      	movs	r2, #0
 80022f6:	4684      	mov	ip, r0
 80022f8:	0010      	movs	r0, r2
 80022fa:	002b      	movs	r3, r5
 80022fc:	3b30      	subs	r3, #48	@ 0x30
 80022fe:	2b09      	cmp	r3, #9
 8002300:	d811      	bhi.n	8002326 <_strtol_l.isra.0+0xc2>
 8002302:	001d      	movs	r5, r3
 8002304:	42ae      	cmp	r6, r5
 8002306:	dd1d      	ble.n	8002344 <_strtol_l.isra.0+0xe0>
 8002308:	1c53      	adds	r3, r2, #1
 800230a:	d009      	beq.n	8002320 <_strtol_l.isra.0+0xbc>
 800230c:	2201      	movs	r2, #1
 800230e:	4252      	negs	r2, r2
 8002310:	4584      	cmp	ip, r0
 8002312:	d305      	bcc.n	8002320 <_strtol_l.isra.0+0xbc>
 8002314:	d101      	bne.n	800231a <_strtol_l.isra.0+0xb6>
 8002316:	42a9      	cmp	r1, r5
 8002318:	db11      	blt.n	800233e <_strtol_l.isra.0+0xda>
 800231a:	2201      	movs	r2, #1
 800231c:	4370      	muls	r0, r6
 800231e:	1828      	adds	r0, r5, r0
 8002320:	7825      	ldrb	r5, [r4, #0]
 8002322:	3401      	adds	r4, #1
 8002324:	e7e9      	b.n	80022fa <_strtol_l.isra.0+0x96>
 8002326:	002b      	movs	r3, r5
 8002328:	3b41      	subs	r3, #65	@ 0x41
 800232a:	2b19      	cmp	r3, #25
 800232c:	d801      	bhi.n	8002332 <_strtol_l.isra.0+0xce>
 800232e:	3d37      	subs	r5, #55	@ 0x37
 8002330:	e7e8      	b.n	8002304 <_strtol_l.isra.0+0xa0>
 8002332:	002b      	movs	r3, r5
 8002334:	3b61      	subs	r3, #97	@ 0x61
 8002336:	2b19      	cmp	r3, #25
 8002338:	d804      	bhi.n	8002344 <_strtol_l.isra.0+0xe0>
 800233a:	3d57      	subs	r5, #87	@ 0x57
 800233c:	e7e2      	b.n	8002304 <_strtol_l.isra.0+0xa0>
 800233e:	2201      	movs	r2, #1
 8002340:	4252      	negs	r2, r2
 8002342:	e7ed      	b.n	8002320 <_strtol_l.isra.0+0xbc>
 8002344:	1c53      	adds	r3, r2, #1
 8002346:	d108      	bne.n	800235a <_strtol_l.isra.0+0xf6>
 8002348:	2322      	movs	r3, #34	@ 0x22
 800234a:	9a03      	ldr	r2, [sp, #12]
 800234c:	9802      	ldr	r0, [sp, #8]
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	2f00      	cmp	r7, #0
 8002352:	d0b8      	beq.n	80022c6 <_strtol_l.isra.0+0x62>
 8002354:	1e63      	subs	r3, r4, #1
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	e007      	b.n	800236a <_strtol_l.isra.0+0x106>
 800235a:	9b00      	ldr	r3, [sp, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d000      	beq.n	8002362 <_strtol_l.isra.0+0xfe>
 8002360:	4240      	negs	r0, r0
 8002362:	2f00      	cmp	r7, #0
 8002364:	d0af      	beq.n	80022c6 <_strtol_l.isra.0+0x62>
 8002366:	2a00      	cmp	r2, #0
 8002368:	d1f4      	bne.n	8002354 <_strtol_l.isra.0+0xf0>
 800236a:	9b01      	ldr	r3, [sp, #4]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	e7aa      	b.n	80022c6 <_strtol_l.isra.0+0x62>
 8002370:	08002597 	.word	0x08002597
 8002374:	7fffffff 	.word	0x7fffffff

08002378 <_strtol_r>:
 8002378:	b510      	push	{r4, lr}
 800237a:	f7ff ff73 	bl	8002264 <_strtol_l.isra.0>
 800237e:	bd10      	pop	{r4, pc}

08002380 <_strtoul_l.isra.0>:
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	001e      	movs	r6, r3
 8002384:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <_strtoul_l.isra.0+0x100>)
 8002386:	0017      	movs	r7, r2
 8002388:	000c      	movs	r4, r1
 800238a:	469c      	mov	ip, r3
 800238c:	2208      	movs	r2, #8
 800238e:	b085      	sub	sp, #20
 8002390:	9003      	str	r0, [sp, #12]
 8002392:	9100      	str	r1, [sp, #0]
 8002394:	0023      	movs	r3, r4
 8002396:	4661      	mov	r1, ip
 8002398:	781d      	ldrb	r5, [r3, #0]
 800239a:	3401      	adds	r4, #1
 800239c:	5d48      	ldrb	r0, [r1, r5]
 800239e:	0001      	movs	r1, r0
 80023a0:	4011      	ands	r1, r2
 80023a2:	4210      	tst	r0, r2
 80023a4:	d1f6      	bne.n	8002394 <_strtoul_l.isra.0+0x14>
 80023a6:	2d2d      	cmp	r5, #45	@ 0x2d
 80023a8:	d112      	bne.n	80023d0 <_strtoul_l.isra.0+0x50>
 80023aa:	7825      	ldrb	r5, [r4, #0]
 80023ac:	1c9c      	adds	r4, r3, #2
 80023ae:	2301      	movs	r3, #1
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2210      	movs	r2, #16
 80023b4:	0033      	movs	r3, r6
 80023b6:	4393      	bics	r3, r2
 80023b8:	d116      	bne.n	80023e8 <_strtoul_l.isra.0+0x68>
 80023ba:	2d30      	cmp	r5, #48	@ 0x30
 80023bc:	d10e      	bne.n	80023dc <_strtoul_l.isra.0+0x5c>
 80023be:	2120      	movs	r1, #32
 80023c0:	7823      	ldrb	r3, [r4, #0]
 80023c2:	438b      	bics	r3, r1
 80023c4:	2b58      	cmp	r3, #88	@ 0x58
 80023c6:	d109      	bne.n	80023dc <_strtoul_l.isra.0+0x5c>
 80023c8:	7865      	ldrb	r5, [r4, #1]
 80023ca:	3402      	adds	r4, #2
 80023cc:	2610      	movs	r6, #16
 80023ce:	e00b      	b.n	80023e8 <_strtoul_l.isra.0+0x68>
 80023d0:	9102      	str	r1, [sp, #8]
 80023d2:	2d2b      	cmp	r5, #43	@ 0x2b
 80023d4:	d1ed      	bne.n	80023b2 <_strtoul_l.isra.0+0x32>
 80023d6:	7825      	ldrb	r5, [r4, #0]
 80023d8:	1c9c      	adds	r4, r3, #2
 80023da:	e7ea      	b.n	80023b2 <_strtoul_l.isra.0+0x32>
 80023dc:	2e00      	cmp	r6, #0
 80023de:	d1f5      	bne.n	80023cc <_strtoul_l.isra.0+0x4c>
 80023e0:	360a      	adds	r6, #10
 80023e2:	2d30      	cmp	r5, #48	@ 0x30
 80023e4:	d100      	bne.n	80023e8 <_strtoul_l.isra.0+0x68>
 80023e6:	3e02      	subs	r6, #2
 80023e8:	2001      	movs	r0, #1
 80023ea:	0031      	movs	r1, r6
 80023ec:	4240      	negs	r0, r0
 80023ee:	f7fd fe97 	bl	8000120 <__udivsi3>
 80023f2:	9001      	str	r0, [sp, #4]
 80023f4:	2001      	movs	r0, #1
 80023f6:	0031      	movs	r1, r6
 80023f8:	4240      	negs	r0, r0
 80023fa:	f7fd ff17 	bl	800022c <__aeabi_uidivmod>
 80023fe:	2300      	movs	r3, #0
 8002400:	2201      	movs	r2, #1
 8002402:	0018      	movs	r0, r3
 8002404:	4694      	mov	ip, r2
 8002406:	002a      	movs	r2, r5
 8002408:	3a30      	subs	r2, #48	@ 0x30
 800240a:	2a09      	cmp	r2, #9
 800240c:	d812      	bhi.n	8002434 <_strtoul_l.isra.0+0xb4>
 800240e:	0015      	movs	r5, r2
 8002410:	42ae      	cmp	r6, r5
 8002412:	dd1e      	ble.n	8002452 <_strtoul_l.isra.0+0xd2>
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	d00a      	beq.n	800242e <_strtoul_l.isra.0+0xae>
 8002418:	2301      	movs	r3, #1
 800241a:	9a01      	ldr	r2, [sp, #4]
 800241c:	425b      	negs	r3, r3
 800241e:	4282      	cmp	r2, r0
 8002420:	d305      	bcc.n	800242e <_strtoul_l.isra.0+0xae>
 8002422:	d101      	bne.n	8002428 <_strtoul_l.isra.0+0xa8>
 8002424:	42a9      	cmp	r1, r5
 8002426:	db11      	blt.n	800244c <_strtoul_l.isra.0+0xcc>
 8002428:	4663      	mov	r3, ip
 800242a:	4370      	muls	r0, r6
 800242c:	1828      	adds	r0, r5, r0
 800242e:	7825      	ldrb	r5, [r4, #0]
 8002430:	3401      	adds	r4, #1
 8002432:	e7e8      	b.n	8002406 <_strtoul_l.isra.0+0x86>
 8002434:	002a      	movs	r2, r5
 8002436:	3a41      	subs	r2, #65	@ 0x41
 8002438:	2a19      	cmp	r2, #25
 800243a:	d801      	bhi.n	8002440 <_strtoul_l.isra.0+0xc0>
 800243c:	3d37      	subs	r5, #55	@ 0x37
 800243e:	e7e7      	b.n	8002410 <_strtoul_l.isra.0+0x90>
 8002440:	002a      	movs	r2, r5
 8002442:	3a61      	subs	r2, #97	@ 0x61
 8002444:	2a19      	cmp	r2, #25
 8002446:	d804      	bhi.n	8002452 <_strtoul_l.isra.0+0xd2>
 8002448:	3d57      	subs	r5, #87	@ 0x57
 800244a:	e7e1      	b.n	8002410 <_strtoul_l.isra.0+0x90>
 800244c:	2301      	movs	r3, #1
 800244e:	425b      	negs	r3, r3
 8002450:	e7ed      	b.n	800242e <_strtoul_l.isra.0+0xae>
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	d107      	bne.n	8002466 <_strtoul_l.isra.0+0xe6>
 8002456:	2222      	movs	r2, #34	@ 0x22
 8002458:	9903      	ldr	r1, [sp, #12]
 800245a:	0018      	movs	r0, r3
 800245c:	600a      	str	r2, [r1, #0]
 800245e:	2f00      	cmp	r7, #0
 8002460:	d109      	bne.n	8002476 <_strtoul_l.isra.0+0xf6>
 8002462:	b005      	add	sp, #20
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002466:	9a02      	ldr	r2, [sp, #8]
 8002468:	2a00      	cmp	r2, #0
 800246a:	d000      	beq.n	800246e <_strtoul_l.isra.0+0xee>
 800246c:	4240      	negs	r0, r0
 800246e:	2f00      	cmp	r7, #0
 8002470:	d0f7      	beq.n	8002462 <_strtoul_l.isra.0+0xe2>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <_strtoul_l.isra.0+0xfa>
 8002476:	1e63      	subs	r3, r4, #1
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	9b00      	ldr	r3, [sp, #0]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	e7f0      	b.n	8002462 <_strtoul_l.isra.0+0xe2>
 8002480:	08002597 	.word	0x08002597

08002484 <_strtoul_r>:
 8002484:	b510      	push	{r4, lr}
 8002486:	f7ff ff7b 	bl	8002380 <_strtoul_l.isra.0>
 800248a:	bd10      	pop	{r4, pc}

0800248c <_malloc_usable_size_r>:
 800248c:	1f0b      	subs	r3, r1, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1f18      	subs	r0, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	da01      	bge.n	800249a <_malloc_usable_size_r+0xe>
 8002496:	580b      	ldr	r3, [r1, r0]
 8002498:	18c0      	adds	r0, r0, r3
 800249a:	4770      	bx	lr

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
